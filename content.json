{"meta":{"title":"천년나무 블로그","subtitle":"Xeppetto Blog","description":"소프트웨어 품질전문가 천년나무의 블로그","author":"Xeppetto","url":"https://xeppetto.github.io","root":"/"},"pages":[],"posts":[{"title":"[WSL] WSL2 - Docker - React 설치","slug":"소프트웨어/WSL-and-Docker/20-WSL2-Docker-React","date":"2022-09-09T00:09:00.000Z","updated":"2022-09-09T00:09:00.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/20-WSL2-Docker-React/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/20-WSL2-Docker-React/","excerpt":"","text":"2022년, 가을, 추석이다. 이번 추석 중엔 하루를 온전히 회사 일을 해야 할 상황이다. 억울하고 피곤하다기 보다 그 연휴 기간 동안 발생하는 업무라는게 업무 시간을 8시간 온전히 사용할 일이 아니다보니 중간 남는 시간에 뭘 공부해볼까 몇 일 생산적인 고민을 했다. 길지 않은 고민 끝에 React를 제대로 파보기로 결심했다. 계속 React에 관심을 가지고 간간히 공부도 하고 관련 라이브러리들도 만져봤었지만 정작 회사에서 업무에 쓸 일이 없다보니 많은 시간을 들여 심각하게 기초부터 공부를 하지는 못했었다. 새로 이직한 회사에서는 React와 React Native를 쓰기 때문에 잘 됐다 싶어 추석 때 구조라도 제대로 심각하게 공부하자 생각이 들었다. 추석이라 일찍 집에 가라길래 일단 서점에 들러 책을 구입했다. 실행 방식Chapter 1을 빠르게 읽고 환경 구성을 시작했다. 이런 저런 설정 삽질을 하고 얻어낸 결론은 다음과 같다. 1. WLS2를 실행WSL2를 실행한다. 1wsl -d Ubuntu 2. Docker로 Ubuntu 컨테이너 생성Docker에서 Ubuntu Container 생성 시 필자는 아래를 사용하기로 했다. 1docker run -it --name react-test -p 3000:3000 -v /usr/src/app/node_modules -v $&#123;pwd&#125;:/usr/src/app -e CHOKIDAR_USEPOLLING=true ubuntu 3. Ubuntu apt update &amp; upgradeUbuntu의 기본 시스템 업데이트를 진행한다. 1apt update &amp;&amp; apt upgrade 4. apt : sudo, vim, curlUbuntu apt 중 React 환경을 구성하는데 필요한 curl을 설정한다. 동시에 Docker의 기본 Ubuntu 이미지에는 sudo와 vim이 없으므로 이를 설치한다. 1apt install sudo vim curl 5. nvm 설치curl을 이용해서 nvm을 설치한다. 1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash nvm 버전을 확인한다. 1nvm -v 참고 - https://github.com/nvm-sh/nvm 6. terminal을 다시 시작nvm 설치 후 terminal을 껐다 켜야 한다. terminal을 껐다 켜면 docker 컨테이너를 다시 시작해야 한다. 123docker start react-testdocker attach react-test 7. node 설치nvm을 이용해서 node를 설치한다. 1nvm install --lts node와 npm 버전을 확인한다. 123node -vnpm -v 8. yarn 설치npm을 이용해서 yarn를 설치한다. 1npm install --global yarn yarn 버전을 확인한다. 1yarn --version 9. react app 설치 및 실행react-test1 폴더에 리액트앱 프로젝트를 설치하고 실행한다. 12345yarn create react-app react-test1cd react-test1yarn start 정상적으로 실행되면 아래와 같이 접속 화면이 나타난다. 10. 웹브라우저에서 접속한다.웹브라우저에서 localhost:3000으로 접속하여 아래와 화면이 나타나는 지 확인한다. 위 그림과 같은 화면이 출력되면 성공이다. 11. git 설치마지막으로 앞으로 프로젝트들을 다루기 위해 git을 설치한다. 1apt install git-all 삽질의 경험1. Connection Denied이제 WSL은 좀 편히 다루지 싶어 아무 생각 없이 WSL2 Docker에 Ubuntu 컨테이너를 올리고 환경 설정을 시작했다. 설치와 관련된 내용은 앞서 기록한 내용들 참고 WSL2 실행 Docker 실행 WSL2를 실행 &gt; Docker로 Ubuntu 컨테이너 생성 &gt; sudo, vim, curl 설치 &gt; nvm, node, npm, yarn 설치 &gt; react test project 생성 &gt; 실행 &gt; localhost:3000에서 connection denied 발생 아… docker 실행 시에 3000번 포트 설정을 해야겠다. 다시 설정했다. 작동한다. 2. 업데이트 반영 안됨React 실행을 시키고 단순히 텍스트를 변경하는데 반영이 안된다. 서비스를 다시 시작해야 하나해서 react 서비스를 다시 시작해봐도 반영이 안된다. 인터넷을 뒤지기 시작하였는데, React 개발하시는 분들은 거의 MacOS에서 하시나보다. 인터넷의 문서들이 거의 MacOS 중심으로 되어 있는거 같다. 검색한지 30분 쯤 넘으니 ‘WSL2 Docker용 Ubuntu에서 사용하기가 어려운건가?’ 생각이 들기 시작한다. 열심히 찾다보니 다행히 검색이 됐다. 필자는 Back-end 개발을 하거나 Node로 개발할 때에는 Mac에서도 Docker로 Ubuntu나 CentOS 컨테이너 올려서 사용하는걸 선호하다보니 Windows11 - WSL2 - Docker - Ubuntu:latest 에서 React를 올리고 싶었다. 그래야 Mac에서도 Docker - Ubuntu:latest로 올릴 수 있을 거 같아서. 결론은 React의 설정(congfiguration) 중에 CHOKIDAR_USEPOLLING이라는 설정이 있는데 여기에 옵션을 true로 설정해 주어야 한다고 한다. 그리고 이 옵션은 모든 react app의 configuration에 추가할 필요 없이 docker 컨테이너 생성 시 옵션으로 넣어줄 수 있다고 한다. https://create-react-app.dev/docs/advanced-configuration/ 참고 CHOKIDAR_USEPOLLING을 true로 설정하면 React App이 수정될 때 브라우저에서 즉시 내용이 반영하도록 설정된다. 참고자료 https://js-development.tistory.com/23 https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=204819510 https://create-react-app.dev/docs/advanced-configuration/ ※ 알림 : 이 포스팅은 링크프라이스의 제휴마케팅이 포함된 광고로 일정 커미션을 지급 받을 수 있습니다. 1~2%의 커미션이지만 혹시라도 어느 정도 금액이 모인다면 필요한 곳에 기부할 예정입니다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"React","slug":"React","permalink":"https://xeppetto.github.io/tags/React/"}]},{"title":"[斷想] 문제해결의 기술(The Art of Problem Solving)","slug":"Xeppetto/단상(斷想)/20220806-the-art-of-problem-solving","date":"2022-08-06T11:06:00.000Z","updated":"2022-08-06T11:06:00.000Z","comments":true,"path":"Xeppetto/단상(斷想)/20220806-the-art-of-problem-solving/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20220806-the-art-of-problem-solving/","excerpt":"","text":"아, 정말 오랜만에 글을 쓴다. 2022년 7월, 이직하게 되었다. 이직을 하고나면 항상 업무의 전체 구조를 파악하고 개선점을 판단할 수 있을 때까지 달려나간다. 세상 관심사에 모두 신경 끄고 무조건 앞으로만 달리는 스타일이다 보니 또 열심히 달려오느라 지난 한 달 정도는 세상이 어떻게 돌아가는지도 모르고, 본인의 취미가 뭐였는지도 모르는 시간을 보냈다. 당연히 책도 읽지 못했고, 글도 쓰지 못했다. 어느덧 첫 번째 월급을 받고 나니 이제야 조금 정신이 들어 8월엔 다시 책도 읽고 글도 쓰기 시작해야 겠다 싶다. 어느 회사에 가나 비슷한 양상이 있다. 분명히 누군가도 최선을 다해서 업무한 거 같은데 왜 그런 결정을 한 건지 의사결정 구조를 볼 수 없거나, (해당 업무의 전문가라면 하지 않을 선택들이 있기에) 어디선가의 위력에 의해 의사 결정된 흔적이 보이거나, 본인에게 전문성이 없는 업무 같은데 할 수 있다는 착각에 빠져 안 하느니만 못하게 어질러 놓은 경우들에 대한 결과들이다. 그런 상태를 만든 사람들의 의도나 실력을 의심하거나, 악의적인 평가를 할 필요는 없다. 그들도 그 업무를 진행하던 시점에는 선의를 가지고, 그 상황에 맞게 최선을 다한 것이라 믿기 때문이다. 그러니 비난하거나 원망하는 마음을 가질 이유도 없다. 다만, 필자의 짧은 식견으로 판단하기에 그런 상태가 된 것은 항상 문제 해결 방식에서 뭔가 하나를 빠뜨렸기 때문이라 생각한다. 문제 해결이라는게 다들 스스로 자기만의 스타일대로 방식을 설정하고, 수행하는 분야다보니 어디 좋은 방법론이 있다거나, 무엇이 옳은 지에 대한 고민을 잘 하지 않게 되는거 같다. 필자도 그랬고. 그래서 다들 그냥 자기 스타일대로 문제를 해결하는 게 오히려 현실에서는 문제가 되는 거 같달까. 필자 역시 그렇게 자신만의 스타일을 고수하다가 어느 순간 문제 해결 분야의 경지 대해 고민을 했고, 그 길을 따라 공부하다보니 브레인스토밍 전문가들도 만나고, 나이차이 많이 나는 어르신들도 만나 그들 방식의 문제 해결 방법론들을 배울 수 있었다. 그리고 정리했다. 필자 나름대로 생각하게엔 진리에 가까운 그 무엇인가를 찾았기에. 그러나, 필자는 문제 해결 분야의 전문가가 아니기 때문에 여태까지는 굳이 필자가 정리한 내용을 블로그에 공개하지 않았었는데, 나이 들어감에 대한 긍정적인 소회에서 밝힌 바와 같이 이제 나이 들었음에 대한 생각을 정리하고, 나이들었음을 인정하기로 했으니 굳이 철학을 감추어둘 필요는 없다는 생각이 들었다. 왜냐하면, 이제 남이 뭐라 그래도 여태껏 이렇게 잘 살아왔고, 앞으로도 이렇게 살거란 생각이 들었으니까. 그래서 필자가 오래전에 스스로 정리해뒀던 ‘문제 해결(Problem Solving)’이라는 것에 대해 정리해서 블로그에 이야기해야겠다 싶었다. 사실 이 글의 소제는 몇 년 전에 정리해서 개인 메모에 넣어둔 내용인데 이번 기회에 정리를 좀 해서 공개해야 겠다 싶었다. 누군가 보기에는 필자의 이 포스팅이 충분치 않다고 생각하거나 반론이 있을 수도 있다. 상관 없다. 필자는 스스로 깨달은 바에 대해 정리한 것이니까. 다시 말하지만, 여지껏 이렇게 살아왔고, 아마 앞으로도 이렇게 살것이기 때문에. 누군가에겐 이 글로 도움을 줄 수 있기를 바라며 필자의 정리를 써내려본다. 본격적으로 문제 해결이라는 명제를 논하기 위해 이 포스팅의 제목을 뭐로 할까 5초 정도 고민하다가, 「The art of software testing」을 따라 해 보자~ 싶었다. 그 책에 설명된 핵심들 만큼이나 아주 간략하고 명확하게 문제 해결에 관해 설명할 수 있을 거 같다는 자신감이 있어서다. 그래서 포스팅의 제목은「문제 해결의 기술(The art of problem solving)」로 정했다. 사실, 문제 해결이라는 건 간단하지만 조그만 인식의 전환이 필요하다. 그리고 한번 깨달으면 그 뒤로는 스스로 연습해서 익숙해지는 과정이 좀 필요할 뿐, 한번 몸에 익히면 자전거를 타거나, 수영을 하거나, 섹스를 하는 거처럼 완전히 체화(體化)된다. 긴 시간 동안 사용하지 않는다고 해도 절대 몸에서 기억해낸다. 그러니, 누군가 지금 필자의 포스팅을 읽고 ‘세련된 문제 해결 능력을 갖추고 싶다’라는 생각을 했다면, 본 포스팅을 읽은 후 꼭 본인의 버릇이 되도록 체화하려 노력하는 과정을 거치시기를 권장한다. 한번 체화되면 자연스럽게 그렇게 되기 때문에 편리하고, 마음이 아주 편해진다. 자, 문제 해결이라는 건 단편화시키면 사실 아주 쉽다. 우리는 배고프면 밥을 먹는다. 「배가 고프다」라는 문제를 해결하기 위해서는 「밥을 먹는다」라는 문제 해결 방법을 찾아 그 행위를 수행하면 된다. 근데, 조금만 더 깊이 생각해보면 단순히 그걸로 끝나지 않음을 알 수 있다. 조금만 더 깊이 있게 생각해보자. “밥 먹는다”라는 표현은 단순히 먹는 행위를 말하기보다 정확히는 아래의 흐름을 말한다. 배가 고프다 → 음식 재료 확보를 위해 장을 본다 → 장 본걸로 요리를 한다 → 식사를 한다 → 치운다 이 내용을 프로세스로 단편화 시키면 아래와 같다. 프로세스 행위 문제 인식 ① 배가 고프다. 문제처리를 위한 사전 행위 ② 장을 본다. 해결 준비 ③ 요리를 한다. 문제 해결 ④ 식사를 한다. 후처리 ⑤ 치운다. …………………………………………… 너무 당연한 이야기이지만, 또 너무 당연한 이야기라서 이게 맞는 프로세스인지 의심하는 사람도 있을 거다. 그래, 이해한다. 그래서 이게 맞는 프로세스임을 증명하기 위해 한 번 더 다른 예를 들어보자. 더 이해가 잘되는 예제일 거라 생각한다. 이번엔 대변을 보는 시나리오를 상정해 보자. 프로세스 행위 문제 인식 ① 배가 아프다. 대변이 나올거 같다. 문제처리를 위한 사전 행위 ② 화장실의 위치를 찾는다. 해결 준비 ③ 화장실로 가서 변기가 있는 공간으로 들어간다. 문제 해결 ④ 대변을 배출한다. 후처리 ⑤ 화장실 물을 내리고, 나와서 손을 씻는다. 만약 본인이 이런 상황인데, 대변을 본 후 물을 내리지 않았다고 치자. 대변을 배출한 본인은 속이 시원하니 대변-배출이라는 문제를 해결한 거 같겠지만, 다음 사람은 그 화장실 칸에 들어가서 이렇게 외칠 거다. “어떤 놈이 똥 싸고 물을 안 내렸어!!” 자, 이제 쉽게 이해될거다. 문제를 해결하기 위한 행위의 주체자인 본인은 ‘대변을 배출한다’라는 문제 해결에만 집중했고 해결했으니 문제가 해결됐다고 생각했다. 하지만, 그다음 사람은 그 변기를 이용한 전 사람의 대변을 배변하는 행위에 대해 “물을 내리는 것”까지가 프로세스의 완료라고 인식하는 것이다. 즉, 「문제 해결을 위한 모든 행동은 단순히 문제 해결 단계에 초점을 맞추기보다는 문제 해결을 위한 전체 프로세스 관점에서 행위를 바라보아야 한다」는게 필자가 문제해결과 관련하여 말하고자 하는 바다. 쉽게 말해, 배가 고파 밥을 먹었으면 치우는 거까지가 밥을 먹는 거고, 화장실에서 똥을 쌌으면 물을 내리고 손을 씻어야 해당 행위가 완료된다는 소리다. 같은 맥락으로, 업무를 진행했으면 그 업무를 문서로 정리하는 거까지가 업무의 종료이다. 그냥 이슈를 눈앞에서 처리했다고 끝난 게 아니다. 모든 업무의 끝은 문서화 혹은 기록을 남겨 다른 사람이 이해할 수 있게 해 주는 데서 끝이 난다. 이는, 단순히 보고하기 위한 용도의 문서가 아니라, 해당 업무를 10년 뒤에도 이해할 수 있도록 하는 문서를 의미한다. 업무하다 보면 바빠서 가끔 깜빡 잊고 놓치는 부분이 있을 수도 있다. 그러나, 가끔이 아니면 문제다. 만약 대부분의 업무 기록에서 의사결정 과정을 찾는 게 불가능하거나, 업무가 단일 업무 형식으로 기록되어 있고 전체 스토리를 읽을 수 없는 경우라면 이는 전부 문제 해결 역량 미흡에서 생기는 이슈들이다. 그리고, 진짜 문제는 이런 정보의 미흡함이 쌓여서 그 모호함 자체가 조직의 문화가 되기도 하는 부분이다. 사실…… 이건 프로세스라고 부르기도 뭐한 너무 당연한 내용이다. 근데, 너무 당연하다 보니 일을 잘 처리하려고 노력하는 순간에는 오히려 정상적으로 인지가 되지 않거나, 문제 해결이라는 그 자체에 너무 집중하다 보면 전체 프로세스를 보지 못하는 실수가 발생하곤 한다. 그래서 항상 모든 상황에서 전체 구조를 파악하려 애써야 하는 거다. 그런걸 보고 정황-기반, Context Driven이라 하지 않던가!필자는 정황 기반 학파(Context Driven School)가 말하는 방식을 따른다. 이는 또한 소프트웨어 개발자라면 누구나 흔히 알고 있는 SDLC(Software Development Life-Cycle)와도 일치한다. 프로세스 행위 문제 인식 ① 사용자 혹은 사업에 필요 사항 혹은 이슈가 발생한다. 문제처리를 위한 사전 행위 ② 요구사항을 분석하고, 설계한다. 해결 준비 ③ 요구사항에 기반하여 기획한다. 문제 해결 ④ 구현하고, 테스트한다. 후처리 ⑤ 배포하고, 운영한다. 보시는 바와 같이 이 프로세스는 필자가 창조한 게 아니다. 원래 있던 현상들을 필자가 분석해서 「문제 해결이라는 틀에 맞추어 정리한거 뿐」이다. 원래 세상 모든 일이 이렇게 진행되는 거다. 아니, 되어야만 하는거다. 그냥 전부 다 콩으로 메주 쑤고, 쌀로 밥 짓는 소리다. 아주 쉽고 간단하며, 당연한 소리란 의미다. 자꾸 강조하지만, 뭘 잘하려고 하다 보면 이 당연한 것들을 잊게 된다. 그래서 자꾸만 뭔가 특별한 방법을 찾고 기술을 찾아 적용하려고 하게 되는데, 그럴 필요 없다. 그냥 당연한 일들을 당연하게 생각하고, 당연하게 수행하면 세상 거의 모든 문제는 해결된다. 항상 그렇지만 기본기가 제일 중요하다. 당연한 걸 당연하게 하는 것, 이게 바로 「문제 해결 기술, The art of problem solving」의 핵심이다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"개인 의견","slug":"개인-의견","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%9D%98%EA%B2%AC/"},{"name":"문제 해결","slug":"문제-해결","permalink":"https://xeppetto.github.io/tags/%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/"},{"name":"Problem Solving","slug":"Problem-Solving","permalink":"https://xeppetto.github.io/tags/Problem-Solving/"},{"name":"해결의 행위","slug":"해결의-행위","permalink":"https://xeppetto.github.io/tags/%ED%95%B4%EA%B2%B0%EC%9D%98-%ED%96%89%EC%9C%84/"},{"name":"프로세스의 구조를 파악하기","slug":"프로세스의-구조를-파악하기","permalink":"https://xeppetto.github.io/tags/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0/"}]},{"title":"프로덕트 매니저 역할, 하나의 마침표","slug":"Xeppetto/About-Me-and-My-thought/20220629-my-first-product-manager-role-ended","date":"2022-06-29T09:29:00.000Z","updated":"2022-06-29T09:29:00.000Z","comments":true,"path":"Xeppetto/About-Me-and-My-thought/20220629-my-first-product-manager-role-ended/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20220629-my-first-product-manager-role-ended/","excerpt":"","text":"3년 조금 넘는 기간 동안 해왔던 프로덕트 매니저(Product Manager)로서의 업무를 종료하게 됐다. 인수인계 기간이 끝나가면서 이제 뭔가 좀 정리를 한번 해 볼까 싶어 업무 종료에 대해 글을 끄적여 본다. 이제 마무리다. 생각을 정리하고 기억 저편으로 보낼 것들은 보내고 다음 생각들을 받아들일 공간을 마련해야 한다. 긴 시간 동안 from scratch부터 해 내느라 힘겨웠던, 그리고 또 그래서 즐거웠던 여러 기억들과 버릇들을 정리해야 한다. 막상 끄적이려니 뭐부터 써야 할까 싶네… 가장 최근에 한 일이 뭐였지… 아, 인수인계. 필자는 업무 관련해서 오랜 버릇이 있다. 입사 첫날부터 퇴사할 사람처럼 자료들을 정리한다는 점. 뭐, 특별한 이유가 있어서가 아니다. 그냥 머리가 나빠서 뭘 잘못 외우다 보니 필요할 때 찾기 쉽게 데이터들을 구조화하는 게 버릇이다. 데이터들을 정리해 놓고 잊어버린다. 검색하는 방법만 잘 기억하고 있으려 노력하고 모든 자료를 외우고 있지는 않는다 + 못한다. 그래서, 퇴사가 결정된 순간 그동안 정리한 자료들을 필요 따라 구분하여 맞추어 전달해 주고, 전달 안 해도 되는 것들은 살포시 삭제한다. 지금은 나머지 질문하는 사항들에 대해서만 추가로 답변해주고 있다. 아마 마지막 날 남은 인력들과 감사 인사하고 끝나겠지. 음, 그래. 그랬던 거 같다. 소프트웨어 품질전문가로 살면서, 또 프로젝트 매니저로 업무를 진행하면서 답답했던 것들을 풀어보고 싶었다. 사업의 앞단에서, 그리고 개발 의사결정의 앞단에서 고리가 잘 못 묶이면 뒤에서 잔뜩 꼬여버리는 상황들을 접하고 프로덕트 매니저로 전직해서 그런 소프트웨어 프로젝트에서의 문제점들을 풀어 보고 싶었다. 야심차게 도전했고, 많은 걸 배운 경험이었다. 간단하다. 회사는 영업 이익을 내기 위해 사업을 하고, 사업을 하기 위해 소프트웨어 회사는 소프트웨어를 개발한다. 어느 순간부터인가 소프트웨어 개발 조직은 애자일이나 기타 다른 이슈들로 인해 사업이나 영업 이익에서 거리감이 느껴지는 걸 여러 번 목격했다. 소프트웨어를 개발하기 위해 모인 조직인지, 애자일을 할 목적으로 모여서 소프트웨어를 개발하는 건지 모를 정도의 혼란. 정리되지 않는 요구사항과 너무 잦은 전략 변경은 엔지니어링 조직을 피폐해지게 만들었다. 그래서 그걸 해결하는 자리에서 직접 일해 보고 싶었다. 맡은 제품은 No Code 웹 개발 도구인 Forguncy(포건시)라는 제품이었다. 입사 당시 시점에 이미 해외에서는 런칭한 상태였고, 특히 일본과 중국 매출은 굉장히 높은 제품이었다. 한국 시장에 런칭하려는데 프로덕트 매니저가 필요하다고 연락받아 길고 긴 이야기 끝에 사업에 합류했다. 합류하고 보니 글로벌 회사인데 좀 특이했다. 전체적인 전략의 아웃라인이 없어 각 국가별로 따로 사업을 하고 있었다. 제품 개발팀만 통합되어 있고, 사업은 다 각자도생. 제품과 제품 관련 문서 외 다른 모든 것들은 처음부터 만들어야 하는 상황이었다. 나중에야 알게되었는데, 기독교 회사이고 그래서 회장단이 기독교 재단이라 영업 이익을 크게 높이기 보다는 그냥 전체 볼륨 사이즈(Volumn Size)만 높이면 되는 회사고, 그래서 딱히 자기 나라 외 다른 국가의 사무소를 적극적으로 도울 생각이 없어보였다. 처음부터, 멘땅에 헤딩, 되어 있던 것도 뒤집던 필자였으니… ‘이게 내 팔자인가보다’ 하며 일을 시작했다. 시장을 분석하고, 경쟁 제품을 조사하고 현재 우리의 상황을 점검했다. 로드맵을 수립하고, 시장에 접근할 마케팅 전략을 수립했다. 그리고 그 로드맵과 전략안에서 해야 할 일들과 일정들을 정리했다. 그리고 그 시점에서 첫 번째 벽에 부딪혔다. No Code라는 제품은 기본적으로 프로그래밍을 엄청나게 잘하는 사람들을 위한 제품이 아니다. 프로그래밍 역량이 부족한 사람들도 소프트웨어 제품을 개발할 수 있게 도움을 주려고 등장한 제품이다. 전문 프로그래머는 그냥 프로그래밍을 잘하면 되기 때문에 굳이 이런 제품을 사용하지 않아도 된다. 그렇다는 말은 No Code라는 제품은 전문 프로그래머가 아닌 ‘시티즌 프로그래머(하단 용어 설명)’가 이해할 수 있는 수준으로 제품 진입 장벽과 사용 시 사용-접근성을 낮추어야 한다는 소리인데, 그 의미는 해당 제품의 프로덕트 매니저인 필자에게는 최소 1년 이상의 준비 기간이 필요하다는 예측으로 귀결되었다. 그리고 회사에서는 당연히 1년을 기다려줄 수는 없었고, ‘일단 팔면서 생각해보자’라는 접근을 할 수밖에 없었다. 그래서 고객을 상대하면서 내부의 준비 작업을 함께 해야 하는 상황이었고, 당초 1년 예상했던 준비 기간을 줄일 방법은 로드맵에서 몇 개를 빼고 전략을 수정하거나, 아니면 준비 일정 전체를 늘리는 선택 외에는 없었다. Citizen Programmer(시티즌 프로그래머)란, SaaS(Software as a Service) 시장이 커지면서 등장한 용어이며, 최근에는 No Code, Low Code 제품 시장이 확장되면서 ‘비-전문 프로그래머’를 통칭하는 말로 사용되고 있다. 과거 Martin Folwer가 Lay Programmer라고 지칭했던 사람들의 최신 마케팅 용어로 이해하면 될거 같다. 두 번째 벽. 필자는 과거부터 엔지니어(Engineer)와 개발자(Developer)와 프로그래머(Programmer)의 다름을 잘 구분하는 사람이라 너무 당연하게 No&#x2F;Low Code에서 발생하는 문제점을 받아들였는데, 이를 다른 사람들에게 설득하는건 너무 어려웠다. 일반적 인식에서 개발(Development)과 프로그래밍(Programming)를 구분하는 사람은 많지 않았고, 그러니 필자의 이해는 공감이 안돼는 걸로 보였다. 이는 사업을 함께 진행하는 내부 인원들에게서도 마찬가지였다. 으쌰으쌰 하며 사업을 같이 진행해야 하는 내부 인원들이 이 차이를 인식하지 못하니 내부 인원들 간 마케팅 전략에 대한 이해의 차이가 클 수 밖에 없었고, 마케팅 전략은 계속 삐그덕 거렸다. 이를 설득하는 데 거의 1년이라는 시간이 필요했고, 그동안 프로덕트 매니저 활동 중 외부 시장 확장에 대한 전략 행위들은 굉장히 지지부진 할 수 밖에 없었다. 이는 필자의 프로덕트 매니저 경력 중 가장 큰 실패 경험이다. 다음에 같은 상황이되어도 어떻게 해결할지 아직도 모르겠다. 이런 이해의 부딪힘 뒤 1년 쯤 후에 나타난 어떤 프로젝트 매니저분이 아니었다면 설득 기간이 더 오래 걸렸을 수 있다고 생각하니 지금도 아찔하다. 그 분이 아니셨다면, 어쩌면 제품의 마케팅 전략은 지금도 실패하고 있는 상황일 수 있다. 그 프로젝트 매니저분은 대기업의 SI(Software Integration) 프로젝트를 관리하셨던 PM분이셨다. 프로그래머 출신이지만 PM이 되어 15년 가까운 시간 동안 여러 프로젝트를 관리하셨었고, 그 말은 결과적으로 최신 프로그래밍 언어나 코딩 기법 같은 건 실무에서 사용해 보셨을 리가 없다. 하지만 오랜 기간 프로젝트를 관리하며 본인에게 필요한, 본인이 만들고자 하시는 소프트웨어를 어떻게 개발해야 하는지에 대해서는 누구보다 명확히 이해를 하고 계셨다. 바로 이 지점이 프로그래밍(Programming)과 개발(Development)의 차이였고, 이 PM분은 포건시를 이용해서 「본인 혼자」 약 3주 만에 자재관리 시스템과 재고관리 시스템을 만드셨다. 그분이 그 시스템을 만들고 나서 얻은 깨달음으로 마케팅 전략을 다시 다독이고 추슬러 다시 제자리로 돌려놓을 수 있었다. 필자 생각 : No&#x2F;Low Code는 ‘코딩 안&#x2F;덜 해도 되는’ 제품이지 ‘개발을 몰라도 사용할 수 있는’ 제품이 아니다. 그렇다고 말하는 사람들은 사기꾼이거나, 아니면 정말 매출이 급해서 그렇거나. 자, 여기에서 하나 짚고 넘어가야 할 게 있는데 No&#x2F;Low Code 제품의 문제점 중 가장 큰 하나는 ‘아직 시장이 준비가 안 됐다’라는 점이다. No&#x2F;Low Code 도구는 전문 프로그래머들이 사용하기에는 구현결과상 제약사항들이 있고, 시티즌 프로그래머들이 사용하기에는 소프트웨어 개발에 대해 이해를 잘하지 못하면 사용상 어려움이 있다. 또, 아직까지는 시장 전반적으로 개발과 프로그래밍의 개념적 차이를 구분하지 못하다보니 이를 나누고 설명해야 하는 어려움이 있다. 이를 설명하지 않기 위해서는 막대한 양의 사용자 매뉴얼과 예제 코드, 교육 동영상이 필요하다. 그리고, 어떤 회사가 제품 하나를 위해 그 정도 노력을 기울이고 비용을 사용할 거라면 그냥 프로그래밍을 가르치는 게 빠르다. 이를 해결하기 위해서는 사회 전반적인 소프트웨어 ‘개발’에 대한 이해가 높아져야 한다. 지금은 소프트웨어 ‘사용’에 대한 저변만 넓은 상황. 그리고 바로 이 지점에서 마케팅 전략의 괴리가 발생한다. 전문 프로그래밍이나 전문 코딩은 안해도 되지만, 소프트웨어 개발을 이해해야 잘 사용할 수 있는게 No&#x2F;Low Code 제품이라면, 그냥 소프트웨어 개발을 공부하고 외주 업체를 쓰는게 시장 전반의 생명주기 흐름을 고려했을 때도, 제품&#x2F;서비스의 유지보수에도, 그리고 프로젝트 관리자로서 도덕적으로도 옳은 선택이기 때문이다. 그래서 필자는 프로덕트 매니저로서 No&#x2F;Low Code 제품을 ‘누구나 할 수 있다’에서 ‘누구나 &lt;사업을&gt; 할 수 있다’로 개념을 바꾸었고, 사업을 위해 사용자들이 개발한 애플리케이션을 직접 구축&#x2F;판매 가능하도록 전략을 수정했다. 쉽게 말해, 누군가 책방의 대여 시스템을 ‘본인에게 필요해서’ No&#x2F;Low Code로 개발했다면, 이를 다른 사람들에게 판매할 수 있도록 해 도구의 사용자들이 스스로 도구를 개발하도록 동기부여하려 했다. 그러면 시티즌 프로그래머 중 개발을 이해하는 사람들 위주로 새로운 서비스나 제품을 개발할 수 있고, 또 이를 이용하는 사람들이 생겨날 거라 기대했다. 그런 방식으로 문제점들을 해결하는 마케팅의 전략을 구사했다. 여기까지가 필자의 몫이었다. 남은 건 이제 필자의 몫이 아니다. 시장 상황은 급변하니, 필자 예상과 다르게 시장에서 이런 도구를 받아들일 준비가 빠르게 될 수도 있으니 이제 이후의 일들은 남겨진 분들의 몫이므로 어떻게 전개할 지에 대해서는 지켜보면 된다. 나름 교육을 잘 해주고 나왔는데… 어찌될지는 지켜봐야 한다. 세 번째 벽. 그건 실무였다. 어렵다면 어렵지만 자신 있었던 부분이라 사실 ‘벽’이라고 표현하는 게 맞는지, 아닌지 고민을 좀 했지만, 뭐, 일단 벽이 맞는거 같다. 제품의 현지화(Localization)가 어느 정도 준비되어야 했고, 준비된 상태에서 매출 발생이 가능한 시점을 예측하려 했다. 그래서 버텨야 했다. 사업의 방향성이 예측 불가능한 상태에서 신규 인력을 채용하여 인건비로 너무 많은 지출을 해버리기보다는, 예측 불가능하고 불확실성이 높은 상황에서는 힘들어도 혼자 버티면서 준비하고 사업 방향성을 올바로 잡는 게 더 중요하다고 판단했다. 그래서 준비가 어느 정도 완료되는 시점까지 혼자 실무들을 처리하자고 결정했다. 실무에 대한 자신감은 충분했기에 이 정도 장애물은 쉽게 넘을 수 있다고 생각했지만, 진짜 문제는 실무처리가 아니라 프로덕트 매니저로서 스스로의 열정 관리와 체력 관리였다. 준비가 될 때까지 여러 업무를 병행해야 했다. 프로덕트 매니저, 프로젝트 매니저, 프론트엔드&#x2F;백엔드&#x2F;클라우드 개발자, 배포 개발자, 그래픽 디자이너, 테크니컬 라이터, 번역가, 품질관리자, 테스터, 고객 지원, 고객 교육, 프리-세일즈, 필드-엔지니어링 등 여러 역할을 동시에 수행했다. 너무 정신이 없어서 사업에서 발생하는 수 많은 내부 역할들을 정의하고 정리하면서 하고 있는 업무들을 처리했다. 필자에겐 이런 업무들을 처리하는 게 어렵다기 보다는 위에서 먼저 언급했던 두 가지 벽에 맞닥뜨리며 소모되는 에너지의 크기가 상당했기에 실무와 함께 여러 활동들을 수행하는 게 세 번째 벽으로 느껴졌다. 그런 상황들 속에서 시간이 지나며 크게 배우고 깨달은 바가 있다. 전체 프로덕트 개발(Product development) 진행 중 가장 어려운 건 내부 인원들이 가진 서로 다른 욕구와 여러 이해관계의 조율이라는 점이다. 합류 후 사업 초기 이런 큰 세 가지 벽을 해결하고, 수행하는 데에 정말 너무 많은 양의 에너지를 소모했다. 처음으로 업무하면서 ‘힘들구나’라는 느낌을 강하게 받았던 거 같다. 그래서 의사결정 방식을 변경했다. 변경해야 했다. 선-고민, 후-활동 방식으로. 필자는 2006년쯤부터 애자일 개발 방법론의 철학을 받아들였고, 「빠르고 작은 실패에서 얻어지는 교훈」이 가진 힘을 강력히 신봉하는 사람이다. 그래서 제품의 사업 초기에는 가볍고 빠르게 의사결정하고, 수행하고, 결과를 확인하는 방식으로 업무를 진행했다. 그리고 깨달았다. 그런 방식으로 하면 될거라는 건 완벽한 착각이고, 판단 미스, 실수였다. 그런 상황처럼 빠른 실패를 거듭하며 에너지를 불태우기엔 필자가 보유한 에너지의 량보다 사업 내에서 처리하며 수행해야 하는 활동의 량이 훨씬 컸다. 비교하는게 의미가 없을 만큼 그냥 보였다. 신규 채용을 해서 업무를 떼어낸다고 해서 해결될 문제가 아니었다. 사업 전략들이 두 번째 벽에 의해 타격 받고 있었고, 방향성이 흔들려 모호한 상태였기 때문에 신규 채용에 에너지를 쏟는다면 그 자체로 오히려 독이 될 상황이었다. 고민을 거듭한 끝에 결정했다. 필자가 가진 애자일 철학을 잠시 묻어두기로. 빠르고 작은 실패를 경험하며 점진적으로 발전하는 전략과 완전히 반대로 하기로 했다. 가볍고 빠른 의사결정 대신 어떤 문제에 대해 끊임없이 고민하고, 시뮬레이션하고, 방향과 목표를 수립하여 가능한 실패 없이 한 번에 갈 수 있는 방법들을 찾았다. 몸을 움직여 에너지를 소모하는 양보다는 생각을 움직여 소모하는 에너지가 더 작았기 때문이다. 때론 더 쉽고 달콤한 선택지들이 많았지만, 갔다가 실패하고 되돌아와 다시 다른 길로 가야 한다고 결론 내려지는 선택들은 과감히 포기하고, 버렸으며, 뒤돌아보지 않았다. 아무리 옆에서 더 좋은 방향이 있다고 꼬드겨도 필자 스스로 프로덕트 매니저로서 결론이 나지 않으면 함부로 움직이지 않았다. 정말 몇달 몇년을 ‘고뇌하는 인간’이 되어 살았던 경험이다. 지금 시점에서 돌아보건데 그렇게 변경한 방법론의 전향은 결과적으로 옳았다고 생각한다. 필자가 빠지면서 업무를 다시 한 번 정리해야 하는 남겨진 사람에게는 아주 어려운 도전이 되겠지만. 필자는 앞으로 펼쳐질 필자의 미래 업무 전개를 위해 프로덕트 매니저로서 일하면서 그동안 필자가 느낀 프로덕트 개발에서의 이해관계 관리의 어려움을 정리해보았다. 모든 사람들은 다들 각자의 관점에서 사업을 해석한다. 프로덕트 매니저는 그 관점을 모두 받아 줄 수도 없고, 모두 무시할 수도 없다. 모든 참여 인원들은 각자의 경험을 가지고 있고, 그들이 가진 과거의 경험들은 조직이 가야하는 방향의 전략 수립 시 발목을 여러 번 잡는다. 사업의 의사결정은 옳은 방향으로 하면 된다. 어떤 사람의 옳고 그름은 의사결정에서 일단 열외시켜야 한다. 단지 나이가 많다고 좋은 경험을 가지지는 않았을 뿐더러, 나이가 어리다고 새로운 시각을 가지지도 못했더라. 내부 인원들이 가진 서로의 이해관계가 전혀 예상하지 못한 의외의 사소한 부분에서 충돌하고, 때론 폭발한다. 가볍고 빠른 의사결정과 빠르고 작은 실패는 분명히 도움이 된다. 그리고 최대한의 고민과 최소한의 실패도 도움이 된다. 상황에 따라 다르게 방법론적 접근 전략을 선택하여 다르게 구사해야 한다. 10년쯤 전에 프로젝트 매니저분께 PM을 하려면 뭐가 가장 중요하냐고 질문을 했었는데 그 분에게서 “이해관계자 관리…”라는 짧은 답이 돌아왔을 때는 솔직히 머리로는 이해해도 가슴으로 이해할 수 없었다. 이제 그 분의 말씀을 완전히 이해하고 있고, 또 동감한다. 그리고, 필자가 엔지니어로 업무를 할 때 도저히 이해할 수 없던 사업 앞단의 잦은 변화, 영원히 정해지지 않을 것 같은 요구사항의 이유를 이해할 수 있었다. 물론 필자는 그렇게 두지 않았다. 필자는 합류하자마자 빠르게 업무 파악 후 약 1년의 준비 기간의 필요함을 어필하고 전략과 일정을 수립했다. 그리고, 인력 충원을 늦출 것을 주장했다. 그런 것들이 회사에서 받아들여졌기 때문에 필자의 프로덕트 개발은 올바른 방향으로 가능했다고 생각한다. 다른 회사들처럼 일단 밀어붙저눈 방식으로 진행되었다면 아마 다른 프로젝트들처럼 해결 불가능한 상태로 어질러졌을 거라 생각한다. 이런저런 어려움들이 있었지만, 결과론적 관점에서 보면 재밌는 경험이었다. 정말 여러가지 업무를 맥가이버 칼이라도 된양 처리했었다. 소스 코드를 들여다보며 제품을 한글화하고, 한국 시장에 맞게 수정하고, 한국 시장을 위한 로고 그래픽을 직접 제작하고, 예제를 볼 수 있는 웹사이트를 기획&#x2F;개발하고, 제품을 시장에 내놓아 고객의 의견을 듣고, 고객들의 어려움을 지원하며, 고객들을 교육하는 그 모든 과정들은 신나고 재미있는 경험이었다. 바쁠 때는 두 달 정도 잠자는 시간 빼고는 일만 했는데, 그 두 달쯤 뒤에 몸이 아픈 걸 깨달은 뒤에야 바쁘다는 걸 깨달았을 정도니까. 나름대로 꽤 업무를 즐겼던 듯하다. 그렇게 하나하나 만들어가는 즐거움 뒤에 당연히 존재했던 어려움도 많았고, 그 한계점을 뛰어넘을 방법들을 정말 정말 많이 고민했다. 많이 고민하고, 또 고민하고, 문제를 해결하기 위해 수많은 다양한 전략들을 사용했다. 최소한의 시도를 원했지만, 그럼에도 잦은 실패는 있었다. 그래도 사업이 크게 흔들리지 않을 수 있었던 건 한국 사업의 초반에는 전략의 수립자도, 수행자도 필자 혼자였기 때문이었다. 그냥 혼자 고생하면 됐다. 사실 도구의 컨셉 자체에 문제점이 있었다. 위에서도 언급했지만, No&#x2F;Low Code라는 도구의 컨셉 자체가 ‘현재 인류가 가진 소프트웨어에 대한 이해 수준’과 맞지 않는 한계점이 존재하기 때문에 이를 해결하기 위한 여러 가지 접근 방법을 활용해야 했다. 고객들을 교육하는 과정에서 얻은 결론도 꽤 오랜 기간 동안 고민하고 해결점을 찾으려 노력했던 내용 중 하나다. No&#x2F;Low Code의 근본적 문제점 중 하나는 (위에서도 언급했지만 좀 더 자세히 설명하자면) 좋게 말하면 유저층이 너무 넓다는 점이고, 나쁘게 말하면 기술의 컨셉은 훌륭하나 사용자 층이 정해지지 않았다는 점이다. 그 도구를 사용하는 ‘누군가’가 특정되지 않았다. 어떤 이는 소프트웨어를 어느 정도 개발해봤고, 어떤 이는 소프트웨어를 사용만 해 봤고, 어떤 이는 소프트웨어 개발에 대해 아는 척 좀 해 봤으며, 또 어떤 이는 소프트웨어를 만들고자 하는 열정만 한 가득하지만 경험은 없고, 다른 이는 경험도 열정도 없지만 회사에서 시켜서 들여다보는 등 No&#x2F;Low Code 도구는 타겟(target) 사용자 층이 제대로 정의되지 않았고, ‘그냥 다수, 누구나’라고 범용으로 정의했기 때문에 이 부분은 프로덕트 개발 관점에서 여러 문제를 발생시킨다. 간단하다. 간단하게 생각하면 간단하다는 소리다. 자, 도구&#x2F;서비스라는 건 다수의 무작위 사용자가 사용하도록 하려면 단순하고 쉬워야 한다. 그렇다는 말은 기능의 결과도 단순 명료해야 한다는 소리다. 반대로 결과의 전문성을 확보하려면 당연히 기능도 복잡하고 어려워진다. 이렇게 각자 두 방향으로 뛰어가는 토끼를 모두 모두 잡는 방법 같은 건 존재할 수 없다. 자, 그럼 우리 모두 인터넷 검색창으로 가서 No&#x2F;Low Code를 검색해 보자. 다들 한결같다. “누구나, 코드를 몰라도, 쉽게, 전문가 수준으로 개발할 수 있다.”라는 무리수를 둔 문구들이 가득하다. 이런 종류의 도구들은 사용처를 특정하고, 사용층을 특정해야 한다. 범용으로 사용하면 개발사에서 해야할 일들이 너무 많다. 영원히 일해야 할 수도 있다. 필자는 프로덕트 매니저로서 도구가 가져야 하는 성격을 먼저 확실히 규정해야 한다고 생각했고, No&#x2F;Low Code 도구의 성격상 ‘범용 도구’로 시장에 진입하는 건 불가능하다는 결론을 내렸다. 시장에 안정적으로 진입한 후에는 범용으로 확장할 수 있을지 모르겠으나, 진입을 그렇게 할 수는 없다고 판단했다. 필자는 프로덕트 매니저로서 담당한 제품을 ‘개발을 할 줄 아는 사람들을 위한 도구’로 진입 후 점진적으로 사용자층을 늘려야지, 처음부터 범용으로 시장에 진입하는 건 불가능하다고 주장했다. 그리고 이에 대해 내부의 사업 관련 인력들과 괴로울 정도로 길게 토론하고, 싸우기도 하고, 설득하고, 보여주려 노력했다. 그 지리할 정도로 길었던 토론은 두 가지 현상이 ‘누구나 관측할 수 있는 수준’으로 나타났을 때 종결됐다. 첫 번째는 위에서 언급한 PM분이 나타나고 나서다. PM분이 혼자서 꽤 큰 규모의 프로젝트를 아주 쉽게 만들고 나서 “원래 개발자 n명이 해야 할 일인데 혼자 했다. 이 도구 아주 훌륭하다.”라고 했을 때, 이 도구는 범용 도구가 아니라 소프트웨어를 개발할 줄 아는 사람이 코딩을 적게 하고 쓰는 도구라는 점을 다시 어필할 수 있었다. 그리고 두 번째 현상은 고객에게 유료 교육을 진행한 후 발생하는 피드백의 트렌드를 누구나 명확히 이해할 수 있을 정도가 되었을 때다. 고객의 피드백은 어느 회사든 굉장히 비슷한 양상을 보였다. 처음에는 아주 간단히 도구 기능에 대한 질문들로 시작되지만, 그들 스스로 애플리케이션을 개발하면서 점점 소프트웨어 개발의 원론적인 영역까지 질문이 확장된다. 그 중 서버 설정, 데이터베이스, 웹에 대한 이해, 데이터 구조, 소프트웨어 요구공학과 유지보수 경험의 부재로 인한 프로젝트의 불확실성 증가, 유지보수 시점이 되어서야 보이는 기술부채의 문제 등까지 질문이 연속적으로 계속 확장되었다. 그들의 모든 궁금증을 해결하려면, 책을 몇 권 써야 하는 수준이기 때문에 기술지원에 한계가 있음을 모두 이해하게 되었다. 이는 결과적으로 No&#x2F;Low Code 도구는 범용 도구일 수 없다고 귀결된다. 애초에 필자는 지금도 본 포스팅 전체에 걸쳐 「No&#x2F;Low Code 도구」라고 표현하고 있다. 왜 그러냐면 이 세상 어떤 No Code 도구도 정말로 No Code일 수가 없어서 그렇다. 사용하다보면 사용자의 특정 요구사항이 발생하고, 이를 해결하기 위해서는 반드시 Coding이 필수적으로 필요하게 된다. 긍정적으로 봐줘서 Low 정도로 표현할 수 있겠다. (실제로 해보면 Low가 아니다.) 그리고, 바로 이 지점이 현재 No&#x2F;Low Code 도구가 시장에서 자리잡기 어려운 이유이다. 위에서 필자는 “단순함과 전문성을 모두 확보하는 건 존재할 수 없다”라고 언급했는데, 이는 현재 시점에서 하는 이야기다. 이제 대한민국은 중학교 때부터 소프트웨어 개발을 수업 중에 배우고 있다. 그리고 그 학생들이 사회에 진입하는 10년, 15년 쯤 후에는 No&#x2F;Low Code 도구의 컨셉이 ‘범용’이 될 수 있을거다. 소프트웨어 개발에 필요한 복잡한 기능과 전문적 결과를 단순하게 이해할 수 있는 세대가 사회의 주요 구성원이 될 거라고 보기 때문이다. 마치 현재 대부분의 회사원들이 Microsoft Excel이나 Word를 사용할 수 있는거처럼, 그 미래에는 대부분의 회사원들이 소프트웨어 개발에 대해 이해하고 있을테니까. 그 때가 되면 전문성의 수준이 상향-보편화되고, 소프트웨어 개발을 단편화시켜 이해할 수 있는 세대가 사회의 주역이 될테니, 그때쯤엔 No&#x2F;Low Code는 범용이 될 수 있을거다. 하지만 단언컨데 현재는 그렇지 않다. 현재 No&#x2F;Low Code를 실제로 사용하는 유저 리서치를 하면 대략 필자가 분석한 바에서 크게 달라지지 않을 거다. 그리고 이는 결국 No&#x2F;Low Code 도구의 근본적 문제점이기도 하다. No&#x2F;Low Code의 문제점은… 그 도구를 만든 이들의 기대와 다르게 누구나 사용할 수 있는 범용 도구가 아니라는 점이다. No&#x2F;Low Code 도구는 사용자의 필요에 따라 기능들을 (위한 꽤 긴 코드를 작성하지 않아도) UI 단에서 처리할 수 있도록 미리 제작된 컴포넌트(Component)를 제공하는 형태거나, 사용자의 특정 입력을 받아 코드를 자동 생성해 주는 코드 생성기(Code Generator)로서의 역할을 한다. 그래서 이를 「고급 수준으로 잘 다루려면」 → 「소프트웨어 컴포넌트에 대한 이해와 생성된 코드에 대한 이해가 필수적으로 필요」하다. 그리고 이는 이런 종류의 도구들이 절대 ‘범용’일 수 없는 근본적 이유가 된다. No Code라고 하지만 세부적인 요구사항들을 다루려면 코딩이 필수로 개입된다. 그래서 Low라고 좋게 봐줘도, 실제로는 Low도 아니다. 대부분의 No Code 도구들은 그 자체로 동작하지 않고, 그렇게 자동화된 기능들을 해석하는 API를 실행하는 서버를 따로 구축해야 한다. 서버 구축은 비-소프트웨어 인력들에게 절대 쉬운 일이 아니다. 대부분의 회사원들은 Excel을 기반으로 업무 데이터를 정리하는데, 이 Excel이라는 도구는 그 자체로 GUI를 제공하는 데이터베이스이다 보니, 사용자로 하여금 본인들이 데이터베이스를 이해하고 있다는 착각을 심어준다. 그래서 실제 데이터베이스를 구축하여 연결하고, 사용하는 걸 Excel처럼 하고 싶어 하게 만든다. 즉, 쉽게 말해 No&#x2F;Low Code 도구들의 경쟁상대는 30년된 Excel이다. 그리고, 그래서 Excel 사용자들에게는 소프트웨어 개발에서 애플리케이션과 함께 작동하는 데이터베이스에 대한 이해를 갖추기가 쉽지 않다. 데이터베이스라는 높은 고지를 힘겹게 넘고 나면 그다음은 데이터 구조에 대한 이해가 쉽지 않다는 부분이 문제가 된다. 데이터 구조는 책 한 권, 대학교 한 학기 주제로 다룰 만큼 기초적인 공학적 이해를 수반해야 하는 소프트웨어 전문 분야이다. 이를 모르고 애플리케이션을 개발한다면 간단한 기능을 가진 애플리케이션 정도는 만들 수 있겠으나 복잡한 형태로는 만들기 어렵다. 그리고 기술부채로 결과가 돌아오게 될 것이다. 소프트웨어 요구사항이라는 건 개발을 하다 보면 점점 복잡해지고 덩치가 커지기 때문에 어느 순간이 되면 유지보수가 어려운 수준까지 복잡해진다. 유지보수 가능한 수준으로 애플리케이션의 형태, 수준을 유지하는 게 사실 정말 어려운 거라서 어느 순간 유지보수 불가능한 문제에 대해 사용자들은 No&#x2F;Low Code 도구의 문제점으로 인식하게 된다. 소프트웨어 개발은 어쨌든 어렵다. 그 어려움을 도구로 해결할 수 있을 거라 생각해서 시작해도, 결국은 어렵다. 결과적으로 위 1번부터 7번은 종래에 8번으로 귀결된다. 이 문제점들은 필자에게도 마찬가지 어려움이었다. 사용자들이 도구를 쉽게 접하게 하기 위해 제품의 소스코드를 들여다보며 구석구석 번역하고 현지화했고, 웹 표준에서 지원하지 않는 기능들을 제공하려 플러그인들을 번역하거나 제작했고, 개발 도구이다보니 결국은 예제가 필요해서 예제를 개발했고, 고객들처럼 커지는 요구사항을 모두 다루어 구현할 수 있음을 보여주기 위해 포탈 사이트를 개발했고, 고객의 질문들에 대응하고, 매뉴얼을 쓰고, 내부 인원들을 위한 기술 매뉴얼, 교육 자료 작성하교 교육 실행하고… 이 모든 활동들은 전부 현재 상황에서 현재 시장이 No&#x2F;Low Code 도구를 받아들일 준비가 되지 않았다고 판단했었기 때문에 필자가 담당했던 제품의 특성으로 이 문제점을 뚫어 해결해 보려 했던 노력들이었다. 결과는 절반의 성공. 안정적 성공이라는 기준까지 마무리 짓지 못한게 아쉽지만… (이유 생략) 이렇게 여러 문제점들이 서로 영향을 주며 꼬여 있는 상태를 해결해 보려고 했던 수 많은 도전들을 이제 뒤로 해야한다. 돌아보면 프로덕트 매니저로 활동하면서… 시련도 많았고, 도전도 많았지만, 재미있었고, 협조도 많이 받았다. 특히 글로벌 회사다보니 전 지구상에 퍼져 있는 여러 엔지니어들과의 협업은 즐거웠다. 또, 어쩌면 힘들었지만 일을 즐길 수 있었던 이유는 사업 부서의 인원들과 합이 잘 맞아서가 중요한 이유가 아닐까 싶다. 제품의 상황이 나아진 뒤에는 원래 계획했던 바 대로 신규 채용을 해서 팀원을 교육시키고, 함께 발전하면서 협업한다는 느낌까지 얻을 수 있는 소중한 기회였다. 힘들었지만 보람찼고, 엔지니어로서 경험해보고 얻어야 하는 거의 모든 부분을 건진 소중한 시간으로 기억할 듯하다. 길다면 길고, 짧다면 짧은 시간이었지만… 다음 여정으로 간다. 또 다시 다음 챕터를 써내려 가야 한다. 출발하기 전에 이 여정의 끝에서 처음을 되돌아보며… 그림들 가져온 곳들, Images from… https://medium.com/@joshua_pielago/how-to-be-a-product-manager-2019-9c8b558ffb37 https://www.microsoft.com/ko-kr/microsoft-365/previous-versions/microsoft-excel-2013 https://quixy.com/blog/citizen-developer-vs-professional-developer/ https://youtu.be/O6hbCZhIY3w https://os-system.com/blog/what-is-no-code-development/ 참고자료 중 저작권 이슈가 있다면 알려주세요. 조치하겠습니다.If there is any material in the references violating copyright, please let me know. I will check and try changing the material.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"Product Manager","slug":"Product-Manager","permalink":"https://xeppetto.github.io/tags/Product-Manager/"},{"name":"제품 관리자","slug":"제품-관리자","permalink":"https://xeppetto.github.io/tags/%EC%A0%9C%ED%92%88-%EA%B4%80%EB%A6%AC%EC%9E%90/"},{"name":"개발자","slug":"개발자","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"QA","slug":"QA","permalink":"https://xeppetto.github.io/tags/QA/"},{"name":"Tester","slug":"Tester","permalink":"https://xeppetto.github.io/tags/Tester/"},{"name":"내 경험","slug":"내-경험","permalink":"https://xeppetto.github.io/tags/%EB%82%B4-%EA%B2%BD%ED%97%98/"},{"name":"경력","slug":"경력","permalink":"https://xeppetto.github.io/tags/%EA%B2%BD%EB%A0%A5/"},{"name":"No Code","slug":"No-Code","permalink":"https://xeppetto.github.io/tags/No-Code/"},{"name":"어려움","slug":"어려움","permalink":"https://xeppetto.github.io/tags/%EC%96%B4%EB%A0%A4%EC%9B%80/"},{"name":"극복","slug":"극복","permalink":"https://xeppetto.github.io/tags/%EA%B7%B9%EB%B3%B5/"}]},{"title":"[책과 생각] 무엇이 옳은가","slug":"배움/독서/무엇이-옳은가","date":"2022-06-26T21:27:00.000Z","updated":"2022-06-26T21:27:00.000Z","comments":true,"path":"배움/독서/무엇이-옳은가/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%98%B3%EC%9D%80%EA%B0%80/","excerpt":"","text":"아무런 정보 없이 ‘무엇이 옳은가’라는 책 제목에 끌려 책을 주문하고 읽기 시작했다. 무척 재밋게 읽었다. 이 책은 총 여덟 가지의 장으로 구성되어 있다. 목차는 아래와 같다. 근데 사실 목차보다 내용이 훨씬 재밋다. 1장. 인간을 다시 설계하는 것은 옳은가2장. 기술이 윤리를 바꾸는 것은 옳은가3장. 어제의 세계는 지금 옳은가4장. SNS 속 무제한 자유는 옳은가5장. 지금의 사회구조 시스템은 옳은가6장. 당신의 ‘옳음’은 모두 틀렸다7장. 그래서… 결론은?남은 이야기. 이제 ‘누가’ 판도를 바꿀 것인가 이 책을 읽다가 필자가 자주 하는 말이 생각났다. 필자는 가끔 이런 말을 주변 사람들에게 한다. 나이들어 꼰대가 되는게 아니라, 꼰대가 나이들면 티가 나는 것이다. 나이 들면 싫은 것들이 어릴 때보다는 훨씬 명확해진다. 그래서 그런 모습들 때문에 나이 들면 꼰대가 되는 거처럼 보일 수는 있다. 근데 필자 기준은 좀 다르다. 필자 기준에서의 꼰대는 남의 말을 들을 생각 없이 자신의 기준을 먼저 내세우며 타인을 재단해대는 사람들이라 생각한다. 만나보지도 않은 사람에 대해 ‘그렇다더라’라는 정보로 재단해대는 경우가 대표적이다. 그러니 젊은 꼰대라는 건 필자의 세계관에선 존재할 수 있다. 젊을 때는 남의 눈치도 봐야 하고, 자기 주장도 좀 덜하니, 티가 덜 나다가… 나이가 들어서 힘과 권력도 좀 생기고, 남은 아랑곳 없이 자기 주장을 펼치기 시작하면 (어릴 때 꼰대였던 사람이) 나이들어 티가 나는 거라고 생각한다. 필자 주위에는 나이를 많이 드시고도 꼰대처럼 안 보이는 사람들이 많고, 또 아직 30대인 사람인데도 너무 꼰대스러워서 말 섞기 싫은 사람도 있다. 이 책을 읽으면서 그런 생각을 했다. ‘과연 나 스스로는 나를 바라볼 때 어떤 사람일까? 꼰대인가? 아닌가?’ 필자는 이 책을 읽으면서 과연 스스로 옳다고 생각하고 있는 기준은 어디에서 시작된 믿음인가에 대해 고민했다. 2022년, 21세기 초반을 살아가면서 21세기 초반은 정말 수 많은 기술들이 복합적으로, 그리고 엄청나게 빠른 속도로 발전하고 있는 시대로 느껴진다. 과거의 도덕들은 기술에 의해 깨어지기도 하고, 또 옳음의 개념이 변경될 수 있는 시대에 살고 있는 거다. 일회용 플라스틱의 사용처럼 20세기에 편리함이라고 생각했던 일상은 21세기에는 부도덕함이 될 수도 있고, 당연하다고 생각했던 일들이 더 이상 당연하지 않은 미래가 될 수도 있다는 점이 평소 생각지도 않던 부분의 가치관을 흔들었다. 이 책에 기재된 예를 들면, 현재는 고기를 먹으려면 당연히 도축해야 하지만 미래에는 세포에서부터 직접 기른 고기를 먹을 수도 있기 때문이다. 책의 내용은 필자에겐 너무 흥미진진하고, 이 책을 읽은 사람과 술 한잔 기울이며 날 새도록 인터넷에 자료를 검색해가며 떠들고 싶은 내용의 그런 책이었다. 책의 각 챕터가 너무 재밌어서 할 일을 미뤄두고 하나의 챕터를 다 읽고 나서야 다른 일을 하곤 했을 정도였다. 자신은 꼰대가 되지 않아야겠다고 경계심을 갖고, 노력하는 사람에게 추천하고 싶은 책이다. ※ 알림 : 이 포스팅은 링크프라이스의 제휴마케팅이 포함된 광고로 일정 커미션을 지급 받을 수 있습니다. 1~2%의 커미션이지만 혹시라도 어느 정도 금액이 모인다면 필요한 곳에 기부할 예정입니다.","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"배움/독서","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/"}],"tags":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"독서","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%EC%84%9C/"},{"name":"독후감","slug":"독후감","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"},{"name":"책과 내 생각","slug":"책과-내-생각","permalink":"https://xeppetto.github.io/tags/%EC%B1%85%EA%B3%BC-%EB%82%B4-%EC%83%9D%EA%B0%81/"},{"name":"국내도서","slug":"국내도서","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EB%82%B4%EB%8F%84%EC%84%9C/"},{"name":"무엇이 옳은가","slug":"무엇이-옳은가","permalink":"https://xeppetto.github.io/tags/%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%98%B3%EC%9D%80%EA%B0%80/"}]},{"title":"[책과 생각] 만들면서 배우는 워드프레스","slug":"배움/독서/만들면서-배우는-워드프레스","date":"2022-06-16T21:17:00.000Z","updated":"2022-06-16T21:17:00.000Z","comments":true,"path":"배움/독서/만들면서-배우는-워드프레스/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9B%8C%EB%93%9C%ED%94%84%EB%A0%88%EC%8A%A4/","excerpt":"","text":"어느날 페북의 친구 분 중 한 분이 이 책을 소개하셨다. 본인의 지인이 쓴 책이라며. 워드프레스는 사용하고 있었지만, 인터넷 검색으로 조각난 정보들을 학습하고 있었기에 언젠가 한 번 체계적으로 공부해 보리라 마음 먹고 있던차라 책을 구입했다. 그리고, 2022년 6월 잠시 시간이 남는 틈을 타 책을 완독했다. 이 책은 총 4개의 파트로 이루어져있다. Part1. 최강의 오픈소스 콘텐츠 관리 시스템, 워드 프레스Part2. 워드프레스 기본기 다지기Part3. 워드프레스에 날개를 달아주는 기술Part4. 본격 리얼 웹사이트 제작 프로젝트 책은 워드프레스를 소개하고, 장단점을 나열하는 것에서부터 시작한다. 워드프레스를 처음 접하는 사람들을 위한 안내인듯하다. 이후 워드프레스의 기본 기능들을 차근차근 소개하고, 워드프레스의 핵심인 테마와 플러그인을 사용하는 방법, 그리고 마지막에는 좋은 웹사이트를 만드는 기술에 대해 소개한다. 필자도 프로덕트 매니저로 일하며 동시에 테크니컬 라이터로 업무를 수행했었기에 제품에 대한 사용자 친화적인 설명서를 쓴다는 게 얼마나 어려운 일인지 잘 이해하고 있다. 이 책은 워드프레스를 잘 모르는 사람도 ‘한번 공부해 볼까?’ 하는 마음을 먹었다면 쉽게 도구에 접근하여 사용할 수 있도록 참 좋은 구조로 잘 쓰여 있어 이 책 한 권으로도 워드프레스를 잘 이해할 수 있을 듯하다. (물론… 서버 설정은 안 해본 사람에게는 몹시 어려울 거다.) 필자도 아는 기능들은 알고 있었지만, 이 책에 소개된 내용 중에 “와~ 이런게 있었어?”라 감탄하며 새로 알게된 내용들이 꽤 많았고, 이 책 덕분에 워드프레스와 더 많이 친해져서 이제 누구에게 간단한 웹사이트 개발하는 정도의 설명은 해 줄 수 있을 듯한 자신감이 생겼다. 워드프레스를 공부해보고 싶다면 추천해 볼만한 책. 그냥… “나 이거 읽었었다”고 미래의 나에게 고하고자 함. ※ 알림 : 이 포스팅은 링크프라이스의 제휴마케팅이 포함된 광고로 일정 커미션을 지급 받을 수 있습니다. 1~2%의 커미션이지만 혹시라도 어느 정도 금액이 모인다면 필요한 곳에 기부할 예정입니다.","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"배움/독서","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/"}],"tags":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"독서","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%EC%84%9C/"},{"name":"독후감","slug":"독후감","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"},{"name":"책과 내 생각","slug":"책과-내-생각","permalink":"https://xeppetto.github.io/tags/%EC%B1%85%EA%B3%BC-%EB%82%B4-%EC%83%9D%EA%B0%81/"},{"name":"국내도서","slug":"국내도서","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EB%82%B4%EB%8F%84%EC%84%9C/"},{"name":"워드프레스","slug":"워드프레스","permalink":"https://xeppetto.github.io/tags/%EC%9B%8C%EB%93%9C%ED%94%84%EB%A0%88%EC%8A%A4/"}]},{"title":"[책과 생각] 유저 리서치","slug":"배움/독서/유저-리서치","date":"2022-06-06T21:07:00.000Z","updated":"2022-06-06T21:07:00.000Z","comments":true,"path":"배움/독서/유저-리서치/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/%EC%9C%A0%EC%A0%80-%EB%A6%AC%EC%84%9C%EC%B9%98/","excerpt":"","text":"다변화하는 시장을 조사하는 방법에 대한 안내서‘유저 리서치’는 사용자 조사를 해야 하는 직군에 잇는 사람들에게는 한 번 쯤 일독을 권하고 싶은 책이다. 완전히 전문성을 가지고 유저 리서치를 진행하지 않더라도, 유저 리서치가 어떤 식으로 진행되어야 하고, 어떤 준비를 해야 하는 지에 대해 친절하게 잘 설명되어 있다. 이 책은 3가지 범위로 구성되어 있다. 1부 기본 원칙: 좋은 리서치란 무엇인가 2부 유저 리서치 방법론의 선택과 사용 3부 데이터 분석 및 발표 책의 내용 중 필자가 기억해 두어야겠다 싶은 부분의 일부를 발췌해보았다. 1부 요약 리서치 주제를 명확히 한다. 적확한 참가자를 선정한다. 윤리적 이슈에 주의한다. 여러분과 참가자 모두를 만족시킬 수 있는 방법으로 리서치를 정리하고 계획한다. 관찰의 중요성을 잊어서는 안 된다. 사람들이 말하고 행동하는 것은 별개의 문제다. 적절한 질문을 해야 한다. 접근성과 포용성을 고려해야 한다. 순조로운 리서치를 위해서는 안전은 필수다. 예산은 현명하게 사용하고 좋은 계약을 맺는다. 2부 방법론 요약 사용성 테스트 콘텐츠 테스트 카드 소팅 설문 조사 인터뷰 다이어리 스터디 인포메이션 아키텍쳐 검증 에스노그라피 및 모바일 에스토그라피 맥락적 조서 A&#x2F;B 테스트 이해관계자 워크숍 게릴라 리서치 3부는 방법론을 어떻게 조합하고, 어떻게 결과를 보고 할 것인가 등 방식에 대한 이야기. (필자에게는 중요치 않았음.) 필자는 Product Manager로 근무하면서 사용자 조사를 해야 할 상황들이 꽤 많았다. 나름대로 사용자 조사에 대한 기반 지식을 가지고 있다고 생각하여 진행하곤 했지만, 이 책을 읽은 후 사용자 조사를 해야 하는 경우 목표, 목적, 주제 선정, 참가자 선정 등 계획 단계에 고려해야 할 것이 많음을 상기할 수 있었다. 특히, 사용자 조사 시 주의해야 할 점들을 알려주는 점도 도움이 많이 되었다. ‘사용자를 도와주려고 들면 오히려 편향성이 개입된다’라거나, ‘장소&#x2F;환경에 따라 답변자의 답변은 달라질 수 있다’라는 지점은 쉽게 생각해 보지 못했던 부분이다. 이 책에서 얻은 지식들을 잘 갈무리해 두었다가 앞으로 업무 진행 시에 적용해 봐야겠다. 아래는 책에 소개된 「카드 소팅」 관련 웹사이트들이다. 책에는 글자로 적혀 있어 한 번 링크를 찍어보았다. https://www.optimalworkshop.com/questions/ https://www.surveymonkey.co.uk/ https://www.alchemer.com/ https://www.checkbox.com/ https://www.keysurvey.com/ 다음은 「A&#x2F;B 테스트」 관련하여 소개된 웹사이트들이다. 공부할게 참 많아졌다. https://www.google.com/analytics/ https://vwo.com/ https://unbounce.com/ https://www.webtrends.com/ https://fivesecondtest.com/ https://www.convert.com/ https://www.oracle.com/cx/marketing/ https://www.kissmetrics.io/ https://business.adobe.com/kr/products/target/adobe-target.html ※ 알림 : 이 포스팅은 링크프라이스의 제휴마케팅이 포함된 광고로 일정 커미션을 지급 받을 수 있습니다. 1~2%의 커미션이지만 혹시라도 어느 정도 금액이 모인다면 필요한 곳에 기부할 예정입니다.","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"배움/독서","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/"}],"tags":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"독서","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%EC%84%9C/"},{"name":"독후감","slug":"독후감","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"},{"name":"책과 내 생각","slug":"책과-내-생각","permalink":"https://xeppetto.github.io/tags/%EC%B1%85%EA%B3%BC-%EB%82%B4-%EC%83%9D%EA%B0%81/"},{"name":"국내도서","slug":"국내도서","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EB%82%B4%EB%8F%84%EC%84%9C/"},{"name":"국어를 즐겁게","slug":"국어를-즐겁게","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EC%96%B4%EB%A5%BC-%EC%A6%90%EA%B2%81%EA%B2%8C/"}]},{"title":"[斷想] 좋은 회사에 지원하기보다, 좋은 회사를 만드는 취향","slug":"Xeppetto/단상(斷想)/20220526-work-for-good-company-vs-make-a-good-company","date":"2022-05-26T08:26:00.000Z","updated":"2022-05-26T08:26:00.000Z","comments":true,"path":"Xeppetto/단상(斷想)/20220526-work-for-good-company-vs-make-a-good-company/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20220526-work-for-good-company-vs-make-a-good-company/","excerpt":"","text":"“난 OO 회사 출신이야”라는 말. 예전부터 그랬다. 그 소리가 왜 그렇게 듣기 싫은지 모르겠다. 그냥 평이하게 ‘저 사람은 저 회사 다녔었구나…’ 생각해 버리면 되는데 그게 참 그렇게 듣기 싫었다. 오늘 문득 그런 소리가 왜 듣기 싫은지에 대해 점심 식사 후 커피 한 잔의 향에 취해 생각하기 시작했다. 조용히, 곰곰이 나의 감정을 되돌아보니… 난 회사의 브랜드 가치가 높은 어떤 곳에 지원하기보다, 내가 간 회사가 일하기 좋아지고, 사업하기 좋아지고, 행복하게 일할 수 있기를 바라는 마음이 항상 더 큰 거 같다. 항상 그렇게 해 왔고, 아마 앞으로도 그렇게 할 거다. 점심시간부터 시작된 생각은 업무 종료 후 걷기 시작한 산에서 마무리되었다. 현재의 자신이 어떻다고 이야기하기보다 굳이 자신의 찬란했던 과거를 들먹이는 사람을 보면 ‘현재 나와 일하는 그의 행복감이 낮다는 건가?’라는 의구심이 들기 때문에 그게 내 마음을 불편하게 한다는 걸 깨달았다. 그런 소리 하는 사람들이 더 행복하게 일할 후 있게 배려하고 노력해봐야지 싶다. 누군가가 나에게 했던 평가가 맞는 거 같다. 난 어떤 무리 안에서 Leader로서 존재해야 하는 사람이지만, King으로서 존재하기보다 King Maker의 자리에서 더 빛이 나는 사람이라고. 아마 상황을, 그리고 현실을 더 좋게 만들려는 그런 성향이 다른 사람의 눈에도 보이는 거겠지 싶다. 하늘이 너무 맑은 날에 집 앞의 산책길 겸 등산로를 걸으며 오늘의 짧은 생각을 마무리했다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"개인 의견","slug":"개인-의견","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%9D%98%EA%B2%AC/"},{"name":"개인 취향","slug":"개인-취향","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%B7%A8%ED%96%A5/"},{"name":"내가 좋아하는 것","slug":"내가-좋아하는-것","permalink":"https://xeppetto.github.io/tags/%EB%82%B4%EA%B0%80-%EC%A2%8B%EC%95%84%ED%95%98%EB%8A%94-%EA%B2%83/"},{"name":"좋은 회사","slug":"좋은-회사","permalink":"https://xeppetto.github.io/tags/%EC%A2%8B%EC%9D%80-%ED%9A%8C%EC%82%AC/"},{"name":"만들기","slug":"만들기","permalink":"https://xeppetto.github.io/tags/%EB%A7%8C%EB%93%A4%EA%B8%B0/"}]},{"title":"[테스팅 실무] 더 나은 버그 보고를 위한 테스터의 글쓰기 6편","slug":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-06편","date":"2022-05-18T08:18:00.000Z","updated":"2022-05-18T08:18:00.000Z","comments":true,"path":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-06편/","link":"","permalink":"https://xeppetto.github.io/Software-Testing-and-QA/%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%8B%A4%EB%AC%B4/%ED%85%8C%EC%8A%A4%ED%8C%85-%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/%ED%85%8C%EC%8A%A4%ED%84%B0%EC%9D%98%EA%B8%80%EC%93%B0%EA%B8%B0-06%ED%8E%B8/","excerpt":"","text":"이전 편에서는 필자가 경험치로 쌓아온 버그 보고 시 지켜야 할 사항들과 주의해야 할 사항들에 관해 설명했다면, 이번 편에서는 필자가 실제로 보며 첨삭했던 문장들과 그런 글들에서 느낀 뉘앙스에 대한 이야기를 해 볼까 한다. 혹은 ‘정확히 규칙이랄 건 없지만 알고 작성하면 세련되어 보이는 버그 보고 노하우’ 정도의 팁(tip)들이다. 필자가 이전 편들에서도 언급하였지만, 버그 보고는 Technical Writing의 일종이다. 그러므로, 전문성을 가지고 작성해야 한다. 필자는 기본기를 굉장히 중시하는 성향이다. 그러니 이 글에 검색해서 들어오신 분이시라면 본 포스팅의 내용에 앞서 꼭 1편, 2편, 3편, 4편, 5편을 먼저 읽어보시기를 추천드린다. 실전 좋은 문장, 실전 나쁜 문장, 그리고 약간의 설명문단 나누기나 단어&#x2F;용어 선택을 잘해서 기술 문서를 작성하는 건 글쓰기 연습을 하는 개인의 의지 문제이므로, 그 부분은 그 부분대로 두고, 조심해야 할 뉘앙스나 쓰지 않아야 할 표현들에 대해 실제 사례들을 짚어보려 한다. 실사례1) …됩니다, 됩니다, 됩니다. 수동태 : 그 마법을 써야 할 경우와 쓰지 말아야 할 경우. • “홍길동은 도술을 써서 부자의 창고를 또다시 털었습니다.”는 능동태다. “또다시 홍길동입니다. 창고가 도술에 의해 털렸습니다.”는 수동태다. 글쓰기 연습을 좀 심각하게 했던 사람이라면 차이를 바로 알 수 있는데, 그 차이의 근본적은 바로 ‘주어’가 명시되었느냐, 암시되거나 감추어졌느냐에 대한 차이다. • 수동태를 사용하면 행위의 주체가 감추어지는 마법이 발생한다. 버그 보고 시에는 사실 이 수동태 형태의 문장을 전술적으로 많이 사용해야 한다. 소프트웨어에 대한 이해가 적은 사람들은 버그가 프로그래머의 역량 부족에 의해 발생한다는 오해를 하는 경우도 있기 때문에 ‘누가 개발했다’라는 정보를 의도적으로 숨기기 위해 사용하는게 좋다. 혹은 누가 개발했는지에 대한 정보가 명확하더라도 (이전 편에서 필자가 ‘지적하지 마라’라고 언급한 바와 같이) 나타나는 문제에 대한 잘잘못을 따지지 않기 위해서 사용한다. • 버그 보고 시에는 수동태를 써야 한다고 설명하였지만, 모든 문장을 수동태로 쓰지 말자. 버그 보고에서 수동태를 써야 하는 이유는 위에서 설명했지만, 모든 문장이 수동태면 현상을 명확하게 명시할 수 없다. 버그가 발생하는 현상에 다다르기 위한 사용자 혹은 시스템의 행위에 대해 주어를 명시해야 한다. 그래야 내용이 명확해진다. • 그리고, 특히 테스트 결과 보고서 같은 보고서류를 쓰다 보면 “준비됩니다”, “사용됩니다”, “처리하게 되었습니다” 등으로 “… 됩니다, 됩니다, 됩니다”라는 표현을 많이 사용하게 된다. 가능한 좋은 내용들은 능동적으로 누가 행위를 하였는지 나타내는 게 좋다. • 수동태와 능동태를 적시적소에만 사용할 수 있어도 다양한 방식으로 의사소통하며 평화롭게 전달해야하는 필요 정보들을 공유할 수 있게 된다. 실사례2) 제목 : 버그입니다. • 모든 보고서의 제목을 “보고입니다.”라고 보고하는 경우도 종종 있다. 업계로 진입하는 초심자분들 중 이 글을 읽으신 분들이시라면 이제 더 이상 같은 실수는 하지 않으시길 바라며… • 모든 버그 보고서는 제목에 내용이 요약되어 제목만 보고도 내용을 유추할 수 있도록 해야 한다. 이렇게 말하면 때로 “그럼 제목과 내용이 같아지는데요?”라고 되묻는 경우가 있는데, 그래도 된다. 버그 보고를 하다 보면 정말로 제목과 내용이 똑같을 수도 있는데, 그게 영~ 어색하다면 스크린샷이나 동영상을 하나 준비하면 되지 않을까? • 내용을 요약해서 제목에 작성해야 하는 이유는 검색했을 때 “버그입니다”만 100개씩 나오지 않도록 하기 위해서다. 같은 UI에서 나오는 버그라고 해도 “특수기호 작성 시 OO가 안되는 버그”, “□ □를 한 후 ○ ○ 사용 시 △△로 보이는 현상”과 같은 방식으로 제목에서 내용을 유추할 수 있어야 오랜 시간이 지난 후 검색해도 쉽게 필요한 내용을 찾을 수 있다. 실사례3) 독자(글 읽는 사람)의 상태를 가정하지 않는게 좋다. • 다음 문장은 무엇이 문제인지 고민해보자. “말씀드린 내용으로 문제가 재현되지 않는다면 회신하여 주시고, 그 동안 다른 기능들을 먼저 구현하고 계십시오. “ 이 문장은 글을 쓴 사람과 읽는 사람이 상호 신뢰가 확고하다면 크게 문제되지 않을 수도 있다. • 위 문장의 근본적인 문제는 “내가 준 답은 반드시 맞을 거다”라고 상대의 이해를 강요하는 부분이다. 버그를 보고한다는 행위는 제품&#x2F;서비스 내에서 뭔가 문제나 현상이 있을 때 이에 대한 정보를 전달하는 것이므로, 과연 보고자(글쓴이)는 문제라고 생각하는 해당 상태에 대해 정확히 파악한 것인가를 먼저 돌아보아야 한다. 그 부분에 대한 확신이 있어야만, 다른 사람에게 “내 말이 맞으니 해 보고 안 되면 알려줘라”라고 말할 수 있는 것이다. • 어떤 경우에도 다른 사람을 평가하거나, 다른 사람의 이해&#x2F;감정을 함부로 강요하는 건 나쁜 행동이다. 내가 상대가 하는 말을 이해못할 수 있듯이, 상대도 내가 하는 말을 못알아듣거나 이해하지 못할 수 있다. • 대부분 이런 식의 문장은 자신이 보유한 지식에 대해 확신이 너무 강한 경우에 나타난다. 자신이 가진 지식에 대한 확신이 너무 강하다는 의미는 사실 아는 게 별로 없다는 소리거나, 원래 남과 타협을 잘 안 하는 사람이라는 의미일 거다. 그런 사람이 되지 말자. • 첫 번째 예로 든 문장을 꼭 써야 하는 상황이라면, 필자는 좋은 예로 다음의 표현을 추천한다. “혹시 설명이 미흡하여 추가 설명이 필요하시거나, 이해가 어려운 부분이 있으시면 다시 설명 드리겠습니다. 댓글에 요청해 주십시오.” 실사례4) “…한 문제가 있습니다” 보다는 “…한 현상이 발생합니다”가 훨씬 듣기 좋다. • 문제를 보고하다 보면 평상시 (일반적인&#x2F;보통의&#x2F;소프트웨어 업에 종사하지 않는) 다른 사람들은 부정적인 단어로 인식하거나, 부정적인 문장으로 인식하는 표현을 자주 사용하게 된다. 그렇다 보니, 그 자체가 직업병이 되어 너무 스스로 익숙해지기도 한다. 그래서 「문제, 이슈, 안 됩니다, 오작동합니다」같은 부정적인 표현들을 사용하면서, 그 표현이 어느 정도로 부정적인 인상을 주는지 인지하지 못한 상태에서 자주 사용하곤 한다. • 이전 편에서 필자는 버그 보고 시 단어와 용어는 해당 회사의 업무 의사소통 시 실제로 사용하는 용어들을 사용하라고 설명하였다. 그렇지만, 버그 보고 시에는 업무에서 잠시 빠져올 수 있어야 한다. 또한, 본인의 직업병 때문에 당연하다고 생각하고 있는 상식들에서 잠시 빠져나와 주변의 평상 표현들을 이용해 버그 보고를 작성하는게 좋다. • 전편에서 필자가 언급하였지만, 버그 보고 시에는 가능한 긍정적인 표현들로 문장을 만드는 게 좋다. 그러니 「문제, 이슈, 안 됩니다, 오작동합니다」보다는 「… 현상이 발생합니다.」 혹은 기대 결과와 현재 결과를 비교하여 「AA처럼 되어야 하지만, 실제로는 BB라고 발생하고 있습니다.」라는 식으로 가능한 부정적인 표현을 제거하고, 긍정적인 표현으로 교체하여 문장을 만드는게 좋다. • QA나 Tester의 역할을 잘 이해하지 못하고 “애자일에는 QA 필요 없어요”라는 말을 하는 프로그래머들은 부정적인 표현의 버그 보고를 받게 되면 QA 담당자나 Tester들을 ‘정치하는 사람’ 정도로 인식하는 경우도 종종 있다. 그러니, 본인 업이 오해받지 않도록 하기 위해서는 상대를 존중하고, 긍정적인 글쓰기 하는 역량을 키워야 한다. 이 부분 역시 학습이 필요하다. 실사례5) 무지성(無知性) 짜집기는 너무 성의 없어 보이며, 때론 능력 부족으로 보인다. • 구글 없이 코딩할 수 있는 프로그래머가 몇 명이나 될까? 2022년 기준, (고인물이 된) 몇몇 Senior 프로그래머들 외에는 아마 거의 없을 거다. 아니, 어쩌면 Senior 프로그래머들도 구글 없이 프로젝트를 끝내기는 어려울 수 있다. 구글은 이미 프로그래머들에게도, 그 외 직군에서 소프트웨어 업에 종사하는 엔지니어들에게도 없어선 안 될 필수 업무 도구가 되어있다. • 그런데 간혹 구글에서 검색한 결과를 그대로 복사 붙여넣기 하여 보고서에 넣는 경우가 있다. 그리고선 마치 그 글을 자신이 작성한 거처럼 (아무런 참고 링크도 없이) 보고하는 경우가 있는데, 자~ 확실시하자. 표절은 나쁜 거다. 표절하지 말자. 남의 글을 그대로 복사해 왔다면 적어도 그게 무슨 뜻인지 다시 한번 생각하고, 문맥에 맞게 수정해서 사용하자. • 가장 좋은 것은 남의 글을 가져와 자신의 표현으로 바꾸고, 자신의 용어로 변경하고, 자신의 글에 잘 맞게 녹여 넣는 것이다. 전문가들이 작성한 글을 그대로 가져와 생각 없이 복사-붙여넣기하여 사용하지 말고, 꼭 자신이 한 번 꼭꼭 씹고 소화시켜야 함을 잊지 말자. • 최소한 버그 보고를 작성할 때 남의 자료를 가져다 써야 한다면 참고 자료는 링크 형태로 제공하고, 특정 구문&#x2F;표현을 인용해야 할 경우에도 어디에서 인용했는지 가급적 밝혀두는 게 좋다. (특히 버그 보고가 아닌, 사용자 매뉴얼이나 사용자에게 답변이 나가야 하는 경우의 글쓰기라면 더욱 이 부분에 대해 주의해야 한다.) 실사례6) ‘기존’과 ‘신규’의 함정에 빠지지 말자. • “기존 시스템의 문제점들 때문에…” 라는 말을 보고서에 자주 쓰게 되는데, 이렇게 사용하는 “기존”이라는 단어는 사실 ‘내가 무슨 이야기 하는지 너도 알지?’ 라는 의미를 내포하고 있는 단어이다. 상황에 따라 해석이 굉장히 애매할 수 있다. 예를 들어, 3년 전 쓴 버그 보고서에 “기존 시스템”이라고 되어 있고, 명시된 어떤 내용이 없다면 과연 3년 후인 현재 시점에 해당 버그 보고를 해석할 수 있을까? 그러므로 ‘기존’이라는 표현을 쓸 때는 구체적으로 어떤 게 ‘기존’인지 그 기준을 명시하는 게 좋다. • “신규”도 마찬가지다. 보고서에 당연하다는 듯이 “신규”, “신규 기능”, “신규 시스템”이라는 말을 많이 쓰곤 하는데 이 단어 역시 사용 시점에는 명확하지만 3년 후, 5년 후에는 정체를 알아볼 수 없는 마법의 단어 중 하나다. 일부러 추적이 불가능하게 하려는 의도가 아니라면 사용을 지양하거나, 문서에 해당 표현을 사용하는 게 문화처럼 되어 있다면 어떤 시스템인지, 어떤 기능인지에 대해 그 ‘신규’를 명시하는 게 좋다. 오늘은 여기까지. 실무를 하다가 또 재미있는 에피소드들이 생기면 내용을 추가할 예정이다. (아닐 수도 있고.) 끝.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"[테스팅 실무] 더 나은 버그 보고를 위한 테스터의 글쓰기 5편","slug":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-05편","date":"2022-05-10T08:10:00.000Z","updated":"2022-05-10T08:10:00.000Z","comments":true,"path":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-05편/","link":"","permalink":"https://xeppetto.github.io/Software-Testing-and-QA/%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%8B%A4%EB%AC%B4/%ED%85%8C%EC%8A%A4%ED%8C%85-%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/%ED%85%8C%EC%8A%A4%ED%84%B0%EC%9D%98%EA%B8%80%EC%93%B0%EA%B8%B0-05%ED%8E%B8/","excerpt":"","text":"이번 포스팅은 Quality Assurance와 Testing 영역에 종사했던 필자가 팀원들을 교육하면서, 혹은 공개 교육을 진행하면서 버그 보고 기술에 대해 강의했던 내용들과 노하우들을 공개하기 위한 내용이다. 필자는 기본기를 굉장히 중시하는 성향이다. 그러니 이 글에 검색해서 들어오신 분이시라면 본 포스팅의 내용에 앞서 꼭 1편, 2편, 3편, 4편을 먼저 읽어보시기를 추천드린다. 필자가 해 주는 버그 보고 이야기필자가 팀원들과 함께 일하면서 버그 보고 관련 훈련을 진행할 때 사용하는 체크리스트와 약간의 설명을 방출한다. 필자와 함께 일한다면 이런 내용들에 더해 추가적인 노하우들을 가이드를 해 줄 수 있겠으나, 인터넷에서 전달할 수 있는 내용들은 다음과 같다. 물론 동의하지 않는 사람도 있을 수 있겠지만, 필자는 이렇게 해 왔었고, 앞으로도 필자의 의견은 크게 바뀌지 않을 듯하다. 1. 버그 보고 활동은 학습이 필요한 전문 기술이다. • 「버그 보고」는 소프트웨어 개발을 잘하기 위해 수행하는 커뮤니케이션 방법론의 일부이다. (애자일이나 TDD만 방법론인 게 아니다.) 그렇기에 「버그 보고」 역시 심각히 공부하고, 습득해야 할 기술이다. • 버그 보고를 잘 하기 위해서는 훈련이 필요하다. (누구나 잘 할 수 있다는 생각은 오해다.) • 인간의 생명을 다루는 특정 분야들(우주항공, 무기, 자동차, 원자력, 의료 등)에서는 버그 보고 기록도 모두 공식 문서이다. 버그 보고 기록들도 감사를 받아야 하며, 문제 발생 시 정부 기관, 감사 기관의 사정(査正) 대상이다. 그래서 반드시 전문성이 필요하다. 2. 버그 보고는 소프트웨어 개발에서 가장 주효한 의사소통 도구 중 하나이다. • 수많은 소프트웨어 개발방법론자들에게 「의사소통」을 개선하거나 역량을 확보해야 할 주요 키워드로 꼽지만, 그중 하나가 버그 보고임을 말하는 방법론들은 거의 없다. • 버그 보고라는 것은 소프트웨어 내의 문제에 대해 함께 하는 팀이 「의사소통을 원활하게 하기 위해 작성하는 정보 공유 방법론」이다. 버그 보고는 의사소통 역량에 해당하는 중요 소프트 스킬(Soft skill)이며, 소프트웨어 개발 조직 내 리더들이 갖추어야 할 역량이다. 3. 최대한 내부 개발팀에서 사용하는 친숙한 용어를 사용하여 설명한다. • 버그 보고를 효율적으로 수행하려면 일단 팀에서 사용하는 용어들을 사용한다. • 개발팀 내부에서 사용하는 그 용어들이 업계 표준과 맞지 않다고 해도 일단 사용한다. 중요한 건 무슨 용어를 사용하고 있느냐가 아니라, 발생한 문제를 해결하는 바에 개발팀이 집중하도록 하는 것임을 잊지 말자. 사용하는 용어를 고치는 건 나중에 해도 된다. • 틀린 용어가 회사 밖으로 나가 공식적인 자료로 사용하게 되는 경우는 업계에서 평상시 사용하는 용어가 아님을 알리고 수정하도록 독려하는 건 상관없다. 하지만 굳이 조직 내에 오랫동안 사용한 용어가 있다면, 불필요하게 고치려 들지 말고 그러려니 하자. 그 용어로도 돈 잘 벌고 있었으면 안 고쳐질 가능성이 높기 때문이다. 4. 버그 보고의 가장 중요한 목적은 「정보」 전달이다. • 버그 보고라는 행위를 왜 하는가에 관해 서술할 때 가장 중요한 목적을 하나만 꼽으라면 그것은 프로젝트 내 필요한 사람들에게 버그에 대한 「정보」를 전달하는 것이다. (그리고 ①필요한 정보를 ②적시에 ③그 정보가 필요한 사람에게 전달하는 것이다) • 가장 좋은 버그 보고서는 개인의 주관적 감정이나, 개인적인 평가(어떻게 되는게 좋겠다라는) 등 불필요한 정보를 담지 않는게 좋다. 중립적이고 객관적인 관점에서 ‘사실 정보’들을 전달해야 한다. • 그러므로, 버그 보고 기록은 전달해야 하는 「정보」를 중심으로 기술한다. 불필요하게 평가하거나, 개인의 감정을 담거나, 개선의견을 함부로 담지 않는 게 좋다. • 사실만 기록한다는 것도 사실 쉽지 않고, 기술 훈련이 필요하다. 왜냐하면 누군가가 사실이라고 느껴 기록한 내용들이, 또 누군가에게는 불편하고 부정적으로 느껴질 수 있기 때문이다. (지나치게 날카로운 Fact의 나열은 그 사실의 대상이 되는 사람에게는 듣기 버거울 수 있다.) 세상 사람 누구나 마찬가지겠지만, 좋지 않은 소식을 전달 받으면서 온통 부정적으로만 말하는 사람의 말은 듣고 싶지 않다. 그러므로, 중립적 입장에서 사실을 나열하는 과정에서 가능하면 부정적인 단어, 표현보다 긍정적인 단어와 표현들을 사용하여 버그를 보고하는게 좋다. 상황에 따라서 보고된 버그의 내용은 누군가에게 절망적이거나, 나쁜 소식일 수 있다. 5. 내용 설명은 최대한 간결하고, 심플하게 기술한다. • 이는 단순히 짧게 요약해서 서술하라는 이야기가 아니다. 정확히 표현하면 “불필요한 이야기를 주저리 늘어놓지 말라”는 의미다. • 또한, 굳이 불필요하게 “너무 복잡한 문장을 만들지 말라”는 의미다. • 간결하고, 명확하게, 단순 명료하게 전달해야 하는 정보들을 전달하면 된다. • 모호하게 해석될 문장을 만들지 말라. 이렇게도 저렇게도 해석될 수 있는 문장을 만들지 않도록 해야 한다. • 버그 보고자의 글쓰기 능력이 충분히 훌륭하지 못할 수 있다. 누구나 간결하고, 심플한 보고서를 만들 수 있는건 아니다. 위 1번 전제에서 언급하였지만, 좋은 버그 보고를 위해서는 반드시 심각히 공부하고, 기술을 습득하는 훈련이 필요하다. 그러므로, 더 나은 테스터가 되기 위해 항상 공부하고, 훈련하라. 6. 버그 보고는 창작 글쓰기가 아니다. 테스트 케이스(Test Case)에 담긴 내용들을 적극 활용하라. • 대부분의 엔지니어링 조직에서 업무상 역할을 구분하는 것은 해당 업을 달성할 수 있는 전문성을 기준으로 나눈다. • 테스트 전문가(Test Expert)는 프로젝트 내에서 테스트를 설계(Test Design)하고 분석하여 테스트 계획(Test Planning)과 테스트 케이스(Test Case)를 만드는 역할을 수행한다. • 그렇기 때문에 대부분의 프로젝트 조직에서 테스트 케이스는 그 자체로 전문성을 가진 도구이다. • 정상적으로 테스트 케이스를 작성할 수 있는 테스트 전문가가 만든 테스트 케이스에는 사전조건(Pre-requisite&#x2F;Pre-condition), 재현 방법(Steps to reproduce), 현재 상황&#x2F;결과(Actual result), 예상 결과(Expected result)가 미리 설계되어 있다. 이를 적극 활용하자. • 버그 보고 시에는 본인이 창작해서 글을 쓰기보다는 미리 설계된 테스트 케이스를 활용하여 ①어떤 상황에 ②무엇이 ③어떻게 작동했어야 정상인데 ④어떤 비정상 결과를 보인다고 작성해야 한다. • 정황을 기술해야 하는 경우들도 있으나, 그런 경우도 버그 보고자 개인의 창작은 가능한 배제 하고 사실을 기반으로 작성해야 한다. 그리고 그 사실들은 대부분 테스트 케이스에 미리 준비되어 있다. • 참고 : 테스팅 업계에서는 ‘원래 되어야 하는 결과’로 Designed result라고 사용하지 않고, Expected Result를 사용한다. 기획서에 모든 사용자의 예외 상황을 가정할 수 없기 때문이기도 하고, 프로그램 결과가 언제나 기획한 대로 작동하지 않을 수 있기 때문이다. 그러나, 팀에서 협의가 된다면 “기획서에 있는데 그대로 작동 안하는 경우 Designed result’라고 하고, 그 외 테스터의 판단에 오류라고 판단되는 경우 ‘Expected result’로 나누어서 사용하는 것도 가능하다. 7. 버그 보고는 본인의 지식을 자랑하는 문서가 아니다. • 버그 보고는 본인이 알고 있는 지식을 자랑하기 위한 문서가 아니다. 불필요하게 지식 자랑하지 마라. 또, 그렇게 하는 사람이 같은 팀에 있다면 말려라. • 상황에 따라 이론에 관해 설명이 필요한 경우, 혹은 논의가 필요한 경우가 발생할 수 있는데 이런 경우는 그냥 차라리 회의를 열어라. • 반드시 이론을 동반하여 설명해야 한다면, 별도로 컨텐츠를 제작하거나, 자료를 조사하여 링크&#x2F;참고자료로 제공한다. 8. 버그 보고 시 지적하지 않는다 • 버그 보고 시 누군가를 지적하듯이 글을 쓰지 않도록 주의한다. • 중요한 것은 정보의 전달이다. 중요 내용에 집중하자. • 개발 조직의 상급자가 버그 보고를 하려고 들면 말려라. 특히 조직의 실장급의 Senior, CTO가 버그 보고를 하려고 들면 꼭 말려라. 그들은 업무 평가를 하는 사람들이다. 그들의 버그 보고는 받아들이는 사람들에게 지적처럼 느껴지게 하며, 공포심을 자극할 수 있다. 9. 버그 보고에는 사자성어, 속담, 비속어, 은어, 유행하는 줄임말을 사용하지 않는다. • 가끔 어떤 회사에서는 경영진들이 사자성어나 일상생활에서 사용하지 않는 옛스런 표현을 사용하는 걸 좋은 문장이라 생각하는 경우가 있을 수 있다. 설득해서 그러지 않도록 하는 게 좋다. 버그 보고는「의사소통을 위한 방법론」이자, 미래의 팀이 과거 팀의 활동을 살펴볼 수 있는 역사적 기록이다. 그러므로, 10년 뒤, 20년 뒤, 언제 보아도 알아볼 수 있도록 명료하게 보고를 작성하는 게 중요할 뿐 아름답고 수려한 문장을 만드는 건 버그 보고에 전혀 중요하지 않다. • 외국어 표현은 한국어 표현이 있는 지 확인하고 가능한 공통적으로 모든 세대가 이해할 수 있는 표현을 선택하는게 좋다. 필자는 다음의 방법을 추천한다. (사실 이는 국제 표준이기도 하다.) ① 한글명이 있는 경우 한글명을 쓰고 영문명을 기록 : 한글명(English Name) ② 영문 줄임말을 쓰는 경우 전체를 먼저 쓰고, 단축어를 기록: Quality Assurance(QA) • 버그 보고 작성자는 몇 년 뒤의 자신이 해당 자료를 찾아볼 수 있음을 상기하고, 작성 시 그 당시에 유행하는 용어를 사용하는 우를 범하지 않도록 하자. 그렇기 때문에 유명한 방법론들에 나오는 용어들보다는 국제 표준의 용어, 소프트웨어 공학의 용어를 사용하는 게 좋다. 가장 좋은 버그 보고서는 읽는 사람들이 이해가 잘되고, 또한 끝까지 읽고 싶게 만드는 보고서이다. 10. 구어체를 사용하지 않는다. • 사실 이 항목은 너무 당연한 거라 훈련 시에 빼먹고 강조하지 않을 때가 많다. 근데 꼭 언급하지 않으면 종종 사고가 발생하곤 하는 항목이다. 자, 이거 중요하다. 그리고 기본이다. 버그 보고를 할 때는 구어체를 사용하지 않는다. 자신과 친분이 있는 프로그래머가 개발한 구간에서 버그가 발생했다고 해서 자기 나름대로는 친분을 표시한다고 구어체로 쓸 수 있는데, 그게 받아들이는 입장에서는 굉장히 공격적으로 느껴질 수 있다. • 또한, 당사자들 외의 사람들이 보기에는 그런 상황들이 굉장히 불편하거나, 혹은 버그 보고자가 아마추어처럼 보일 수 있다. 11. 메신저를 사용하지 않는다. • 위 10번의 확장판 이야기다. 개인적인 친분이 있는 프로그래머가 개발한 부분에서 버그가 발생한다고 해서 (단순 문의인척 하며) 메신저를 이용하여 버그에 대한 정보를 개인적으로 전달하고, 개인적으로 버그를 수정하게 해서는 안 된다. 모든 건 가능한 팀 내 기록으로 남겨야 한다. 제품의 품질과 팀 업무 품질의 개선을 위해서 필요한 데이터들을 개인적으로 처리하지 말자. • DevOps든, QA든, Dev 조직의 Leader이든, 이런 사건을 발생하지 않게 하기 위해서는 개발환경과 테스트 환경을 나누어야 하고, Module 단위의 Test와 System Integration Test 단위의 환경을 나누어 어느 시점이 되면 더 이상 개별적인 판단 후 시스템을 변경할 수 없도록 권한을 막아두는게 좋다. 12. 스크린샷을 이용하여 문제점을 강조할 때 빨간색 사용을 자제한다. • 빨간색은 전 세계 공통적으로 초등 교육 시 선생님이 누군가의 오답을 교정하는 색상인 경우가 많다. 그래서 버그 보고에 들어가는 스크린샷 작업 시 붉은색 계열을 사용하여 특정 부분을 강조하면, 해당 버그가 발생하는 부분을 개발했던 프로그래머 입장에서는 지적당하는 느낌이 들 수 있다. (이 내용은 절판된 소프트웨어 테스팅 원서들에서 심리학을 언급하며 기재되어 있는 부분을 참고하였다.) 버그 보고는 Software Tester가 하는 Techinical Writing이다. 마지막으로, 너무 당연한 이야기지만 ①문단 나누기를 확실하게 해야 하고, ②맞춤법 검사기를 꼭 돌리는 게 좋다. 필자와 함께 일하거나 취미 프로젝트라도 함께 하는 사람들이면 모를까 블로그 글 몇 개를 소개하는 것으로 누군가의 글쓰기를 교정해주기는 어렵다. 필자는 스스로도 글을 잘 쓰는 편이 아니며, 워낙 오타도 많이내고 단어의 띄어쓰기나 맞춤법도 많이 틀리는 편이다보니 누구를 공개된 장소에서 가르쳐주기도 창피하다. 글쓰기는 학교에 다닌 사람이라면 누구나 최소 1번 이상 점수를 받기 위해 노력했던 구간이다 보니 자신이 잘하지 못한다는 인식을 가지기가 굉장히 어렵다. 글쓰기 관련 내용은 과외를 찾아볼래도 의외로 글쓰기 과외는 다들 잘 받지 않다보니 선생님을 구하기도 쉽지 않다. 필자가 권하는 가장 좋은 방법은 책을 읽는 것이다. 책에는 대부분의 경우 기승전결이 있다. 책에서는 문단 나누기가 잘 되어 있고 좋은 문장들을 읽을 수 있다. 책을 읽으면 책을 구성하기 위해 수 많은 머리 좋은 사람들이 글을 쓰고, 퇴고하고, 읽고, 편집하고, 출판하는 과정에 담긴 지식 체계를 은연 중에 혹은 세세히 익힐 수 있다. 개인적으로 글쓰기 관련 도서를 읽어 훈련하거나, 혹은 전문성을 키우기 위해 Technical Writing에 대해 자료를 찾아보고, 강의에 참석하여 기술 분야의 글쓰기를 공부해 보는 것도 좋은 방법이라 추천하고 싶다. 5편 끝. 6편에서 계속.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"[테스팅 실무] 더 나은 버그 보고를 위한 테스터의 글쓰기 4편","slug":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-04편","date":"2022-05-05T08:05:00.000Z","updated":"2022-05-05T08:05:00.000Z","comments":true,"path":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-04편/","link":"","permalink":"https://xeppetto.github.io/Software-Testing-and-QA/%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%8B%A4%EB%AC%B4/%ED%85%8C%EC%8A%A4%ED%8C%85-%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/%ED%85%8C%EC%8A%A4%ED%84%B0%EC%9D%98%EA%B8%80%EC%93%B0%EA%B8%B0-04%ED%8E%B8/","excerpt":"","text":"목차 여러 소프트웨어 테스팅 관련 책에서 참조한 내용 소개 소프트웨어 테스팅 법칙 293가지 Software Testing The Testing Practitioner 개발자도 알아야 할 소프트웨어 테스팅 실무 소프트웨어 테스트 전문가 가이드 그 외 참고 도서 마무리 참고 자료 이번 포스팅과 다음 포스팅은 Quality Assurance 영역에 종사하는 사람들이 더 나은 버그 보고를 할 수 있도록 돕기 위한 버그 보고 시 Technical Writing하는 방법에 관해 설명한다. 본인이 QA, Tester, Programmer 등 Bug reporting과 관련한 업무를 수행하는 사람이라면 한 번쯤 참고해 볼 만한 내용을 담았다. 필자는 기본기를 굉장히 중시하는 성향이다. 그러니 이 글에 검색해서 들어오신 분이시라면 본 포스팅의 내용에 앞서 꼭 1편, 2편, 3편을 먼저 읽어보시기를 추천드린다. 여러 소프트웨어 테스팅 관련 책에서 참조한 내용 소개필자가 가진 노하우 전수에 앞서, 필자가 그런 노하우들을 갖추게 된 배경을 먼저 설명해야 할 거 같다. 그래서 몇 가지 책에 나와 있는 내용들을 좀 설명하는 게 좋을 듯하다. 소프트웨어 테스팅 법칙 293가지Cem Kaner 외 2인 공저, 이주호 역, 정보문화사, 2002년 초판 발행, 2004년 한국어 번역판 발행 법칙55. 버그 보고서의 질이 곧 테스터의 능력을 말해준다.법칙56. 버그를 보고해야 해당 버그가 고쳐진다.법칙57. 버그 보고서를 효과적인 세일즈 도구로 만들어라.법칙58. 버그 보고서는 당신을 대표하는 것이다.법칙59. 시간을 들여서 버그 보고서의 가치를 높여라.법칙86. 보고서의 어조를 조심하라.법칙87. 지치거나 까다로운 사람조차도 쉽게 읽을 수 있도록 가독성이 뛰어난 보고서를 작성하라. • 한번에 한 단계씩 버그 재현 과정을 진행한다. • 각 단계별로 번호를 매긴다. • 문제를 재현하는 데 필요한 모든 단계는 빼놓지 않는다. • 독자들이 실패할 수 있는 가장 짧은 단계를 표시한다. • 보고서를 쉽게 쭉 훑어볼 수 있도록 공백을 사용하라. • 짧으면서 간단한 문장을 사용하라. • 어떤 일이 일어나며, 어떤 일이 일어나기를 기대하는지를 명시하라. • 만약 심각한 결과가 발생했음에도 불구하고, 프로그래머가 버그의 심각성을 이해하지 못할 것 같다면 왜 &gt; 그렇게 생각했는지를 설명하라. • 프로그래머가 문제를 식별하고, 수정 후 버그를 더욱 쉽게 테스트해볼 수 있도록 부연 설명을 포함하라. • 복잡한 제품이나 문제에 대하여 3줄 정도로 간략하게 문제를 요약하라. 그리고 가급적 상세하게 설명하라. • 중립적 논조를 유지하라. • 농담은 하지 마라. 괜한 오해를 만든다.법칙88. 보고서 작성 기술을 향상시켜라. Software Testing류성열, 이남용, 오기성, SAMS글로벌, 2002년 출간 효과적인 버그 보고 설명 최소의 설명 : 버그를 설명하고 재현하는 데 필요한 사실과 세부 사항만을 설명 하나의 보고서에 하나의 버그 : 버그 보고 시 하나의 버그 리포트에 버그 내용 1개만 기술 명백하고 일반적인 설명 : 복잡하고 뒤얽힌 단계로 설명하지 말고, 사용자들에 의해 발견되기 쉬은 일반적인 버그로 설명 버그를 재현할 수 있는 설명 : 재현경로를 명확하게 분석하고 간략하게 기술 버그를 보고할 때는 판단을 피하라 : 버그 보고 시 개인적인 판단 기준을 들이대거나, 감정 표시, 자만, 비난 등을 포함하지 않도록 주의 버그 보고서에 대한 후속 조치를 취하라 : 버그가 무시되거나 방치되도록 두지 말고, 지속적으로 감시한다. The Testing PractitionerErik van Veenendaal, 2002년 출간(번역본 없음)※ 필자 주1 : 이 책은 번역본이 없는 영문 원판을 필자가 나름대로 번역한 내용을 기재한다. 한국 사람들이 이해하기 쉽게 의역한 부분도 있음을 미리 양지해둔다. IEEE 표준으로 소프트웨어 문제점 보고에 대한 규정이 문서화 되어 있다.IEEE 1044-2009 : IEEE Standard Classification for Software Anomalies ※ 필자 주2 : 이 책에 기술된 IEEE 1044는 1993년 버전과 1995년 버전에 대한 이야기이다. 워낙 오래전 나온 책이기 때문에 최근 업데이트된 2009년 버전과 무엇이 다른지 필자도 잘 모르겠다. 일단 그런 부분들은 논외로 하고, 이 책에 나오는 대로 기술하면 다음과 같다. 버그 보고 및 처리는 다음과 같은 개념적 프로세스를 지닌다. Recognition, 인지&#x2F;인식 Investigation, 조사&#x2F;분석 Action 행동&#x2F;수행 Disposition 처분&#x2F;조치 누군가 좋은 버그 리포트를 작성한다면 다음이 일반적인 규칙일 것이다. Structure, 구조 : 좋은 버그 리포트는 확실하고, 구조적인 테스팅 방식을 담고 있어야 한다. 수동 테스팅, 자동 테스팅, 시나리오 기반, 혹은 탐색적 테스팅 등 테스팅 방식은 상관 없다. 즁요한 것은 버그를 어떻게 발견했느냐에 대한 내용을 표현하는 구조이다. Reproduce, 재현 : 간결하고 정확하게 이슈의 재현 방법을 기술한다. Isolate, 격리 : 테스트 환경 및 시스템으로부터 버그의 현상을 격리시켜야한다. 그래야 버그의 현상을 명확하게 알 수 있다. Generalize, 일반화 : 가능하면 버그가 발생하는 상황을 명확하게 일반화하라. Compare, 비교 : 같은 테스트 케이스로 여러번 테스트를 진행한다면, 이전 버전의 결과와 비교하고 이를 개발팀에 공유하라. Summarize, 요약 : 버그의 제목은 버그의 성격과 현상을 간결하게 표현하라 Condense, 응축 : 버그 보고서에는 불필요한 표현들이나 단어들을 빼고, 간결하고 명확하게 의미가 전달되도록 기술하라. Disambiguate, 불명확함 제거 : 불명확하거나 혼동될 수 있는 표현, 단어, 문장 등은 가능한 빼고 명확한 내용을 제공해야 한다. Neutralize, 중립 : 버그 리포트는 중립적인 관점에서 사실만을 기재해야 한다. (누군가에게는 버그 리포트가 나쁜 소식일 수 있기 때문이다.) 개인적인 내용, 개인의 감정, 혹은 평가하는 표현을 담지 마라. Review, 검토 : 버그 보고서는 기술 문서 중 하나이다. 프로그래머가 잘 알아볼 수 있도록 리뷰하는 과정을 거치는게 좋다. ※ 필자 주3 : 버그 관리 시스템에 버그 보고를 작성할 때 “로그인 버그입니다”, “메뉴 버그입니다” 하는 식으로 너무 큰 단위로 작성해선 안 된다. “로그인 화면에서 ○○○를 실행 시 □□□ 발생하는 버그” 같은 식으로 세부적이고 구체적으로 제목을 명시해야 한다. 제목과 내용이 같아도 상관없다. 그래야 하는 이유는 나중에 검색을 용이하도록 미래의 나, 미래의 팀원들에게 친절함을 베푸는 것이다. 개발자도 알아야 할 소프트웨어 테스팅 실무권원일, 박은영, 이현주, 조현길, STA, 2008년 출간※ 필자 주1 : 이 도서에서는 버그 보고서에 일반적으로 들어가면 좋은 항목들이 잘 정리되어 있다. 결함번호테스트 항목결함 형태 : 기능성, 신뢰성… 기획 의도추적성 (발생시점) : 예) 요구사항의 ID No, 설계기준서, 상세설계, 코드, 등발견 시점 : 요구사항, 설계, 상세설계, 코딩, 단위&#x2F;통합&#x2F;시스템&#x2F;인수테스팅 단계처리 상태 : 오픈, 보류, 중복, 수정 대기, 수정 완료, 종료, 재오픈재현 여부 : 항상 재현, 간헐적, 재현불가심각도 (사업적&#x2F;기술적) : Show stopper, Fatal, No Workaround, Workaround, Cosmetic우선순위 : 즉시 해결, 주의요망, 대기 낮은 순위보고일발생버전&#x2F;빌드수정일수정버전&#x2F;빌드완료일확인자&#x2F;승인자작성자수정 담당자결함 요약재현 절차증상기대 결과결론&#x2F;건의사항시스템 전체적인 이슈 : 인시던트가 수정되면 영향 받은 부분과 그 사업적&#x2F;기술적 심각도 기술테스트 환경결함 등록&#x2F;변경 History 결함 로그 ※ 필자 주2 : 필자의 의견이지만 위 항목 중 “결론&#x2F;건의 사항”은 빼야 한다고 생각한다. 버그 관리 시스템에 모아두어야 할 기록이 아닌데다, 불필요한 논쟁이 벌어질 수 있고, 미래에 검색 시 불필요한 내용이 검색될 수 있기 때문에 분리하여 별도의 시스템 혹은 커뮤니케이션 도구를 사용하는 게 적합하다. 소프트웨어 테스트 전문가 가이드한국정보통신기술협회(TTA) 지음, 2019년 출간※ 필자 주1 : 소프트웨어 테스트 전문가 가이드는 CSTS 자격증을 위한 서적이다. ※ 필자 주2 : 본 포스팅에 소개된 책들 모두 가능하면 한 번쯤 읽어보시기를 권장하는 책들이지만, 이 책은 한국에 출간되지 않은 영어 원서들에 담겨 있는 소프트웨어 테스팅과 관련한 많은 내용이 집대성된 한글로 된 책이므로 가능하면 한 권 사서 읽기를 추천한다. 이 도서에서는 결함 보고 활동 산출물로 ‘결함 보고서’와 ‘결함 추적 보고서’를 소개하고 있다. 결함 보고 시 다음의 성격을 고려해야 한다고 소개하고 있다. 결함의 구체화 : 테스트 데이터, 절차, 환경, 상황, 몇 번의 시도에서 나타나는지 등을 명확히 + 구체화 해야한다. 결함의 고립화 : 어떤 결함이 어떤 상황에서 나타나는 지에 대해 명확하고, 구체적으로 기술한다. 결함의 일반화 : 결함의 발생에 영향을 주는 요소를 최대한 일반적으로 기술. 음수에서만 발생한다던가, 특정 OS에서만 발생한다 등. 결함을 기록 시 고려해야할 사항으로는 다음을 소개하고 있다. 결함 컨텍스트 : 어떤 상황에서 결함이 식별되었는 지 기술 결함 설명 : 재현되고 해결될 수 있도록 상세히 기술 심각도 우선순위 위험 분석 결함 상태 그 외 참고 도서ISO&#x2F;IEC&#x2F;IEEE 29119-2의 Testing Process에서 테스트 인시던트 보고(Test Incident Report)에 대해 소개하고, ISO&#x2F;IEC&#x2F;IEEE 29119-3:2021의 Annex R(Informative)에 보면 인시던트 보고(Incident Report)라는 항목이 있는데 필자가 내용을 확인하고 세부적인 내용들을 확인하려고 해보았다. 필자의 개인적인 소견으로 해당 내용들은 본 포스팅에서 테스팅 초심자들에게 참고하라고 소개할 만한 내용이 아니었다. 초보자들은 29119 표준은 스킵하도록 하자. 마무리위에서 언급했던 도서들에서 발췌한 내용들은 소프트웨어 테스팅을 해봤고, 버그 보고를 일정 기간 이상 해 본 사람들이라면 쉽게 이해할 수 있는 내용이다. 하지만, 혹시 항목에 대한 세부적인 설명이 필요한 분이 계시면 댓글을 남겨주시기를 바란다. 혹여라도 질문이 들어오면 별도의 포스팅을 작성해 보겠다. (필자의 블로그에 댓글을 달기 위해서는 GitHub에 가입해야 한다.) 4편 끝. 5편에서 계속. 참고 자료 각 도서에 대한 정보는 본문에 표시하였으므로 본문 참고","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"[테스팅 실무] 더 나은 버그 보고를 위한 테스터의 글쓰기 3편","slug":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-03편","date":"2022-05-01T08:01:00.000Z","updated":"2022-05-01T08:01:00.000Z","comments":true,"path":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-03편/","link":"","permalink":"https://xeppetto.github.io/Software-Testing-and-QA/%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%8B%A4%EB%AC%B4/%ED%85%8C%EC%8A%A4%ED%8C%85-%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/%ED%85%8C%EC%8A%A4%ED%84%B0%EC%9D%98%EA%B8%80%EC%93%B0%EA%B8%B0-03%ED%8E%B8/","excerpt":"","text":"이번 편은 좋은 글을 쓰는 방법에 대해 세 가지 정도를 소개한다. 모두 글쓰기 시 알고 있으면 좋은 내용들이다. 필자는 실무에서 Technical Writer(테크니컬 라이터)로서 혹은 다른 여러 직무를 수행하면서 업무에 필요한 글쓰기를 하거나, 개인 취미로 블로그에 글쓰기를 하는 사람이다. 그러니 필자가 하는 조언만으로 글쓰기를 잘 할 수는 없다. 이렇게 미리 한 발 빼는 이유는 겸손한 척 하려는게 아니라 필자는 전문적으로 국어를 연구하거나, 학문적으로 글쓰기에 대해 연구해서 남을 가르치는 사람이 아니라는 이야기를 하고 싶은 거다. 그러므로, 더 전문적인 지식이 필요한 경우 본 포스팅 하단의 참고 자료를 참고하거나, 서점에서 더 좋은 글쓰기 관련 책들을 찾아 보시기를 권장한다. 3편을 시작하기 전에… 1편, 2편도 되게 흥미진진-스펙타클하지는 않았지만, 3편은 특히 더 어렵거나 지루하게 느껴질 수 있다. 하지만 3편의 내용을 명확히 습득하지 않고 이후로 넘어가면 결국 또 기본기 없이 요령만 배우는 꼴이 될 수 있으니, 어렵고 지루하더라도 3편을 꼭 잘 읽어보시기를 바란다. 좋은 문장 만들기한국어는 문장 구성이 다른 언어에 비해 굉장히 자유로운 편에 속한다. 한국어의 문장은 주어, 동사, 목적어의 전후 위치를 변경해도 말이 잘 통한다. 그럼에도 불구하고 어느 정도 일반적이라고 통용되는 ‘좋은 글쓰기’의 규칙은 당연히 존재한다. 일단, 국어의 문장은 일반적으로 주어-목적어-서술어의 구조로 구성된다. 이런 기본적인 구조의 틀에 맞는 문장을 쓰는 게 좋은 문장을 만드는 핵심이다. 한국어라는 언어가 워낙 문장 구성이 다채롭게 변할 수 있는 유연성을 가진 언어이다 보니 그 사회의 글쓰기 문화에 따라 글의 형태가 많이 바뀌는 현상이 보인다. 인터넷이나 메신저에서 글 쓰는 데에 익숙해진 사람들은 본인의 주장이나 글의 목적을 문장의 서두에 배치해서 글의 구조가 복잡해지거나, 혹은 남을 불필요하게 지적하는 방식의 글쓰기 성향을 보인다. 혹은 (토론할 상황이 전혀 아닌 데도 불구하고) 남과 토론하듯이 따지고 드는 듯한 느낌의 글쓰기를 많이 하는 현상이 보이는데 이는 정말 좋지 않은 글쓰기 습관이다. 자, 글쓰기에 대한 기본기를 잘 갖추고 있다면, 회사에 다니며 사회생활을 할 때 많은 도움이 된다. 특히 외부의 고객과 글을 주고받아야 하는 회사의 직무를 수행하고 있다면 좋은 문장을 만들어 글을 쓰는 능력은 정말 중요한 핵심 역량이다. 그 회사에서는 그런 역량을 갖춘 사람들이 쓰는 글이 고객들에게 가치를 전달하며 수익을 창출할 수 있기 때문이다. 가치가 전달되어야 고객들이 지갑을 열고, 결과적으로 회사의 매출을 높이도록 하는 데 일조할 수 있는 중요한 인력이 바로 글쓰기를 잘하는 인력이다. 회사에서 ‘돈을 번다’는 행위는 고객에게 가치를 전달하고, 그 가치만큼의 금전적 재화를 청구하여 회사로 가져오는 활동을 말한다. 그러므로 돈을 벌기 위한 행위를 하는 모든 사람은 자신의 업무 성과를 글로 표현해야 할 필요가 있다. 돈 벌기를 위한 글쓰기를 할 때는 네 가지를 명심해야 좋은 문장을 만들 수 있다. ①정확하고, ②명료하게 그리고 ③간결하고, ④전문성을 담고 있도록 문장을 구성해야 한다. 그리고 본인의 글을 읽을 ‘대상 독자’가 누구인지를 명확히 해야 한다. 이에 대한 부분은 이후 4편, 5편에서 추가로 언급하겠다. 2022년, 너무나도 편리한 세상이다. 디지털 문화는 세상을 뒤덮고, 인류는 전에 볼 수 없던 속도로 온갖 새롭고 훌륭한 신문물들을 창조해내고 있다. 책 대신 좋은 영상들이 사람들의 여가를 차지했고, 뭔가를 정리하는 글쓰기 대신 댓글로 짤막하게 본인의 의견을 표출해낸다. 좋은 문장은 점점 그 가치를 잃어가고 메신저의 짤막한 글들이 대신 그 가치의 지위를 얻었다. 그렇게 변해간 세상에서 그에 대한 반대급부로 사람들은 점점 더 책을 읽지 않게 되는 듯하다. 책을 많이 읽어 좋은 문장을 만들어 낼 수 있는 사람과 그렇지 않은 사람 간의 차이는 21세기 중반으로 넘어가면서 점점 벌어질 것이고, 이는 결국 머지않은 미래에 임금 격차와 빈부격차로 나타날 것이라 필자는 예상한다. ‘대상 독자’를 명확히 파악하고 글쓰기회사에서 쓰는 글은 본인이 쓰고 싶은 대로 쓰는 게 아니다. 그렇게 글을 쓰고 싶다면 필자처럼 개인 블로그를 하는 쪽을 추천한다. 지금 필자가 블로그에 글을 쓰듯이, 이 글을 누가 읽을지 알 수 없는 상태에서 글을 쓰는 것과는 다르게 대부분 회사 업무에서 글쓰기를 할 때는 그 글을 읽게 될 「독자」가 명확하다. 그리고 그 ‘회사 내의 독자’들은 대부분 본인의 업무와 연봉을 결정짓는 의사결정권자들 혹은 본인을 평가하는 사람들인 경우가 상당히 많다. 회사에 입사하기 전 학교에서 배우는 대부분의 글쓰기라는 게 에세이, 논술, 특정 주제에 대한 글짓기 정도에 한정되다 보니 특정 독자, 아니 정확히 표현해서 ‘보고 받을 사람’을 명확히 하고 글쓰기 하는 연습이 되어 있지 않은 상태에서 사회에 첫걸음을 하게 되는 경우가 대다수다. 그래서 이전 방식의 글쓰기 버릇을 쉽게 버리지 못하는 상태에서 발생하는 실수들이 많이 보인다. 다시 한번 강조하건대, 회사에서 글쓰기를 하는 경우 그 글을 읽는 사람, 혹은 독자를 명확히 파악하는 게 중요하다. 대부분 당신을 평가하는 사람들일 것이므로. 어떤 문서를 작성하든 독자를 명확히 정하고 글을 쓰는 건 중요하다. 문서를 읽는 사람도 그 사람의 살아온 배경에 따라 쌓여 있는 지식의 종류가 모두 다르기 때문에 글 쓰는 사람이 독자를 상정하고 독자가 읽고 이해할 수 있도록 글을 쓰는 게 좋다. 필자와 (같이 나이가 좀 있는 선배들과) 함께 일하는 사람들이라면 (소량의 혼남과 함께) 첨삭지도를 받을 수 있겠지만, 요새는 다양한 회사에서 다양한 환경에서 일을 하고, 평등함을 강조하고 있으며, 또 그래서 특정 부서가 유닛 형태로 1~2명만 존재하는 경우가 많아 이런 글쓰기를 배우기에 어려움을 이해한다. 회사에서 문서를 만들 때는 문서 서두에 ‘문서 소개’에 해당 문서의 독자가 누구인지 명시하는 게 매우 좋은 방법이다. 본인이 누가 이 문서를 읽을지에 대해 가정했다는 걸 명시하는 게 좋다. 예를 들어, 이런 경우를 상정해 보자. 만약 아래와 같은 상황이 고민이 된다면 어떻게 해야 할까? 문서로 API 연동에 대해 설명해야 한다. 보고를 받을 사람들 중에는 개발 전문가도 있지만, 비-전문가(의사결정권자)들도 있다. 이런 경우 문서는 누구에 맞춰서 써야 할까? 대부분의 개발 문서들은 이런 경우 개발 전문가들이 읽을 것임을 상정하여 쓰인다. 그리고 이런 걸로 고민하는 직원을 대하게 되면 대부분 그냥 “그냥 다 해~” 라고 하곤 한다. “다 해라” 라니. 너무 무책임하게 들릴 수도 있다. 근데 이게 무슨 소리냐면, 이런 상황에서 API 문서를 만들거나, API와 관련한 보고서를 써야 한다면 고민하지 말고 그냥 두 개 모두 쓰고 난 후 목차에서 읽을 사람을 가릴 수 있도록 하거나, 혹은 문서의 서두에 ‘누구누구, 혹은 무슨무슨 역할은 여기저기만 읽으시오’ 하고 소개하면 된다는 이야기다. 문서를 별도로 두 개 이상 만들 이유도 없고, 그럴 필요도 없다. 기술 문서를 만들어야 한다면 API 연동 부분과 API에 대한 배경 설명을 분리해서 작성하면 된다. 또 다른 예로, 꽤 비싼 가격의 소프트웨어 도구를 도입해야 하는 경우라면? 이런 의사결정은 대부분 소프트웨어에 비-전문가들인 경영진들에 의해 결정되게 된다. 소프트웨어의 가치를 명확하게 이해하지 못하는 사람들에게 투자를 요청하는 과정에서의 글쓰기는 당연히 소프트웨어적인 관점 보다는 투자 대비 효율에 대한 관점으로 글쓰기 해야 한다. 큰 비용이지만, 이를 투자함으로 인해 얻어지는 결과를 명확히 설명할 수 있다면, 내부 업무 개선과 영업 이익 개선으로 이어짐을 설득해야 하는 것이다. 그 외에도 회사 대 회사로 Business To Business(B2B) 사업을 하는 업무를 담당하고 있다면, 테크니컬 라이팅(Technical Writing) 역량이 매우 중요한 핵심 기술임을 이해해야 한다. 우리 회사에서는 당연한 것들이 상대 회사에는 당연하지 않을 수 있다는 점을 이해해야 하며, 명료하고 정확한 글쓰기를 할 줄 알아야 한다. (이에 대해서는 테크니컬 라이팅 강의를 듣거나, 도서를 구입하여 공부하시기를 추천한다.) 같은 선상에서 엔지니어 대 개발자로 Engineer To Developer 업무를 수행해야 하는 프로젝트 조직 내에서 기획, 설계, 버그 리포팅 등 내부 인원들이 보는 문서를 작성해야 한다면, 이 또한 내부 인원들의 수준과 용어에 대한 이해, 내부 조직 문화 등 여러 상황을 고려하여 문서를 작성해야 한다. 좋은 보고서 쓰기좋은 글쓰기 중 사회생활을 하는 우리가 알아야 하는 결정적인 지식은 ‘보고서 작성 방법’과 관련한 내용들이다. 인터넷 검색을 하면 다양한 주제와 많은 전문가가 각기 다른 관점으로 써둔 훌륭한 지식이 있다. 그러므로 필자의 글도 간단히 그 정도로 참고만 해 주시면 좋겠다. 독자 • 보고서 작성 시 일한 사람 중심이 아닌 보고서를 읽을 사람(의사결정권자) 중심으로 써야 한다. 결과의 위치와 성격 • 보고서는 두괄식으로 작성해야 한다. 보고 결과는 앞쪽에 표시되어야 한다. 결과를 뒤로 숨기지 않도록 한다. • 보고 결과의 핵심을 요약해라. 어떻게 일했고, 뭐를 개선해야 하는지는 나중에 따로 정리해도 된다. 초안 • 처음부터 완벽하게 쓰려고 하지 말고, 초안을 쓰고 고치는 방식으로 접근해라 • 초안을 쓰는 동안은 고치지 마라. 고치는 동안 뭘 작성하려 했는지 잊어버린다. • 초안은 문서의 전체적인 구조를 잡는 데에만 집중하면서 작성하면 된다. 본 작성 • 작성 시 초안을 고치면서 데이터가 정확한지 확인해라. • 의사결정에 필요한 내용이라면 첨부해야 할 내용들을 모두 의사결정권자들이 알게 해야 한다. • 읽기 쉽게, 읽는 사람이 재미를 느끼게 쓰는게 좋다. 교정 • 초안-본 작성 후 교정 시에는 보고서를 쓰고, 고치다 보니 원래 목적했던 독자인 의사결정권자에게 필요하지 않은 내용이 있는지 확인한다. • 교정 시에는 서두에 작성한 결과와 다른 데이터가 있는지, 있다면 왜인지 명확히 분석하고 다듬어야 한다. • 보고서에는 절대 외국어, 줄임말, 유행어를 함부로 쓰지 마라. 교정 시 이 부분을 모두 명확한 용어로 변경하자. • 10년 뒤에 보고서를 읽어도, 무슨 소린지 알 수 있도록 명확하게, 명료하게 작성하라. 검토 • 보고하기 전에 주변에 검토해줄 사람을 찾아라. 직장 상사라는 건 그럴 때 쓰라고 있는 거다. • 맞춤법 검사기 많으니 제발 검사 좀 해라. • 보고서에 존재하는 잦은 오탈자는 보고서 데이터 전체의 신뢰를 망가뜨린다. 마무리 • 문서 끝부분에는 결과 보고서와 관련한 참고 자료를 동봉하자. 예를 들어, 버그 리포트라면 버그 목록을 참고 자료로 첨부하는 식이다. • 문서 마지막에는 함께 일한 동료들을 모두 언급하자. 함께 일한 우리 모두의 성과임을 잊지 말자. 성과를 독점하는 건 정말 나쁜 짓이다. 3편 끝. 4편에서 계속. 참고 자료 https://www.korean.go.kr/nkview/nklife/1999_4/1999_0405.pdf https://plainkorean.kr/ko/index.do https://m.blog.naver.com/pinkbiru/221566511577 https://blog.naver.com/sshhllee/220967390624 https://tech.kakaoenterprise.com/105 https://papasean.tistory.com/13 https://blog.hansol.com/369 https://www.saysamyang.com/73 https://www.pressian.com/pages/articles/222110 https://m.thesingle.co.kr/article/599845/THESINGLE https://blog.daum.net/sikdang/372 https://brunch.co.kr/@photothink/73 https://pajustory.tistory.com/1486 Thumbnail image : https://unsplash.com/photos/s9CC2SKySJM","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"Localhost에서 블로그 글쓰기","slug":"Xeppetto/ThisBlog/20220430-localhost에서-열심히-작성-중","date":"2022-04-29T19:01:22.000Z","updated":"2022-04-29T19:01:22.000Z","comments":true,"path":"Xeppetto/ThisBlog/20220430-localhost에서-열심히-작성-중/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20220430-localhost%EC%97%90%EC%84%9C-%EC%97%B4%EC%8B%AC%ED%9E%88-%EC%9E%91%EC%84%B1-%EC%A4%91/","excerpt":"","text":"필자가 현재 블로그에 적용하여 사용하고 있는 Framework는 HEXO라고 부르는 블로그 프레임워크 이다. SSG라고도 하고, JAM Stack이라고도 한다. SSG는 ‘쓱’이 아니라, Static Site Generator의 줄임말이다. HTML이라는 정적 문서를 생성해 주는 웹사이트 생성 도구라는 의미이다. 그리고 JAM Stack의 JAM은 JavaScript, API, Markup이라는 3개 단어의 앞 글자를 따서 만든 단어고, 뒤의 Stack은 최근 소프트웨어 개발자들이 자주 언급하는 ‘기술 스택’이라는 말을 사용할 때의 그 ‘스택’이다. 즉, ‘기술의 연계&#x2F;연동’ 정도의 개념이라고 보면 될 듯하다. 필자는 개인적으로 SSG보다는 JAM Stack이라고 부르는 걸 선호한다. 이 글에서도 JAM Stack이라 칭하려 한다. 이 글에서 ‘JAM Stack이란 무엇이냐’ 혹은 ‘HEXO란 무엇이냐’에 대한 이야기를 하지는 않을 거다. (그 글들을 정리해야 하나 고민하며 작업 중이긴 하다.) 다만, 늘 개인적으로 작성하던 글들을 공개하면서 “열심히 해야지!”라는 자신의 다짐을 위해… 그리고 plus… 생각처럼 손 놓고 글을 안 쓰고 있지는 않다는 점을 혹여라도 있을 블로그 손님들에게 어필하기 위해 쓰는 글이다. JAM Stack 종류의 프레임워크들은 작업 환경을 갖추어 놓으면 LocalHost에서 실행할 수 있다. 그래서 필자의 개인 PC에서 이런저런 글들은 열심히 작성하고 있었다. 공개를 안 했었을 뿐. 블로그 글쓰기를 열심히 해야겠다 마음을 먹으면 왜인지 급작스레 바빠지는 탓에 글쓰기에 집중할 시간이 충분치 않았다. 그래서 온종일 이런저런 일로 바쁘다 보니 퇴고하기가 너무 싫어서 그냥 방치하는 게 꽤 길었다. 퇴고는 정말 너무 힘들도 어렵다. 웹에 블로그를 만들어 낙서하듯이 글을 쓴 게 25년이 되었는데, 아직도 필자에겐 그렇다. 어쩌면 아마 글쓰기를 좋아하는 것이지 재능은 없는 걸지도… 뭐… 누군가는 남의 블로그를 보면서 쉽게 말한다. ‘에이, 별거 아니네~’ 하며 다른 이들의 글쓰기를 비하하곤 한다. 그런 사람들은 일단 블로그를 개설하고 글쓰기를 한번 해 보면 좋겠다. 말이 나온 김에… 필자의 고충을 털어놓는다면 그렇다. 사실 필자는 글을 잘 쓰는 사람은 아니라는 걸 스스로 잘 알고 있는 사람이다. 필자 기준에 글이라는 걸 잘 쓰는 건 2가지 중 한 가지 이상을 잘하는 걸 의미한다고 본다. 1번, 원래 글을 잘 쓰는 사람이다. 그냥 생각을 머릿속으로 잘 정리하고, 해야 할 말이 있으면 술술 풀어서 글을 써 내려가는 그런 사람. 일필휘지(一筆揮之)라고 불림에 손색이 없을 정도로 이야기를 풀어내고 글을 씀에 막힘이 없는 사람들이 있다. 정말 부럽다. 2번, 퇴고를 잘하는 사람이다. 퇴고라는 작업은 글의 흐름과 맥락을 보아야 하고, 동시에 논리에 어긋남은 없는지를 보아야 한다. 문장을 수정하고 맞춤법을 검사해야 한다. 수많은 퇴고에 대한 방법론들이 있지만, 이렇다 할 완성된 규약은 없는 점이 바로 이 퇴고라는 작업이 얼마나 어려운지를 방증하는 게 아니니까 싶다. 그래서 결국 퇴고를 잘하기 위해서는 남의 글을 많이 읽어보고, 특히 (인터넷 게시판의 글보다는) 기승전결 구조가 잘 잡힌 책들을 읽어보는 게 중요하다고 늘 회사의 신입사원들에게 말하곤 한다. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD1번, 원래 글을 잘 쓰는 사람이다. 그냥 생각을 머릿속으로 잘 정리하고, 해야 할 말이 있으면 술술 풀어서 글을 써 내려가는 그런 사람. 일필휘지(一筆揮之)라고 불림에 손색이 없을 정도로 이야기를 풀어내고 글을 씀에 막힘이 없는 사람들이 있다. 정말 부럽다. 2번, 퇴고를 잘하는 사람이다. 퇴고라는 작업은 글의 흐름과 맥락을 보아야 하고, 동시에 논리에 어긋남은 없는지를 보아야 한다. 문장을 수정하고 맞춤법을 검사해야 한다. 수많은 퇴고에 대한 방법론들이 있지만, 이렇다 할 완성된 규약은 없는 점이 바로 이 퇴고라는 작업이 얼마나 어려운지를 방증하는 게 아닐까 싶다. 그래서 결국 퇴고를 잘하기 위해서는 남의 글을 많이 읽어보고, 특히 (인터넷 게시판의 글보다는) 기승전결 구조가 잘 잡힌 책들을 읽어보는 게 중요하다고 늘 회사의 신입사원들에게 말하곤 한다. 필자는 위 1번과 2번 중 어느 것 하나 남들보다 잘한다고 말하기는 어렵고, 사실 2번을 잘하려고 엄청나게 노력하는 사람이라고 보는 게 맞는 거 같다. 그래서 오늘도 JAM Stack 환경을 만들어 Localhost에 글을 쓰고, 퇴고 작업을 하기 시작한다. 얼마나 걸릴지 모르겠다. 남에게 보여줄 수준이 되려면… 그저 너무 오래 컴퓨터 안에만 있지 않도록 3달에 한 번씩은 쌓인 글들을 배포해볼까 싶다. 앞으로 글은 분기에 한 번, 분기 마무리 주까지 퇴고를 마치고 배포하는 방식으로 해볼까 싶다.필자는 위 1번과 2번 중 어느 것 하나 남들보다 잘한다고 말하기는 어렵고, 사실 2번을 잘하려고 엄청나게 노력하는 사람이라고 보는 게 맞는 거 같다. 그래서 오늘도 Localhost에글을 쓰고, 퇴고 작업을 하기 시작한다. 얼마나 걸릴지 모르겠다. 남에게 보여줄 수준이 되려면… parent of 1d234a1 (1) 참고 자료 https://jamstack.org/what-is-jamstack/ https://wordrow.kr/한자/一筆揮之-일필휘지/ https://blog.daum.net/jjsun21c/3082973 https://han-oneday.tistory.com/110 https://brunch.co.kr/@caru/14","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"},{"name":"블로그","slug":"블로그","permalink":"https://xeppetto.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"나혼자 놀기","slug":"나혼자-놀기","permalink":"https://xeppetto.github.io/tags/%EB%82%98%ED%98%BC%EC%9E%90-%EB%86%80%EA%B8%B0/"},{"name":"재밋으면 그만","slug":"재밋으면-그만","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EC%9C%BC%EB%A9%B4-%EA%B7%B8%EB%A7%8C/"}]},{"title":"[테스팅 도구 개발] 테스트케이스 관리 도구 개발 시작","slug":"소프트웨어/Tools/20220428-테스트케이스-관리도구-개발","date":"2022-04-28T07:28:00.000Z","updated":"2022-04-28T07:28:00.000Z","comments":true,"path":"소프트웨어/Tools/20220428-테스트케이스-관리도구-개발/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Tools/20220428-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BC%80%EC%9D%B4%EC%8A%A4-%EA%B4%80%EB%A6%AC%EB%8F%84%EA%B5%AC-%EA%B0%9C%EB%B0%9C/","excerpt":"","text":"https://cafe.naver.com/swtester/7613 TCMT4KTETest Case Management Tool for Korean Test Engineershttps://github.com/Xeppetto/TCMT4KTE","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"도구개발","slug":"소프트웨어/도구개발","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EB%8F%84%EA%B5%AC%EA%B0%9C%EB%B0%9C/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"[테스팅 실무] 더 나은 버그 보고를 위한 테스터의 글쓰기 2편","slug":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-02편","date":"2022-04-26T07:26:00.000Z","updated":"2022-04-26T07:26:00.000Z","comments":true,"path":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-02편/","link":"","permalink":"https://xeppetto.github.io/Software-Testing-and-QA/%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%8B%A4%EB%AC%B4/%ED%85%8C%EC%8A%A4%ED%8C%85-%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/%ED%85%8C%EC%8A%A4%ED%84%B0%EC%9D%98%EA%B8%80%EC%93%B0%EA%B8%B0-02%ED%8E%B8/","excerpt":"","text":"더 나은 버그 보고를 위한 테스터의 글쓰기를 하기에 앞서 먼저 어떻게 쓰는 글이 좋은 글인지부터 개념 정립을 해야 한다. 그 첫 번째 아이템은 ‘문단 나누기’다. 필자가 생각하기에 최근 젊은 세대의 글쓰기에서 가장 안 지켜지는 부분이라 생각한다. 문단이란?문단이란 건 하나의 글 내에서 생각의 단위를 나타낼 때 사용한다. 연관된 문장들을 붙이고 엮어 하나의 문단을 만든다. 문단을 나눌 때 주의해야 할 내용들에 대해 정리해보았다. ① 문단은 생각의 덩어리이다. 여러 문장을 엮어 하나의 문단으로 만들 때 사용한다. 서로 관련이 없는 생각의 덩어리들을 하나의 문단으로 구성해선 안 되며, 서로 연관이 있는 덩어리들로만 엮어야 한다.② 문단은 줄 띄어쓰기로 구분한다. 문단과 문단을 가르는 방식은 한 줄 띄어쓰기임을 명심하라. 아래 예1처럼 서로 다른 생각의 덩어리를 하나의 문단으로 붙여 써선 안 되며, 예2처럼 문단인지 뭔지 구별이 안 되게 문장을 바로 아랫줄에 쓰는 일이 없도록 해야 한다. 틀린 문단의 예1)문단 하나에는 하나의 생각만 엮어야 한다. 더 나은 버그 보고를 위한 테스터의 글쓰기를 하기에 앞서 먼저 어떻게 쓰는 글이 좋은 글인지부터 개념 정립을 해야 한다. 문단이란건 하나의 글 내에서 생각의 단위를 나타낼 때 사용한다. 연관된 문장들을 붙이고 엮어 하나의 문단을 만든다. 틀린 문단의 예2)문단을 구분할 때는 문장을 붙여 써서는 안된다. 더 나은 버그 보고를 위한 테스터의 글쓰기를 하기에 앞서 먼저 어떻게 쓰는 글이 좋은 글인지부터 개념 정립을 해야 한다.문단이란건 하나의 글 내에서 생각의 단위를 나타낼 때 사용한다. 연관된 문장들을 붙이고 엮어 하나의 문단을 만든다. 옳은 문단의 예)문단을 구분할 때는 1줄 띄어쓰기로 적용한다. 더 나은 버그 보고를 위한 테스터의 글쓰기를 하기에 앞서 먼저 어떻게 쓰는 글이 좋은 글인지부터 개념 정립을 해야 한다. 문단이란건 하나의 글 내에서 생각의 단위를 나타낼 때 사용한다. 연관된 문장들을 붙이고 엮어 하나의 문단을 만든다. ③ 다시 강조하지만 문단 하나는 하나의 생각 덩어리이다. 그러므로, 문단에도 주제(소제목, 의미의 묶음)가 존재할 수 있다. 그리고, 하나의 문단에는 하나의 생각&#x2F;아이디어만 존재해야 한다. 두 개 이상의 생각을 하나의 문단에 묶지 말자.④ 그런데도 너무 지나치게 문단을 많이 만들지 않도록 주의하자.⑤ 불필요하게 줄 띄어 쓰지 말자. 문장 하나하나를 줄 띄어쓰기 하는 건 0점짜리 글이다.⑥ 목록&#x2F;숫자를 나열할 때는 굳이 문단으로 나누지 않아도 된다. 위 ③, ④, ⑤를 위한 틀린 문단의 예1)두 개 이상의 생각이 하나의 문단에 엮여 있다. 품질보증(Quality Assurance), 혹은 테스트(Testing)를 업으로 삼으려는 모든 신입사원에게 필자는 이런 말씀을 드리고 싶다. (중략) 그래서 필자는 테스팅 업무하실 분들에게 테스터로서 갖춰야 할, 그리고 꼭 알아야 할 글쓰기에 대해 간략히 소개해 볼까 한다. 테스터로서의 본인이 작성할 버그 보고, 결과 보고 등과 관련된 글쓰기 팁을 좀 설명해 보면 어떨까 싶었다.아래와 같은 방식으로 글을 풀어가려 한다.① 글쓰기 기본② 여러 테스팅 전문서적과 소프트웨어 공학 도서에 나온 버그 보고 규칙 및 주의할 점③ 업계 선배로서, 꼰대로서 드리고 싶은 말씀 위 ③, ④, ⑤를 위한 틀린 문단의 예2)불필요하게 줄 띄어쓰기가 되어있다. 품질보증(Quality Assurance), 혹은 테스트(Testing)를 업으로 삼으려는 모든 신입사원에게 필자는 이런 말씀을 드리고 싶다. (중략) 그래서 필자는 테스팅 업무하실 분들에게 테스터로서 갖춰야 할, 그리고 꼭 알아야 할 글쓰기에 대해 간략히 소개해 볼까 한다. 테스터로서의 본인이 작성할 버그 보고, 결과 보고 등과 관련된 글쓰기 팁을 좀 설명해 보면 어떨까 싶었다. 아래와 같은 방식으로 글을 풀어가려 한다. ① 글쓰기 기본 ② 여러 테스팅 전문서적과 소프트웨어 공학 도서에 나온 버그 보고 규칙 및 주의할 점 ③ 업계 선배로서, 꼰대로서 드리고 싶은 말씀 위 ③, ④, ⑤를 위한 옳은 문단의 예)하나의 문단은 1줄 띄어쓰기로 구분하고, 번호를 나열할 때는 굳이 줄 띄어쓰기를 하지 않는다. 품질보증(Quality Assurance), 혹은 테스트(Testing)를 업으로 삼으려는 모든 신입사원에게 필자는 이런 말씀을 드리고 싶다. (중략) 그래서 필자는 테스팅 업무하실 분들에게 테스터로서 갖춰야 할, 그리고 꼭 알아야 할 글쓰기에 대해 간략히 소개해 볼까 한다. 테스터로서의 본인이 작성할 버그 보고, 결과 보고 등과 관련된 글쓰기 팁을 좀 설명해 보면 어떨까 싶었다. 아래와 같은 방식으로 글을 풀어가려 한다. ① 글쓰기 기본② 여러 테스팅 전문서적과 소프트웨어 공학 도서에 나온 버그 보고 규칙 및 주의할 점③ 업계 선배로서, 꼰대로서 드리고 싶은 말씀 ⑥ 계속 강조하지만 문장 하나에 여러 논제&#x2F;주제를 담지 않도록 한다. 문단 하나에는 한 개의 생각이 담겨 있어야 한다. 단락 구성의 구조상 문장 하나에 여러 논제에 관해 이야기해야 한다면, 그렇게 나열하는 문단을 따로 빼면 된다. 그래서 주제를 나열하는 문단 한 개와 주제별 문단이 글에 있으면 좋은 글이다.⑦ 각 단락의 구조와 분량이 어느 정도여야 한다거나, 같아야 한다는 공식은 존재하지 않는다. 때로는 100줄이 하나의 문단이 될 수도 있고, 때로는 단 1줄이 문단이 될 수도 있다.⑧ 가능하면 인터넷 게시글 보다는 전문 작가의 책을 읽어 연습하자. 그래야 문장 구조, 문단 구조에 익숙해진다. 인터넷의 글이나 신문 기사는 전문 작가가 쓴 글이 아니다. 도움이 되지 않는다라. (요새 괜히 기자들 대부분을 ‘기레기’라고 부르는게 아니다. 기사의 문장 구조들도 엉망인 경우가 태반이다.) 위 두 개는 굳이 예제를 나열하기에 너무 글이 길어질 듯 해서 Skip 한다.이에 대해 배움이 필요하신 분들은 글쓰기 기본 관련 초등학교, 중학교 학생들이 보는 참고서를 참고하시면 어떨까 한다. 아니면 실전에서 직접 부딪히면서 배우는 방법도 좋다. 문단 구분과 관련해서는 사실 중학교 교과 과정 정도에 나오는 워낙 기본적인 내용들이다 보니 좀 친절한 척하고 싶어서 길게 썼는데, 혹시 이런 걸로 발표 자료 만드실 분들을 위해 간략히 요약하면 다음과 같다. 모든 문단은 생각 한 개의 덩어리이다. 생각 두 개 이상을 하나의 문단으로 만들지 말라. 모든 문단은 줄 띄어쓰기로 구분한다. 그러니 줄 띄어쓰기에 신경 써야 한다. 모든 문장을 모두 줄 띄어쓰기로 구분하지 마라. 그건 문단이 아니다. 문단 내에서 번호를 붙여 나열할 때는 각기 다른 생각의 덩어리이지만 바로 다음 줄에 붙여 쓴다. 단락은 길 수도 있고, 단 한 줄 일 수도 있다. 단락에 올바른 규격은 없다. 테크니컬 라이팅(Technical Writing) 강의를 하는 곳이 있다면 꼭 시간을 내서 강의를 듣자. 필자가 제시하는 해결 방법은 사실 단 하나다. 책을 사라. 책을 읽어라. 2편 끝. 3편에서 계속. 참고 자료 https://m.blog.naver.com/toqlc1228/100177705950 https://m.blog.naver.com/studizm/221301829714 https://m.blog.naver.com/studizm/221301035137 https://seentalk.tistory.com/165 Thumbnail image : https://unsplash.com/photos/s9CC2SKySJM","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"[테스팅 실무] 더 나은 버그 보고를 위한 테스터의 글쓰기 1편","slug":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-01편","date":"2022-04-24T07:24:00.000Z","updated":"2022-04-24T07:24:00.000Z","comments":true,"path":"Software-Testing-and-QA/테스팅-실무/테스팅-버그보고/테스터의글쓰기-01편/","link":"","permalink":"https://xeppetto.github.io/Software-Testing-and-QA/%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%8B%A4%EB%AC%B4/%ED%85%8C%EC%8A%A4%ED%8C%85-%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/%ED%85%8C%EC%8A%A4%ED%84%B0%EC%9D%98%EA%B8%80%EC%93%B0%EA%B8%B0-01%ED%8E%B8/","excerpt":"","text":"2022년, 회사에 막내 신입이 입사했다. 교육 겸 기술문서를 한번 써보라고 해봤는데, 음? 뭔가 이상한 점을 발견했다. 뭐랄까… 메신저 채팅도 아닌 게시판 댓글도 아닌, 뭐… 게임 채팅에서 올라올 거 같은 이상한 글쓰기였다. 첨삭해서 돌려보내고, 다시 작성을 요청했다. 그리고 다시 첨삭, 첨삭, 첨삭. 기술문서 한 개 작성하는데 최소 네다섯번의 첨삭이 있어야만 완성되는 걸 보고 결국… (아직 계약서에 잉크도 마르지 않아 아끼고 보듬어줘야 할 신입 사원에게) 싫은 소리를 해야만 했다. 이게 고쳐지는데 거의 4주가 걸렸다. 다행히도 지금은 그 막내가 어느 정도 잘하고 있다. (가끔 칭찬 2호, 칭찬 3호도 발사되곤 한다.) 약 한 달을 첨삭지도 선생님이 된 듯한 느낌을 받으며 사투를 벌이고 나서 필자가 운영하는 커뮤니티에 갔더니 비슷한 구성의 글들이 올라오고 있었다. 그동안 커뮤니티 글들이야 뭐 그냥 의사소통만 되면 되니 별로 신경을 안 쓰고 있었는데, 회사 막내에게 일주일 넘게 첨삭지도를 하고 나니 그런 구조의 글들을 보자마자 짜증이 훅~~~ 올라왔다. 오랜만에 진심으로 올라온 ‘찐’ 짜증이었다. 필자 자신도 놀라 “나 아직 화가 많구나”하고 읊조렸다. 필자가 그들의 글을 흉내 낸답시고 써 보았다. 음, 사실, 잘 안된다. 이거 아닌 거 같다. 비슷하기만 하지 실제 그들의 글을 봤을 때의 충격이 오지는 않는다. 그래도 대충 요새 20대, 30대 초반 신입들이 쓰는 흔한 글의 모습은 아래와 같다. 요새 이십대들과 삼십대 초반들이 글을쓰는 방식은지금 이 글과 같습니다.문단 나누기가 전혀 안되죠.평생을 ‘메신저 글쓰기’와‘게임 채팅’을 해왔었던게이유인거 같습니다. 그들의 글을 여러 개 보고 난 뒤 필자가 발견한 공통점은 다음과 같다. ① 「맞춤법」이 엉망이다.② 「문단 나누기」가 과목이 있다고 치면 F 학점 수준이다.③ 상황과 문맥에 맞는 「적절한 단어 선택」을 하지 못하는 듯하다.④ ‘본인이 많이 아는 것’과 ‘남에게 설명을 잘하는 것’은 다른 데 기술문서에 본인의 지식을 뽐내듯 나열한다. 근데 틀린게 많다. 기술적 내용들을 사실 대로 전달하는 테크니컬 라이팅(Technical Writing) 역량이 전반적으로 약하고, 다른 사람의 글을 주의 깊게 읽지 않는다고 보였다. 커뮤니티의 어떤 친구는 “전 한글로 된 글은 읽지 않아요”라며 자신이 뭔가 굉장히 선도적인 지식을 가지고 있는 거처럼 말하길래 들어봤더니, 필자가 이미 10년 전 쯤 했던 것들(테스트 자동화, TDD)을 하고 있었다. 필자가 그 친구를 보며 내린 결론은 “아, 남의 글을 주의 깊게 안 읽는구나” 였다. 위의 공통점들 외에도 직무 커뮤니티 글들을 보고 있으면 또 다른 공통점들을 발견할 수 있다. 글을 읽고 누군가 그에 대한 반응으로 답변, 댓글 등을 제공해야 한다면, 그런 반응을 보인 사람은 자신보다 해당 기술에 대해 잘 알거나, 해당 업무에 대해 경험이 많거나, 혹은 질문한 본인이 받아들이지 못할 정도로 높은 수준의 지식을 보유하고 있을 수도 있다. 직무 커뮤니티니까. 어디 공개 게시판이 아니잖아. 당연히 해당 직무의 선배들이 답변을 해준다고 생각해야 하는게 정상이다. 그런데 이에 대한 고려가 없이 자신의 주장을 펼치며 맞짱 토론을 하려고 든다. 필자 입장에선 지금의 젊은 세대의 그런 행동들은 참 이해하기 힘든 세대적 차이가 느껴진다. 필자도 이제 ‘기성세대’라는 위치가 되었으니 그들의 행동 이유에 대해 깊이 고민해야만 이해할 수 있는 그런 나이가 되었나보다 싶어 ‘그들은 대체 왜 그럴까?’를 고민해봤다. 필자가 발견한 건 ‘메신저와 게임’이었다. 지금 20대, 30대 초반 세대들의 인생에는 처음부터 메신저라는 존재가 있었고, 그들은 평생 그곳에 글쓰기를 해왔기 때문에 그게 버릇이 되어 정식 글쓰기를 할 때도 자신들의 글쓰기 방식이 이상함을 느끼지 못한다는 걸 알았다. 또한 지금 20대들은 어릴 때부터 ‘컴퓨터 게임’이라는 놀이 문화가 보편화되어 있었고, 그 구조 안에서는 모두가 익명인 채로 실력만을 위주로 등급이 나누어지기 때문에 굳이 자기가 부탁하면서도 자세는 낮추거나 겸손한 자세를 취하는 걸 잘하지 못하는 듯했다. 모든 20대가 그렇지는 않겠지만, 그런 특징을 보이는 이들은 메신저와 게임을 즐겼던 영향이 아닐까 생각한다. 왜냐하면 필자 주변에는 독서를 즐기는 20대 사람들도 많이 있는데, 대부분의 독서광들의 글쓰기 능력이나 의사소통 능력을 보자면 역량이 뛰어난 걸 알 수 있기 때문이다. 그러니 잘하지 못하는 이들에 대한 필자의 추측이 맞지 않을까 하는 강한 심증을 가지고 있다. 품질보증(Quality Assurance), 혹은 테스트(Testing)를 업으로 삼으려는 모든 신입사원에게 필자는 이런 말씀을 드리고 싶다. “품질보증이나 테스트를 업으로 삼으시면, 본인이 상상할 수 없을 정도의 많은 문서를 읽어야 하고, 접해야 하며, 또 본인 스스로 많은 문서를 생성해야 합니다. 본인의 글쓰기가 회사의 성과가 되기도 하며, 대부분의 경우 본인의 글쓰기 결과로 누군가와 의사소통해야 하는 상황이 될 겁니다. 그러니 본인의 글쓰기 버릇을 점검하고 회사에 들어가기 전에 단점들을 고치셔야 합니다. 그렇지 않으면 커리어를 제대로 시작해 보기도 전에 망가질 수도 있습니다.” 그래서 필자는 (품질보증하시는 분들까지는 모르겠고) 테스팅 업무하실 분들에게 테스터로서 갖춰야 할, 그리고 꼭 알아야 할 글쓰기에 대해 간략히 소개해 볼까 한다. 테스터로서 작성할 버그 보고, 결과 보고 등과 관련된 글쓰기 팁을 좀 설명해 보면 어떨까 싶었다. 그리고, 맞춤법 교정기는 무료 제공되는 것이 많으니 꼭 사용하시기를 바란다. 대표적으로는 부산대의 맞춤법 검사기가 있다. 부산대학교 맞춤법&#x2F;문법 검사기 : http://speller.cs.pusan.ac.kr 1편 끝. 2편에서 계속. 참고자료 Thumbnail image : https://unsplash.com/photos/s9CC2SKySJM","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"}],"tags":[{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"}]},{"title":"[Tools] 웹브라우저 주소 복사 시 한글 깨질 때","slug":"소프트웨어/Tools/20220417-웹브라우저-주소-복사-시-한글-깨질때","date":"2022-04-17T09:05:00.000Z","updated":"2022-04-17T09:05:00.000Z","comments":true,"path":"소프트웨어/Tools/20220417-웹브라우저-주소-복사-시-한글-깨질때/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Tools/20220417-%EC%9B%B9%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A3%BC%EC%86%8C-%EB%B3%B5%EC%82%AC-%EC%8B%9C-%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%88%EB%95%8C/","excerpt":"","text":"한국 사람이면 누구나 한 번쯤 경험해보았을 텐데, 블로그 포스팅을 한글 제목으로 하고, 주소를 복사해서 친구에게 보내주려고 하면 한글이 온통 이상한 방식으로 나온다. 예를 들어, 본 블로그 주소인 “xeppetto.github.io&#x2F;소프트웨어&#x2F;Tools&#x2F;20220417-웹브라우저-주소-복사-시-한글-깨질때”를 웹브라우저 주소창에서 복사한 후 Social Media나 메신저에 붙여넣기 하려 하면 아래와 같이 이런 식으로 표시된다. 먼저 이런 현상이 발생하는 이유는 웹브라우저 주소창의 인코딩이 UTF-8일 수 없어서 그렇다. 본문에서 복사한 한글은 전송해도 정상적으로 보이지만, 웹브라우저의 주소창에서 복사한 한글들은 마치 깨진 거처럼 표시된다. 사실 이건 깨진 게 아니라, ASCII라고 하는 문자셋 값이다. 웹페이지의 본문에서는 UTF-8을 허용하지만, 웹브라우저의 주소창에서는 오로지 ASCII만 허용하기 때문에 나타나는 현상이다. 근본적인 이유는 웹이 처음 만들어지고 웹표준이 생성될 때 인터넷의 주소는 ASCII character set으로만 전송하도록 규약을 정해졌기 때문이다. 필자보다 훨씬 똑똑한 사람들이 모여서 만드는 규약이니 이유가 있겠지 싶어서… 필자는 사실 이유에 큰 관심이 없지만, 혹시 여기에 관심이 있는 분이 계신다면 그분의 시간을 줄여드리기 위해 제공하는 Reference 자료는 아래와 같다. 혹시 이 외에도 좋은 참고자료를 알고 계신다면 알려주시기를 바란다. • W3C 표준 : An Introduction to Multilingual Web Addresses 웹브라우저에서 주소 복사할 때 강제로 UTF-8으로 변환해 주면 좋을 텐데, 그런 기능을 지원하지 않는 이유는 무엇일까 하는 생각이 들지만… 궁금한 게 많으면 배고프고, 배고프면 먹게 되고, 먹으면 살찌게 되므로… 필자의 건강과 안녕을 위해 그만 궁금해 하는게 좋겠다. 언젠가 웹브라우저의 주소창에서 ASCII만 사용되는 이슈도 고쳐지거나 변경되기를 바란다. 자, 아래는 “깨진” 웹 주소를 정상적인 형태로 되돌려 주는 변환 도구이다. 한글 주소를 복사하여 붙여넣은 후 변환 버튼을 클릭하면 정상적인 형태의 한글로 변환해 준다. 본 블로그 포스팅의 주소를 복사하여 테스트해보자. function encode() { var obj = document.getElementById('dencoder'); var unencoded = obj.value; obj.value = encodeURIComponent(unencoded).replace(/'/g,\"%27\").replace(/\"/g,\"%22\"); } function decode() { var obj = document.getElementById('dencoder'); var encoded = obj.value; obj.value = decodeURIComponent(encoded.replace(/\\+/g, \" \")); } &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The URL Decoder&#x2F;Encoder is licensed under a Creative Commons Attribution-ShareAlike 2.0 License. 위 form에서 사용한 코드의 원본은 아래와 같다. 아래 코드에서 버튼의 Localization을 적용하고, form의 전체 영역에 style을 조금 변경하여 적용한 결과가 위에서 본 form이다. 저작권 고지, Announcement for Copyright : 아래 코드는 https://meyerweb.com/eric/tools/dencoder/에서 가져왔으며, 해당 페이지에 고지된 위 도구&#x2F;코드의 저작권 고지는 Creative Commons Attribution-ShareAlike 2.0 License입니다.. 1234567891011121314151617181920&lt;script type=&quot;text/javascript&quot;&gt; function encode() &#123; var obj = document.getElementById(&#x27;dencoder&#x27;); var unencoded = obj.value; obj.value = encodeURIComponent(unencoded).replace(/&#x27;/g,&quot;%27&quot;).replace(/&quot;/g,&quot;%22&quot;); &#125; function decode() &#123; var obj = document.getElementById(&#x27;dencoder&#x27;); var encoded = obj.value; obj.value = decodeURIComponent(encoded.replace(/\\+/g, &quot; &quot;)); &#125;&lt;/script&gt;&lt;form onsubmit=&quot;return false;&quot;&gt; &lt;textarea cols=&quot;100&quot; rows=&quot;20&quot; id=&quot;dencoder&quot;&gt;&lt;/textarea&gt; &lt;div&gt; &lt;input type=&quot;button&quot; onclick=&quot;decode()&quot; value=&quot;Decode&quot;&gt; &lt;input type=&quot;button&quot; onclick=&quot;encode()&quot; value=&quot;Encode&quot;&gt; &lt;/div&gt;&lt;/form&gt; 위 코드를 복사해서 본인 컴퓨터 하드디스크 어딘가에 모셔놓아도 되고, 혹은 크롬 브라우저를 사용한다면, 크롬 스토어에 아래와 같은 Decoder들이 올라와 있으니 사용해 보면 어떨까? • https://chrome.google.com/webstore/detail/decode-urls/ammnkklofnncmpmenbffefpmdnocnmlp 필자는 필자의 몸뚱이처럼 점점 비대해지며 느려져만 가는 크롬에 뭔가를 더 이상 설치하고 싶지 않아서 그냥 필자의 블로그에 올려놓고 사용하기로 결정했다. References• https://www.w3.org/International/articles/idn-and-iri/• https://meyerweb.com/eric/tools/dencoder/• https://www.w3schools.com/tags/ref_urlencode.asp• https://ko.wikipedia.org/wiki/ASCII","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Tools","slug":"소프트웨어/Tools","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Tools/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"https://xeppetto.github.io/tags/Tool/"},{"name":"Web","slug":"Web","permalink":"https://xeppetto.github.io/tags/Web/"},{"name":"Browser","slug":"Browser","permalink":"https://xeppetto.github.io/tags/Browser/"},{"name":"Encoding","slug":"Encoding","permalink":"https://xeppetto.github.io/tags/Encoding/"},{"name":"Decoding","slug":"Decoding","permalink":"https://xeppetto.github.io/tags/Decoding/"},{"name":"Address","slug":"Address","permalink":"https://xeppetto.github.io/tags/Address/"},{"name":"Web Standard","slug":"Web-Standard","permalink":"https://xeppetto.github.io/tags/Web-Standard/"}]},{"title":"[Games] 5편. 로스트아크에 개인적으로 바라는 개선점","slug":"소프트웨어/Games/05-Lostark에-바라는-개선점","date":"2022-04-17T07:17:00.000Z","updated":"2022-04-17T07:17:00.000Z","comments":true,"path":"소프트웨어/Games/05-Lostark에-바라는-개선점/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Games/05-Lostark%EC%97%90-%EB%B0%94%EB%9D%BC%EB%8A%94-%EA%B0%9C%EC%84%A0%EC%A0%90/","excerpt":"","text":"목차 의미를 두지 않고 개인적으로 바라는 점 게임의 핵심에 쉽게 접근할 수 있게 해 줬으면 게임을 처음 접하는 초보들에게 뭘 살지 명확히 알려줬으면 초보를 위한 배려가 필요함 가디언 토벌 밸런스 조정이 필요함 우린 더 큰 점핑권을 원해 골드 버스를 시스템화 했으면 초보의 골드 수급과 사용 방법 안내 초보들에게 더 많은 각인을 스토리 보스들도 자주 보고 싶음 크리스탈을 현질하는 퀘스트 필요 각성 퀘스트의 괴로움 퀘스트에 의미를 부여했으면 사용자 매뉴얼 작성은 운영팀의 기획으로 이루어졌으면 카오스 던전을 조금 더 쉽게 혹은 재밋게 그 외 있으면 좋을 거 같은 내용들 의미를 두지 않고 개인적으로 바라는 점필자는 로스트아크를 4달 정도 밖에 플레이하지 않았다. 그러니 당연히 게임의 패치가 어떤 식으로 되어 왔는가를 알지도 못하고, 오래된 고인물 플레이어들의 느낌 혹은 개발팀의 느낌과 다른 느낌을 받았을 수 있다. 그러니 뭘 잘 모르는 초보가 징징대는 소리 정도로 읽어주시면 좋겠다. 필자는 예전에 게임 회사에서 일했다 보니, 게임을 진행하는 동안 이런 거 좀 있었으면 좋겠다 싶은 내용들을 메모해 두는 버릇이 있어 게임을 하면서 적어둔 내용들을 풀어본다. 본 포스팅은 그 메모들을 정리한 내용이다. 사실 로스트아크는 캐릭터의 공격력이 레벨, 각인, 아이템 레벨, 스킬, 트라이포트(스킬 강화) 등으로 분산&#x2F;분리되어 있다. 그래서 캐릭터 레벨과 아이템으로만 인식하던 사람들에게 로스트아크의 시스템은 굉장히 낯설 수 있다. 이런 부분이 이 게임의 진입 장벽이 되며, 뒤에 후술할 여러 가지 정성적인 게임 플레이의 문제점으로 나타난다. 그리고 바로 이 부분이 이 게임의 특징이고 핵심이라 쉽게 개선하거나, 버리기는 어려울 거라 생각하지만… 게임의 핵심에 쉽게 접근할 수 있게 해 줬으면게임을 하다가 너무 어렵고 괴로워서 채팅창에 도움을 요청하면 로스트아크의 고인물들은 다들 레이드까지 오면 그때부터 재밌을 거라 한다. 근데 레이드에 참여하는 게 정말 힘들다. 무과금이면 한 반년 이상 해야 할 거다. 게임의 재미가 레이드부터라면 신규 유저들이 레이드에 쉽게 참여할 수 있도록 장치가 필요하지 않을까? 그동안 초보가 스스로 할 수 있는 일은 본인 레벨에 맞지도 않는 낮은 아이템을 주는 던전을 혼자 돌거나, 긴 시간 동안 자기 레벨과 비슷한 사람들을 파티로 모아서 가서 한 20분 동안 손가락 부러지게 키보드를 연타해서 겨우 클리어하거나, 아니면 고인물들에게 버스를 타는 성은을 내려주십사 구걸하는 방법, 마지막으로 현질해서 빨리 크는 수가 있었다. 대충 계산해보니 빨리 클 수 있는 방법은 현질을 한 50~100만 원 정도 하면 되겠더라. 돈이 없어서 쓰기 싫은 게 아니라, 딱히 게임은 즐기려고 하는 건데 즐기기 위해서 거나하게 현질을 한다는게 필자의 머리에서는 성립하지 않는다. 그래서 항상 한 달에 게임에 쓰는 돈이 일정하게 정해져 있어, 그 이상 쓰지 않는다. 게임 내 재화인 골드가 있으면 돈 내고 버스에 탈 수 있다. 무료 버스는 정말 흔치 않고, 방이 생기면 바로 차버린다. 초심자들의 진입 장벽이 무지하게 높은 게임이다. 게임을 처음 접하는 초보들에게 뭘 살지 명확히 알려줬으면게임을 무조건 무료로 하겠다는 플레이어들도 있겠지만, 필자처럼 적당한 수준으로는 결제하면서 하고 싶은 플레이어들도 있다. 그런데 게임을 잘 이해하지 못한 초보의 상태에서 어떤 아이템을 결제해야 할지에 대한 안내가 없다. 게임 내에서 고인물 플레이어들에게 문의를 해야 답변을 받을 수 있는데, 그들의 언어는 초보에게는 정말 알아듣기 어려운 용어들을 남발한다. 그러니, 초보들이 과금하기 좋게 초보용 아이템들을 좀 명확히 했으면 좋겠다. 특히 선박 스킨 같은 것에 대해 매뉴얼이든 어디든 ‘초보가 지르면 좋은 현질템’ 같은 안내가 좀 있었으면 좋겠다. 초보를 위한 배려가 필요함이 게임은 지인들이 있어야 재밌다 보니 지인들 위주의 게임이 되고, 그러다 보니 초보들을 적극적으로 도와줄 수 없는 게임이다. 초보 길드에 들어가 보려고 해도 길드에 인원수가 있어 소수로 받아야 하니 정작 초보들은 들어갈 수 있는 길드를 찾는 것도 힘들다. 이 게임의 개발팀이 초보들을 위한 컨텐츠를 더 만들던가, 아니면 운영팀이 전 서버 통합 길드를 만들고, 초보들이 게임을 유지할 수 있도록 적극적으로 나서야 할 거다. 지인이 없는 초보가 게임 중반쯤 되면 게임을 즐기면서 키워나가기가 너무 고통스러운 게임이다. 초보일 때 적극적으로 커뮤니티에 참여하도록 유도해야 상주하는 플레이어의 숫자가 늘어날 거라 제안한다. 신규 유저를 위한 장치가 많이 없는 것은 아마 제한된 개발 인력으로 신규 컨텐츠를 확보하고, 기존의 유료 유저들을 만족시키기 위한 선택이엇을 것이다. 게임 내의 현금 유통은 거의 기존의 고인물 유저들에게서 발생할 것이기 때문에 신규 유저를 위한 장치를 마련하기보다는 지금 당장 흐르고 있는 현금의 이동을 극대화하는 방향으로 의사결정 되었을 것이다. 근데 그럴 거면 매뉴얼에라도 초보를 위한 컨텐츠들을 더 많이 채워야 한다. 그걸 그냥 유튜버들에게 맡겨둘 일은 아닌 거 같다. (왜냐면 그들은 게임 내 용어로 말을 하기 때문에 뭔 소리를 하는지 못 알아 먹겠다.) 가디언 토벌 밸런스 조정이 필요함일단 게임을 처음 시작한 뉴비의 입장에서 가디언 토벌 몬스터들의 수치는 15% 정도 하향이 필요하다. ‘딱 렙’을 허용하지 않는 게임이라고는 하지만 어쨌든 레벨업을 하려면 레벨업에 필요한 재료를 수급해야 하는데, 그런 던전에 가면 스킬을 하도 눌러대서 손가락이 부러질 거 같은 느낌이다. 15% 정도는 하향해도 게임 플레이에 크게 지장 없을 거라 본다. 아니면, 난이도를 다양하게 추가해서 난이도가 높아질 수록 수치가 변경되도록 하고, 같은 가디언이라도 더 높은 난이도에서 토벌하면 아이템을 일정 퍼센트 더 주는 방식으로의 개선도 좋을 듯하다. 또한 일반 가디언 토벌은 어비스, 도전 가디언 등을 미리 연습할 수 있는 창구로 사용할 수 있으면 좋을 듯하다. 예를 들어, 일반 가디언들은 준비 동작도 크거나 가디언의 스킬이 출력되는 타이밍을 늦추고, 시스템에서 공격 메시지를 알려주는 식으로 해서 어비스 레이드나 도전 가디언 같은 「실제로 즐기도록 설계된 기획」 컨텐츠들을 연습할 수 있다면 좋을 듯하다. 왜냐하면, 게임의 초반에는 초보들을 배려하는 플레이어들이 많지만, 레이드에 따라갈 때 되면 공략을 숙지 못했거나 실수하는 초보들에게 대번에 욕부터 박고 보는 인성 쓰레기들이 많기 때문에 그 타이밍에 이탈하는 플레이어들이 많을 거 같다. 이를 보완할 수 있는 좋은 수단이 될 거라 본다. 그리고, 이를 통해 개발팀이 기획적으로 사용자들에게 궁극적으로는 레이드를 뛰게 만드려는 게임 본래의 의도와 목적을 명확히 가이드 하는 게 나을 거 같다. 특히 게임을 처음 접하는 뉴비들의 경우는 파푸니카 시나리오인 1302에서 1375 구간 동안 꽤 긴 시간을 머물게 되는데, 그 기간 동안 사용자들이 이후 하게 될 레이드의 전초전을 연습할 수 있도록 하는 장치들을 마련하면 좋을 듯하다. 강한 딜러 들이 와서 가디언 토벌을 깨주는 것보다는 공격 패턴을 연습하는 데에 본연의 목적이 있도록 전체 일반 가디언들의 하향 및 공격 패턴의 알림, 가디언 움직임의 시스템 안내 등을 제공하는 게 어떨까 싶다. 우린 더 큰 점핑권을 원해혹시라도 로스트아크 개발팀이 이 게임을 본다면 이렇게 제안하고 싶다. 서버 전체의 계정에 1415를 넘긴 캐릭터가 1개도 없는 사용자들에게 1415를 만들 수 있는 아이템을 제공했으면 싶다. 아니면 좀 그냥 줬으면 좋겠다. 현재 고인물 사용자들의 컨텐츠는 배럭키우기(서버 캐릭터 키우기) 혹은 품앗이(서로 돌아가며 상대 서브 캐릭터 키워주기)인데, 초심자들을 파티에 끼워주질 않으니 초심자들이 맞닥드리는 심리적 진입 장벽이 너무 높다. 하지만 결정은 쉽지 않을 거다. 이 게임은 1415를 만들기 위해 게임을 열성적으로 하더라도 6개월의 시간이 필요하고, 현금으로 대략 50만원에서 100만원 정도로 예상되는데 그 정도 매출을 포기하는 선택을 할지는 의문이다. 그냥 초반에 마음고생이 심했던 뉴비 플레이어로서 한 번 해본 생각이다. 골드 버스를 시스템화 했으면“버스”라는 시스템은 어떻게 보면 아직 아이템이 덜 갖추어진 신규 유저들에게는 좋은 시스템이지만, 이를 이용하여 게임 내에서 장사하듯이 던전에서 생기는 이득을 나누어 가지자는 식으로 신규 유저들에게 접근하는 게 과연 맞는 게임성인가 의문이 들기는 한다. 근데, 이게 의도된 기획은 아니고 게임이 고인물화 되면서 생긴 문화 같은 거라 게임 제작사의 문제는 아니다. 하지만 현상이 있으면 들여다보고 해결하던가, 개선하던가, 아니면 더 지지해서 시스템화하는 게 맞는 거 같고… 기획팀에서 생각하기에 이게 진짜 맞는 게임성이라 생각이 들면, 아예 시스템으로 만드는 게 맞는 거 같다. 골드버스를 게임 내에서 허용할 거면 그냥 시스템화해서 활성화했으면 한다. 골드버스를 활성화하려면 우편 시스템이 아니라, 실제로 방 내에서 송금하는 시스템을 만들어 두는 게 낫지 않을까? 그러면 새로운 뉴비들도 직관적으로 알 수 있고, 버스를 따라가는 사람들도 직관적으로 돈을 지불할 수 있을 테니까. 예를 들어, 던전 들어갈 때 신규 유저가 100골드를 내면 시스템적으로 알아서 시작 보수, 중간 보수, 클리어 보수로 나누어지고, 버스 기사들에게 특정 시점이 되면 알아서 우편으로 배달되게. 그러면 신규 유저들이 오히려 더 쉽게 “버스”라는 게임 내 생긴 문화를 이해할 수 있겠지. 혹은 아예 “아르고스 버스퀘”를 주는 건 어떨까? 뉴비에게는 1385가 되면 아르고스 버스에만 이용할 수 있는 토큰을 지불하고, 이걸 사용하면, 500G를 버스 기사한테 전달한다든가 하는 방식으로. 그래서 이 게임에는 버스라는 플레이어들의 자율 시스템이 있음을 알리고, 버스를 시스템화해서 게임 내에서 즐기는 컨텐츠화 하는 게 낫지 않나 싶다. (이렇게 어려운 난이도의 시스템을 유지할 거라면…) 초보의 골드 수급과 사용 방법 안내초보들은 (알려주는 사람이 없으면) 골드를 어떻게 사용해야 하는지 명확히 알지 못하다 보니 초반에 시스템에서 나오는 골드를 여기저기 사용해 보게 된다. 그러고 나서 나중에 아이템 레벨에 올릴 골드가 모자라서 골드를 충당하는 방법을 찾아보게 되는데 골드를 충당하는 퀘스트 중 혼자 할 수 있는 컨텐츠가 사실상 에포나와 카오스 던전 밖에 없다. 더 생겼으면 좋겠다. 주간 퀘스트를 골드 충당 수단으로 계속 사용할 거면, 초심자들이 좀 더 쉽게 참여할 수 있고 클리어 가능하도록 했으면 좋겠다. 골드가 모자란 게 그냥 ‘플레이 기획’으로 느껴지기보다 ‘고통’스러웠다. 무척. 이 문제에 대한 해결점은 두 가지가 아닐까? 초보가 골드를 써야 하는 시점에 꼭 그 시점에만 사용할 수 있는 골드를 지급하거나, 초보자들에게 골드를 더 많이 줘서 과소비해도 어느 정도 아이템 레벨 올리는 데에 큰 문제가 없도록 하는 방법. 초보들에게 더 많은 각인을각인과 숙련(게임에 대한 숙련을 말하는 듯) 위주로 레이드가 구성되다 보니, 친구들끼리, 지인들끼리 품앗이 (서로 부캐를 키워주는) 파티를 하는 경우가 많은 듯하다. 특히 각인 작업을 해줘야 하는 경우는 필자처럼 혼자 들어가 파티를 구하는 게 정말 힘들고, 파티 초대를 하면 거절당하다가 가끔 어떤 파티 들어가면 “지인들끼리 하는 파티라 죄송하다”라며 강퇴당하는 경우도 있었다. 물론 착하게 그냥 버스 태워주는 사람들도 있지만, 필자의 경우는 초보 때 이런 부분들 때문에 게임을 하기가 싫어지는 경우가 많았다. 그러니 서버에 몇 이하의 레벨만 있는 초보들을 위해 ‘판매할 수 없는’ 각인으로 해서 많이 얻을 수 있는 수단을 좀 줬으면 좋겠다. 스토리 보스들도 자주 보고 싶음인스턴스 던전으로 스토리 보스 모드가 있었으면 좋겠다. 스토리 진행하다 보면 등장하는 탑을 기어오르는 악마, 드레이크 가룸이나 지그문트 같은 보스들이 굉장히 인상적인데 그러고 없어지는 게 아쉽다. 하드 모드나 헬 모드가 있었으면 싶다. 폭풍사원의 아제나 지키기 같은 던전들이 생겼으면 좋겠다. 크리스탈을 현질하는 퀘스트 필요처음 제련을 하게 만든 후 돈이 모자라면 크리스탈을 구입하는 퀘스트를 주고, 현질을 해야 골드를 살 수 있음을 알려주는 게 어떨까 싶다. 로스트아크에서 가장 괴로운 시점에서 벗어나는 방법은 1302 시점부터 굉장히 천천히 레벨업을 하면서 괴로운 저레벨 시간을 버티거나, 아니면 현질을 해서 단숨에 고렙으로 가거나 하는 거다. 그래서 1302부터는 너무 힘들면 웬만하면 골드 사서 올려야 한다고 뉴비들에게 힌트를 좀 줬으면 싶다. 이 구간이 너무 힘들다고 몇 번을 고객센터에 연락해봤지만 돌아오는 대답은 “불편을 드려 죄송합니다” 였다. 아니… 차라리 “힘들면 현질 하세요”가 낫다. 아니, 아니… 그렇게 하면 너무 놀리는 거 같으면, 현질을 유도하는 매뉴얼 페이지라도 만들어 놓고 링크를 찍어 주는 건 어떨까 싶다. 각성 퀘스트의 괴로움퀘스트를 쭉 따라가다 보면 맞닥뜨리는 「각성」이라는 연계 퀘스트를 하다가 너무 빡쳐서 게임을 포기할뻔했다. 대체 이게 뭔 퀘스트인데 이렇게 긴가 해서 찾아보니 초필살기 같은 스킬 쓰게 해주는 거였다. 굳이 이렇게 구성해야 했나? 스토리 모드를 따라가면서 중간중간 쌓아가는 방식은 안됐던 걸까? 퀘스트에 의미를 부여했으면RPG라서 생기는 단순 반복이 있다. 아마 게임 출시 시점에 컨텐츠가 부족했는지 메인스트림 스토리와 따로 노는 연계퀘스트들이 꽤 있다. 플레이어가 모험의 길을 따라가면서 생기는 연쇄적인 반응들과 퀘스트들인 게 좋을 거 같은데, 어느 순간 ‘내가 지금 무슨 게임을 하고 있지?’ 하고 생각이 들 정도로 메인 스트림 시나리오에서 벗어난 퀘스트들이 꽤… 너무 길게… 많다. 그리고 퀘스트마다 대사가 쓸데없이 많은데, 모니터가 커진 만큼 대사가 아래쪽에 표시되니 읽기가 어렵다. 그리고 대사를 주고받는 과정이 1:1로만 되니 NPC들을 여러 번 클릭하다가 졸기도 한다. 그래서 그런 생각이 든다. “얘네 대사 언제 끝나? 아, 그냥 퀘스트나 줘.” 가끔 막혀서 공략을 찾다 보면 스토리가 맘에 드니 마네 하는 유저들이 많던데, 메인 스트림 시나리오와 퀘스트들 간 중간 연계성이 떨어져서 그런 거 같다. 로스트아크는 아크를 구해서 세계를 구출하는 스토리인데… 고블린을 도와주면 왜 도와줘야 하는지, 그게 세계에 무슨 도움이 되는지 알려줘야 하는데, 그냥 ‘주인공은 착한 사람이라 다 도와줘요’ 정도의 이유밖엔 없다. 사용자 매뉴얼 작성은 운영팀의 기획으로 이루어졌으면고객 센터에 문의하면 돌아오는 거의 대부분의 대답이 “불편을 드려 죄송합니다.” 이다. 그래서 그런지 필자에게 이 게임의 매뉴얼은 운영팀에서 작성하지 않고, 기획팀에서 작성하는 듯했다. 운영팀에서 작성했다면 “매뉴얼의 어디에 가면 이런 내용이 있습니다.” 정도의 답변이 돌아와야 정상일텐다 말이다. 이 게임 처음에 사용자 매뉴얼을 열면 무슨 브리태니커 백과사전처럼 되어 있어서 너무 눈에 안 들어오는 점도 신규 플레이어에게 게임의 진입 난이도를 높이는 점 중 하나라 본다. 그래서 사용자 매뉴얼의 기획 및 작성, 관리 전략 등은 운영팀에게 일임했으면 한다. 이게 무슨 소리냐면, 분명히 운영팀은 무시무시한 숫자의 VOC(Voice Of Customer)를 받고 있을 거고, 어느 회사에서나 그렇듯 운영팀은 VOC를 저감하기 위한 여러 가지 노력을 할 텐데 그 노력이 사용자 매뉴얼에서 전혀 느껴지지 않는다. 매뉴얼 작성의 권한을 운영팀으로 넘겨서, 사용자들의 잦은 질문을 매뉴얼로 해결하게 만들던가, 아니면 현재 백과사전식 매뉴얼과 고객 대응 운영용 매뉴얼을 분리하는 게 어떨까 싶다. 매뉴얼을 보지 않고도 게임을 진행할 수 있는 게 최고겠지만, 로스트아크는 게임 내에서만 사용하는 용어와 개념이 너무 많다. 그래서 매뉴얼을 참고하거나, 인터넷에서 게임의 컨텐츠에 대한 힌트를 검색해서 게임을 진행해야 하므로, 사용자 매뉴얼이 VOC 저감 정책의 일환으로 개편되었으면 싶다. 사실 필자가 게임 초반에 필요한 내용은 초보 매뉴얼이었다. 현질을 해야 하면 뭘 해야 하는지… 초보 때는 어떻게 해야 하는지… 같은 내용들. 참고로, 초보들에게 각인 개념은 꽤 어렵다. 카오스 던전을 조금 더 쉽게 혹은 재밋게 슈테른을 지나다 보면 레벨 50이 되면서 여러 던전들이 열리는데, 초보자들에게는 그런 던전들이 왜 열리는지 명확히 이해하기 어려워 굉장히 뜬금없는 느낌이 있다. 던전들이 열리기 전에 카오스 던전으로 먼저 안내해서 해당 던전들의 입장권을 나눠주는 방식이면 어떨까 싶었다. 또, 카오스 던전은 게임을 처음 시작한 초보들이 “스스로 할 수 있는” 유일한 던전인데, 너무 늦게 열린다. 다른 던전들은 베른 전에 열린다는 걸 감안하면 뭔가 카오스 던전이 베른 이후 열리다 보니 열리는 순서가 맞지 않는 느낌이었다. 카오스 던전에 숙련도가 있으면 어떨까 생각했다. 특정 단계의 카오스 던전을 많이 돌면 그 단계에서는 크리티컬 데미지가 더 잘 터진다던가, 스킬이 더 빨리 재사용 가능하게 된다거나 하는 식으로 해서 카오스 던전 자체가 더 쉽고 빨라졌으면 좋겠다. 특히 카오스 던전은 1대 다수(혹은 4인 파티)로 다수의 적을 쓸어버리는 무쌍 형식으로 진행되니 숙련도를 쌓아 속 시원~~~하게 전투가 진행되면 더 재밌어지지 않을까? 그리고 카던의 기본 성격은 “무쌍찍기” 쪽에 가까우니, 더 빠른 속도로 더 빠르게 몬스터들이 나왔으면 싶다. 서버가 버티는 한 속도를 좀 올렸으면 싶다. 카오스 던전은 캐릭터가 저 레벨일 때는 스토리를 따라가는 캐릭터들이 인스턴스 던전에서 얻지 못한 좋은 장비를 얻는 장소가 되었으면 싶고, 1302처럼 중 레벨에서는 제련 장비를 모으는 곳이 되었으면 싶고, 1385 넘으면 트라이포드 재료 모으는 장소였음 싶다. 레벨 별로 필요한 아이템이 다르니 ‘매일 해야만 하는’ 던전에서 이를 수급할 수 있었으면 좋겠다. 카오스 던전을 돌고 나서 버리는 아이템들이 없도록. 카오스 던전은 매일 해야 하는 던전이니 “카던은 이런 곳이다”라는 정체성을 강조하기보다 각 레벨에 맞는 이득을 분배해 주는 곳으로 쓰이는 게 낫지 않을까? 카던(카오스 던전)에는 ‘밸런스 QA’의 향기가 많이 느껴진다. + 뭔가 많이 주는데 이상하게 보상이 적다는 느낌이다. 왜인지 모르겠다. “기획이 의도한 대로 플레이”하도록 장치한 건 나쁘지 않다. 다만, “의도한 대로’만’ 플레이해야만 함”이 반복되면 재미가 있을까? 게임은 랜덤이 제맛인데… 가끔 보스 방이나 골드 방이 나타나는 거처럼 의도하지 않은 이득이 더 있으면 좋을 듯하다. 카오스 던전의 보상치 자체를 어느 정도 range 내의 random으로 해서 가끔씩 말도 안 되는 수준의 경험치 폭탄이 터지거나, 다음 레벨의 카던에서 얻을 수 있는 장비를 준다거나 하는 식으로 해서 “지나치게 의도된 형식”을 좀 벗어나야 하지 않나 싶다. 그 외 있으면 좋을 거 같은 내용들 동물한테 말을 가르치는 등 B급 감성의 에포나들을 하면서 너무 즐거웠다. 판타지 세계를 더 느낄 수 있도록 B급 감성의 던전들도 생기면 좋을 듯하다. 오디오 끄기 옵션에 화면에 오디오 켜기 바로가기 아이콘 생성 기능이 있었으면 좋겠다. 반복적인 전투 소리 듣기 싫어서 유튜브에서 음악 틀어놓고 듣다가 파푸니카를 클리어했는데, 오디오가 꺼진 상태라서 그 수 많은 인원이 벙긋벙긋 립싱크하며 덩실덩실 춤을 추고 있었… 춤 종류가 더 늘었으면 좋겠다. 단체 댄스 넘나 좋음. (애니메이션팀, ㅈㅅ) 영지 무역 상인 근처에도 꾸밀 수 있었으면 좋겠다. 시장처럼 해 놓고 싶다. 전투 이펙트는 조금 더 절제해도 좋을 듯 하다. 전투 이펙트가 과도하다는 걸 개발팀 내에서 느낄 수 있는 단편적 정보는 ‘테스터들이 테스트 하다가 조는가?’로 내부에서도 쉽게 알아차릴 수 있다. 뇌에 과도하게 번쩍거림이 전달되면 뇌는 쉬고 싶어하니까. 저렙 던전 개선 방안이 필요하다. 특히 해적선이나, 저렙 카오스 던전에는 플레이어가 없다. 클리어할 수 있게 NPC라도 합류해줬으면… 싶다. 음식 버프처럼 음악 버프가 있었으면 좋겠다. 베른의 연주자가 6시간에 한 번 연주를 하는데 들으면 항해 속도가 1% 빨라진다던가 하는 식으로… 그러면 특정 NPC 앞으로 사람들이 모이고, 또 거기에서부터 MMO의 특징을 살려 다른 컨텐츠를 만들 수 있지 않을까? 전투 시 획득 아이템 표시를 꼭 캐릭터 바로 옆에 해야 할까? 카오스 던전처럼 템이 쏟아지는 전투 중에는 굉장히 거슬린다. 위치를 변경하거나 끌 수 있었으면 좋겠다. 끝…","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"게임","slug":"소프트웨어/게임","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EA%B2%8C%EC%9E%84/"}],"tags":[{"name":"게임","slug":"게임","permalink":"https://xeppetto.github.io/tags/%EA%B2%8C%EC%9E%84/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"놀자","slug":"놀자","permalink":"https://xeppetto.github.io/tags/%EB%86%80%EC%9E%90/"},{"name":"즐기자","slug":"즐기자","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B8%B0%EC%9E%90/"},{"name":"재밋다","slug":"재밋다","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EB%8B%A4/"},{"name":"매뉴얼","slug":"매뉴얼","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EB%89%B4%EC%96%BC/"},{"name":"안내서","slug":"안내서","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EB%82%B4%EC%84%9C/"}]},{"title":"[Games] 4편. 로스트아크를 하며 내가 느낀점","slug":"소프트웨어/Games/04-Lostark를-하며-느낀점","date":"2022-04-09T07:09:00.000Z","updated":"2022-04-09T07:09:00.000Z","comments":true,"path":"소프트웨어/Games/04-Lostark를-하며-느낀점/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Games/04-Lostark%EB%A5%BC-%ED%95%98%EB%A9%B0-%EB%8A%90%EB%82%80%EC%A0%90/","excerpt":"","text":"목차 게임 잘 모르는 개인적 의견임을 피력 지양할 부분 이 게임을 할까 말까 고민하고 있는 사람들을 위한 전반적 감상 난 이 게임을 왜 하게 되었는가 일단 게임을 시작해보았는데 장점이 참 많은 게임 밸런스가 꽤 잘 맞춰져 있는 게임 21세기 해 본 게임 중 가장 채팅창이 깨끗한 게임 충격과 공포의 301 퀘스트 로스트아크는 배럭 키우기 게임 처음 하는 사람에게는 너무 괴로운 구간 존재 고인물 플레이어들이 하는 조언 중 몇 가지는 들을 필요가 없다 우유는 꾸준히 마셔야 키가 큰다 판타지스러움은 어쩌면 B급 개그에서 나오는 걸지도 보스 레이드는 꽤 어려움 게임 잘 모르는 개인적 의견임을 피력몇 년 전 개인 블로그에서 게임 카테고리의 모든 글을 비공개로 돌리면서 게임 비평이나 소감문은 안 하려고 했었는데… 왜인지 로스트아크는 플레이하면서 뭔가 계속 메모하고 있는 자신을 발견했다. 문득 스스로 ‘나 이런 걸 왜 적고 있지?’하고 생각하곤 노트들을 전부 지워버릴까 하다가, 적어 놓은 거 아까워서 게임 리뷰하지 않겠다는 자신과의 약속을 깨고 굳이 게임에 대한 감상을 적기 시작했다. 본 포스팅은 정말 속 좁고 아는 거 없는 어느 게이머의 개인적인 의견이므로, 혹시라도 개발팀의 누군가가 본다면 상처받지 마시라고 미리 말씀드리고 싶다. 그리고, 앞으로 다른 게임을 이렇게 리뷰할지는 모르겠다. 게임 카테고리에는 로스트아크만 떨렁 있을지도 모르겠다. 최근 한국의 모바일 게임들의 게임성은 필자의 성향에는 잘 맞지 않아서 그렇다. 뭐, 또, 나중에라도 필자의 마음이 바뀐다면 어찌 될지 모르지만… 글에서 지양할 부분로스트아크의 캐릭터 밸런스나 시나리오에 대한 비판이 있는 건 알고 있다. 필자는 이 게임에서 캐릭터 밸런스나 시나리오의 게임성과 관련된 부분은 가급적 언급하지 않으려 한다. 게임이란 건 영화가 아니다. 소설도 아니고. 인지심리학적으로 해석하면 컴퓨터 게임은 ‘놀이’의 확장선에 있는 인간 인지와 사고에 기반한 ‘욕구 충족의 행위’일 뿐이다. 그러니 만든 사람들이 어떤 의도로 만들었든, 혹은 어떤 의도가 없이 만들었던 상관이 없다. 그냥 ‘내가 해서 재밌으면 재밌는 게임’인 거다. 그래서 필자는 그냥 내가 해서 재밌으면 재밌는 거고, 그 재미 안에서 불균형, 불공평한 그것들조차 그냥 게임의 일부로 받아들이고 싶기 때문이다. 만약 누군가 로스트아크의 게임 내 밸런스 문제에 대해 공감을 얻고자 필자의 글을 찾아왔다면, 먼저 그런 부분에 있어 공감하실만한 내용은 없다고 먼저 말씀드린다. 그리고 그런 분은 혹시 본인께서는 이 게임을 너무 좋아해서 그런 불만이 있는 게 아닐까 고민해 보시면 좋을 거 같다. 재미없는 게임은 밸런스가 맞든 안 맞든 아예 관심 없는 게 정상이기 때문이다. 이 게임을 할까 말까 고민하고 있는 사람들을 위한 전반적 감상앞서 초보들을 위한 가이드 1편, 가이드 2편, 가이드 3편에서 설명했지만, 그 글들은 필자가 할 수 있는 최대한 감정을 빼고 설명하려 했다. 이번엔 필자의 개인적인 감정과 감상을 가득 실어 이야기를 해 볼까 한다. 만약 이 글을 읽고 있는 당신이 MMO 계열의 RPG를 좋아한다면 로스트아크는 한 번 쯤 즐기려 도전해 볼 가치가 있는 게임이라 추천하고 싶다. 물론 한국식 MMO 문법과는 조금 다른 방식을 취하고 있어 처음엔 게임이 많이 어렵다고 느껴질 수 있다. 이 게임은 “새로운 방식”의 재미를 제공하고 있으나, 그 기반은 철저하게 MMO(Masive Multi-player Online)에 기반한다. MMO 방식의 게임은 누가 뭐라든 「다른 사용자들과의 교류」가 그 게임이 가진 재미의 일부분이다. 다른 플레이어와의 상호작용이 그 게임의 게임성 상당 부분을 차지하게 되는게 MMO 방식 게임의 특징이다. 그 동안 많은 게임들이 MMO라는 타이틀을 달고 출시되었지만, 사용자 교류를 무시하고 ‘대단한 그래픽, 스타일리시한 액션, 대하서사 드라마 같은 스토리’ 같은 것들에 치중하다가 수 많은 게임들이 사라졌다. 로스트아크는 철저히 ‘MMO라는 문법’, 즉, 사용자의 교류에 촛점을 둔 게임이다. (물론 그래서 생기는 여러 가지 게임이 어렵다고 느껴지거나, 좀 느리다는 느낌의 지루함이 발생하기도 한다.) 이 게임에는 수많은 장점이 있지만, 그중에 가장 인상적인 장점을 딱 하나만 따지라면 「게임 내 연출」이다. 게임 내에서 엔진만으로 구현해낸 연출이 정말 너무 멋지다. 이 게임에 대한 안 좋은 평을 들은 사람이라도, 하루 이틀 정도만 투자하면 “영광의 벽” 이벤트를 볼 수 있으니 한 번 경험해 보기를 추천한다. 이 게임의 시나리오를 따라가다 보면 여러 가지 연출들이 발생하는데 이를 보고 있으면 개발팀이 정말 재밌는 게임을 만들려고 최선을 다했음이 느껴진다. 정말 인-게임 연출에서 개발팀 전체 인원들의 피땀눈물이 느껴진다. (킁킁, 땀 냄새…) 그런 구간이 정말 많다. 필자가 추천하는 로스트아크의 두 번째 장점은 바로 이 게임의 단점이기도 하다. 위에서 언급했듯이 근본적으로 이 게임이 다른 한국 게임들보다 필자의 관심을 끌고 잡은 부분은 이 게임의 게임성인 「MMO 문법의 부각」이다. 로스트아크에는 의도적으로 플레이어들이 모이게 만드는 퀘스트들, 이벤트들을 만들어 두었고, 플레이어들은 해당 내용을 진행하려 자연스럽게 전체 세계의 어딘가에 삼삼오오 모여든다. 그리고 서로 채팅하고, 다른 사람의 아이템을 보고, 이모티콘을 날려가며 북적거리고 부산스러운 광경을 연출한다. MMO라는 범주의 게임은 이래야 한다. MMO는 ‘많은 사람이 모여 플레이한다’라는 가치를 전달해야 한다. 그 관점에서 로스트아크는 아주 높은 가치를 사용자들에게 전달한다. 자, 세상 어떤 게임이든 게임을 하다 보면 그 게임에 아쉬운 점들이 많이 생기기 마련이니 다양한 단점들은 직접 느껴보도록 이 매뉴얼을 읽은 후 게임을 진행하시는 분들께 양보하고… 이 게임의 단 하나의 단점을 지적하자면, 바로 MMO를 강조하다 보니 해결이 불가능한 정도로 「고인물 게임」이 되었다는 점이다. 이 게임은 「새로운 한국식 MMO의 문법」을 보여주고 있다. 그리고 또한 MMO 게임이 가져야 할 게임성의 가치를 잘 보여주고 있다. 그런데 게임의 상당히 많은 컨텐츠가 협동&#x2F;파티 컨텐츠들인데 낮은 레벨 던전에 사람이 없다. 그래서 신규 유저들은 주어진 시나리오를 따라가는 것 외에 딱히 즐길 컨텐츠가 없다. 그리고 어느 순간이 되면 아이템 강화를 이용해서 다음 컨텐츠로 이동해야 하는데, 이 과정에서 신규 유저들은 (파티에 잘 낄 수가 없다 보니) 상당히 고통스러움을 느끼게 된다. 아마 실제로 이 게임에 지금도 과금하는 사용자들 대부분이 고인물 사용자들일 거라 생각된다. 그래서인지, 컨텐츠들이 워낙 고인물 유저들 위주로 기획되어 있다 보니 낮은 레벨 신규 유저들이 즐기면서 발붙이기 어려운 현상이 나타난다. 이 게임을 단 한마디로 요약하자면 이렇다. 「사람들도 많이 북적거리고, 단골도 많은 걸 보니 분명히 맛집인 거 같은데… 뭔가 모르게 친절하지 않다. (딱히 불친절하지도 않다.)」 그래, 그런 느낌이다. 시스템이 잘 되어 있긴 한데, 그것만으로 신규 유저가 게임을 파악해 나아가기가 쉽지 않다. 그러면 시나리오를 진행하면서 전체 기능을 이해하고, 게임에 꼭 필요한 제련 확률 향상 아이템 등은 가이드를 통해 알아갈 수 있어야 하는데 그렇지 못하다. 아마 기획팀의 의도는 ‘플레이어가 게임 내를 탐험하듯이 하나하나 찾아가며 배워 나가는 것의 즐거움’에 방점을 둔 모양인데… 정작 신규 플레이어들은 파티 거부를 당하면서 자신이 무엇을 잘못하고 있는지 알려주는 사람도, 파티에 끼어들 방법도 없어 답답하다. 레벨이 낮은 플레이어를 파티에 받아 주지 않는 게 게임의 일부라고 생각한다면, 로스트아크 기획자는 큰 소리로 다음을 읽었으면 좋겠다. “레벨이 낮아서 게임을 못 하는 것도 게임의 일부이니, 레벨이 낮으면 현질을 하던가, 게임이 재미없어도 참던가 해라.” 이게 큰 문제가 아니라고 생각한다면, 그건 게임 기획자로서 직업관의 문제라고 짚어주고 싶다. 아니면 그런 사람은 이미 게임에 대한 순수한 마음을 잃어버린 건 아닐까? (물론 필자에게는 쓸모 없는 논쟁이므로 굳이 싸우고 싶진 않다. 그리고 필자는 이미 이 게임을 그만 두었다.) 로스트아크는 ‘재미’를 강조하기 위해 ‘현질 요소’를 다른 게임에 비해 줄였고, 그게 “2021년 크리스마스의 기적”이 되었다. 그리고 그에 감흥을 느낀 플레이어들은 아바타(스킨)를 구입해 개발사에 힘을 보태는 걸로 보인다. 그런데 게임이 즐겁고 내 캐릭터에 정이 생겨야 아바타 상품을 살 텐데… 레벨이 낮다고 파티 거절당하는 게 일상다반사인 신규 유저들에게 로스트아크의 파티 시스템, 레이드 시스템은 정말 가혹하게 느껴질 수 밖에 없다. 필자는 “기왕 이렇게 많이 메모해 둔 거, 초보 매뉴얼 쓸 만큼 되면 그만둬야지” 하고 이 악물고 버티다가 1375 넘기고 아르고스 가게 되니 할만하더라. 레이드가 재밌어서? 아니다. No, No. 이제 골드 수급이 좀 되니까 숨 쉴 수 있겠기에. 그리고 파티에 끼워주기에. 로스트아크는 신규 유저들을 위해 “제련에만 쓸 수 있는 토큰”을 빨리 개발해야 할 걸로 보인다. 1302에서 1375 구간에서는 정말… 눈앞에 로스트아크 PD와 기획자가 있으면 짜증 날 때마다 몇 대 때리고 싶은 정도로 괴로운 구간이었다. 힘든 기억도 많은 게임이지만, 그럼에도 불구하고 너무 많은 장점을 가지고 있는 게임이다. MMO를 좋아하고, RPG를 좋아하는 플레이어라면 로스트아크는 꼭 한 번 해보기를 추천하고 싶은 게임이다. 난 이 게임을 왜 하게 되었는가필자는 커뮤니티를 공부하듯이 눈팅하지만 끼어들어 댓글 놀이를 많이 하지는 않는다. 어느 순간부터 커뮤니티의 용어들이 회사 내에서도 만연하는 걸 보고 팀원들과의 소통을 위해 커뮤니티들을 공부하듯이 들여다보게 되었다. 그런 커뮤니티들에서 「빛강선」이라는 키워드가 나타나기 시작했고, 필자 역시 커리어 내에 게임 회사가 몇 차례 있다 보니 호기심이 동해 ‘한번 해 보자’ 싶어 게임을 시작하게 되었다. 이 게임의 입소문은 다른 한국 게임들에 비해 현질 유도가 적다는 점, 그리고 게임 혹은 회사에 이벤트가 있을 때마다 「빛강선」이라 호칭되는 프로듀서가 게임 내 현금성 아이템들을 무료로 플레이어들에게 대거 풀어서 게임 내 캐릭터들의 코스튬(스킨)이 전부 다르게 생겼다는 점 등이다. 근데 사실 현질 유도가 ‘다른 한국 게임에 비해’ 적은 것뿐, 사실상 게임을 시작하는 초심자들은 현질을 한 50만원어치 하지 않으면 게임 후반부의 컨텐츠를 즐기는 게 불가능해 보였다. 게임의 전반부 시나리오들이 꽤 할만하므로, 무과금으로 시나리오만 즐기는 방법도 강력히 추천. 일단 게임을 시작해보았는데‘어라? 카탄이라는 서버에 캐릭이 있네? 내가 이 게임을 했었다고??’ 들어가 보니 캐릭터 이름이 내가 평소 게임들에 짓는 이름이 아니다. 아마 어느 시절 감명 깊게 본 책이나 다큐멘터리에서 영감을 받은 모양이다. 근데 기억이 안 난다. 정말 오래전 일이라는 소리. 슬슬 불안해지기 시작했다. 뭣 때문에 게임을 지웠을까 싶어서… 캐릭터를 선택하고 게임에 들어가 보니 ‘레온하트’라는 마을에 서 있었다. 게임을 일주일쯤 게임을 하고서야 알았는데, 이 마을은 정말 튜토리얼 끝나면 나오는 첫 번째 마을이다. ‘여기서 접은 이유가 뭘까…’ 를 고민했지만 3분 만에 깨달았다. 필자가 한국 게임의 기획 중에 정말 이해가 안 되는 게 있는데, “누가 XXX 강화에 성공했습니다” 를 전체 공지로 화면 한가운데 떡 하니 보내주는 거. 필자는 정말 그 시스템이 이해가 안 된다. 필자는 게임 전문 기획자가 아니다. 그러니 당연히 전문 기획 잘하시는 분들께서 알아서 매출에 도움이 되는 컨텐츠들을 잘 선정해서 넣은 기능일 것이다. 근데 정말 정말 묻고 싶다. 아니… 나… 레벨 1이라고. 누가 20레벨 강화를 했던 말던 그게 내가 지금 플레이하고 있는 레벨 1 캐릭터의 게임 플레이에 무슨 재미를 전달하고 있느냐고… 진짜 기획 팀장한테 심각하게 물어보고 싶다. 대체 왜?? 저 강화 성공 메시지가 한참 게임의 그래픽을 감상하고 있을 때 나타나면 그래픽을 감상할 수도 없고, 보스 전에 집중하고 있는데 나타나면 보스 전도 집중할 수 없다. 아이템 옵션을 읽고 있는데 나타나면 정말… 그야말로 단전 깊은 곳에서부터 ‘빡’이라는 놈이 ‘쳐’ 올라온다. 굳이 게임 업계의 누군가가 도와달라 부르지 않는 이상에야… 앞으로는 게임 업계에서 일 할 경우는 없겠지 싶다. 필자는 게임 쪽에서 더 이상 일을 하지 않을 것이니 플레이어 입장에서 당당히 말할 수 있는데 ‘누군가의 템 강화를 공지하는 것’이 게임 내에서 무슨 게임성을 주는지 전혀 이해를 못 하겠다. 필자가 제안하자면, 저런 방식의 공지를 굳이 보여줘야 한다면 ‘뉴비들에게는 불필요한’ 기능이므로 만렙 찍고 나서부터 보여줘도 괜찮지 않을까? 그리고, 사실 저 「강화 성공 공지」라는 거에 대한 토론을 하면 다들 매출에 도움이 된다고들 말들은 하는데, 실제로 발표된 데이터를 보여달라고 하면 단 한 건도 검색되지 않는 이상한 컨텐츠다. 「강화 성공 공지를 뺐을 때와 넣었을 때의 매출 차이에 대한 데이터」를 누군가 가지고 있다면 좀 알려주셨으면 좋겠다. ‘게이머의 가슴’으로는 너무 싫은 컨텐츠지만 ‘직업인으로서의 머리’로라도 이해해 보고 싶다. 장점이 참 많은 게임필자는 그렇게 생각한다. 사람도, 게임도 무조건 단점보다는 장점을 부각하는 게 맞다. 단점을 상쇄하려 노력을 들이는 시간보다 장점을 부각하여 어필하는 게 훨씬 효율적이라 생각한다. 로스크아크를 플레이하면서 안타까웠던 점은 이 게임 자체가 가진 장점들이 무지하게 많은데도 불구하고 뭔가 부족한 단점을 상쇄시키려 다른 게임의 장점을 따라 하기 위해 무지막지하게 개발팀을 갈아 넣었구나 싶은 느낌을 받을 때였다. 한 명의 게이머로서 필자가 받은 느낌으로 로스트아크는 “기본기가 참 잘되어 있는 게임”이라는 점이다. 로스트아크 같은 게임을 보고 우리는 MMORPG라고 한다. 여기에서 MMO는 Massive Multiplayer Online이다. 한국말로 어렵게 무슨… ‘다중 플레이어 접속’… 뭐 이러는데… 그냥 쉽게 말해서 ‘열라 많은 사람이 같은 맵에서 뛰어논다.’ ‘ 라는 소리다. MMO를 장르로 보지 않고 ‘종류’로 보는 관점이 많다. 필자도 예전에 게임회사에서 일했었지만 필자가 예전에 참여했던 게임들도 그렇고 MMO를 만들다 보면 서버 기술과 네트워크 한계로 Multiplayer라는 항목을 종종 잊고 개발하기도 한다. 필자가 늘 주장하던 바로 ‘MMO라는 장르에서의 주 게임성 중 하나는 바로 「플레이어」’이다. 다른 플레이어와 상호작용이 없는 게임은 그냥 Online 게임이지, 앞에 MM을 붙일 자격이 없다고 생각한다. 그 점에서 로스트아크의 시스템은 정말 잘 만들었다. 때가 되면 어느 NPC 앞에 삼삼오오 모여드는 유저들. 특정 시점이 되면 바다 한 가운에 배를 타고 와 북적이며 떠드는 유저들. 어떤 시간이 되면 맵의 어느 공간에 와서 미친 폭주족 바이크를 몰며, 춤을 추며 필드 보스를 기다리는 플레이어들. 그런게 일상인 게임이 로스트아크다. 그리고 그게 바로 MMO라는 게임인 거다. 이 지점이 바로 (필자가 느낀) 로스트아크의 최대 장점이다. 그러니… 첫째, 이런 점들을 더 부각시키고, 그 지점에서 더 재미를 올릴 수 있는 요소들을 찾았으면 좋겠다. 특히 뉴비들과 고인물들이 상호작용할 수 있는 컨텐츠들로. 로스트아크는 게임의 연출이 메가톤급이다. 이 게임은 플레이하면서 느낄 수 있는 모든 단점을 이 미친 연출력으로 덮어 버린다. 이 미쳐버린 연출력이 스토리모드를 따라가는 내내 나온다면, 블리자드 싸대기를 몇 번은 내려칠 게임이 되었을 거 같다. 스토리 초반에는 정말 블리자드 할아버지 싸다구를 양쪽 다 때리겠다 싶을 정도의 인-게임 연출이 느껴졌다. ‘내가 여지껏 이런 게임을 몰랐다고?’ 싶은 생각이 들었을 정도로. 근데 그게 중간에 갑자기 끊겨버리고, 그냥 흔한 ‘길 따라가면 퀘스트 나오고, 전투 좀 하시고, 돌아오면 보상 나와요’ 방식의 한국 게임이 되어 있다. 블리자드 할아버지가 다시 개발팀의 싸다구를 때릴 것만 같다. 그러니… 둘째, 로스트아크는 일단 해외 진출하기 전에 전체 스토리 라인에서 연출을 극대화해야 할 거 같다. 그게 ‘로스트아크’라는 게임의 근본적 정체성 중 하나로 보이니까. 로스트아크는 엔진 팀과 그래픽아트 팀이 미쳤구나 싶은 정도로 최적화된 맵과 세세한 묘사가 있다. ‘내가 이 엔진을 이렇게 잘 쓴다’라고 말하고 싶은 것인지… 거기 그래픽 팀에 친구가 있더면 ‘왜? 굳이 이렇게까지 그려야 했어?’라고 물어보고 싶은 정도로 구석구석 참 많이도 그려놨더라. 게이머들은 맵이 한 번 그려지만 잘 안 고쳐지는지 알지만… 개발해본 사람들은 안다. 계속 고친다. 근데 대체 왜인지, 왜 그렇게까지 세세하게 구석구석 이런저런 장치들을 그려놓은 건지 이 글을 쓰는 지금도 궁금해 죽겠다. 그리고 좀 시절이 지난 게임이라 그런지, 게임 엔진도 굉장히 안정적으로 느껴졌다. 그러니… 셋째, (화면 중간에 뜨는 이상한 아이템 강화 공지 좀 없애고) 그래픽을 더 감상할 수 있게… 로스트아크 유저들이 지금 ‘판타지 세계에 들어왔음’을 느낄 수 있게 더 지형의 그래픽 효과들을 더, 더, 더~~~ 강화했으면 좋겠다. 넷째, 성우 녹음이 미쳤다. ‘아니, 이 대사를 이 경우에 한 번 쓸려고 녹음했다고?’라는 생각이 들 정도로 플레이어가 지나가는 길에 있는 NPC들이 미친 대사들과 드립들을 계속 친다. 이건 진짜 더할 나위 없이 좋은 시도라 생각한다. 정말 개발팀 칭찬합니다~ &#x2F;박수 &#x2F;환호 &#x2F;춤 &#x2F;용기의노래 다섯째, PC 게임이라는 특성. 모바일로 넘어가지 않고 PC에 남았기 때문에 할 수 있는 여러 가지 단축키, 플레이어의 특수 행동, 게임 플레이 시 조작의 재미 등이 오히려 모바일 시대가 시작되고 10여 년이 지난 지금 로스트아크를 굉장히 특별하게 만드는 거 같다. 단순히 클릭 몇 번 하고 전투를 구경하고 있는 시대에 오히려 조작의 재미를 주는 게 장점이 된 느낌이다. 그러니 오히려 이 점을 살려 전투 시 조작을 강화하고, 조이스틱도 지원하는 등 여러 가지 전투 조작성을 올렸으면 싶다. 여섯 째, BGM(Back Ground Music)으로 선곡된 노래들이 고퀄이다. 일곱 째, 모바일 게임과 PC 게임의 장점들을 받아들여 잘 녹여낸 게임 플레이, 특히 전투 플레이는 상당히 인상적이다. 밸런스가 꽤 잘 맞춰져 있는 게임필자는 게임 회사에 ‘밸런스팀’이 존재하는 걸 썩 좋아하지 않는다. 아니, 정확히는 ‘않았다’라고 해야 할 거 같다. 그리고 이게 로스트아크를 하면서 처음으로 깨졌다. 이 게임은 밸런스팀이 존재할 거 같고, 없다면 반드시 필요할 거 같다. 로스트아크를 하기 전 필자가 가진 철학에서는 첫째, 게임 스토리의 밸런스는 기획에서 잡는 것이라 생각한다. 필자는 게임의 모든 걸 수치화해서 게임의 밸런스를 맞추겠다고 게임 플레이 시간을 의도적으로 늘리는 걸 별로 좋아하지 않는다. 스토리의 깊이나 배경은 플레이어가 플레이 내에서 점진적으로 경험하면서 커지는 방식이 가장 무난하다고 생각한다. 마치 어린아이가 어릴 때는 세상의 모든 게 자기 집, 동네 정도인지 알다가 어느 순간 국가의 크기를 알고, 지구의 크기를 발견하고, 우주의 크기를 깨달아 가듯이 그렇게 인식이 천천히 확장되어 가는 게 가장 좋다고 생각했다. 로스트아크는 그런 점에서 루테란 동부에서의 시나리오 짜임새가 매우 잘 짜여 있어 밸런스가 잘 맞춰져 있는 느낌을 받았다. 둘째, 필자는 타격감을 위해 과도한 이펙트나 숫자가 팡팡 터지고, 모든 걸 수치로 계산하는 걸 극도로 혐오한다. 필자에게 게임의 밸런스는 (이펙트가 아니라) 애니메이션의 프레임으로 잡는 것이라 생각한다. 게임의 타격감은 애니메이션이 70%, 게임 플레이 구조가 20%, 데이터 밸런스가 10%라 생각한다. 전투 이펙트가 너무 많으면 두뇌가 피로하다. 그런 게임을 해 본 사람들은 이해할 텐데, 전투 이펙트가 너무 많으면 쉽게 졸리다. 이펙트는 필요한 만큼, 전투에 집중할 만큼만 발생해야 하고, 이펙트 발생 후 타격이 끝나면 사라져야 한다. 하지만 강한 타격감은 프레임의 지연과 단축으로 줄 수 있다. 예를 들어, 스타크래프트 저글링이 전투 시 보이는 타격 애니메이션의 프레임이 매우 높았다면 게임은 굉장히 지루했을 거다. (스타2가 뭔가 모르게 더 느린 듯한 느낌을 주는 이유.) 로스트아크는 몬스터의 피격 애니메이션의 프레임을 극단적으로 끊어두어서 1대 다수의 전투로 무쌍을 찍을 때 스킬의 타격감, 스킬을 맞아주는 몬스터의 피격감이 좋다. 셋째, 전투의 밸런스는 굳이 게임을 플레이해 보지 않아도 데이터 분석만으로 충분히 잡을 수 있어야 하고, 개발 단계에서 자동화할 수 있어야 한다고 생각한다. 그걸 다 플레이해 보는 건 컨텐츠를 처음 만들었을 때 플레이 타임을 재는 수준으로 충분하지, 그걸 테스터가 일일이 때려보면서 데이터를 실측하는 건 바보 같다고 생각한다. 로스트아크는 무쌍(1대 다수의) 게임 플레이와 보스전 게임 플레이의 밸런스가 다르게 구성되어 있다. 무쌍 플레이는 생각 없이 스킬을 난사하며 스트레스 풀듯이 진행하는 방식이고, 보스전 플레이는 보스의 특정 행위에 반응하여 민첩하게 플레이하지 않으면 전멸당하는 방식으로 구성되어 있다. 점점 난이도가 높아지는 보스전 때문에 플레이어들의 원성도 있지만, 잘 구성된 게임으로 느껴졌다. 21세기 해 본 게임 중 가장 채팅창이 깨끗한 게임채팅창이 꽤 깨끗하다. 그리고 플레이어들의 연령층이 대충 느껴지는 아재 개그들이 남발되곤 한다. 게임 플레이 내에 다른 플레이어들에게 기댈만한 거리가 없어서 그런 듯하다. 그러니 그냥 좋은 마음으로 떠드는거지. 대부분 기대야 하는 건 지인들이나 길드원들이다 보니, 전체 채팅창 자체는 (가끔 무쓸모 논쟁이 벌어지기는 하지만) 깨끗하다. 그런데 고렙들 노는 곳까지 도달하면 역시나 인성 쓰레기들이 있긴 하다. 누군가가 초보라고 판단하면 욕박고 나가버리는… 충격과 공포의 301 퀘스트로스트아크는 악마 집단이 (약간은 모자란 듯한) 인간 집단을 공격하고, 이를 막아내는 용사의 스토리로 진행된다. 그래서 주인공 캐릭터는 시나리오 내내 실컷 정의의 용사인 척 폼잡고 악마들을 때려잡고 다니게 된다. 근데, 게임 중반 플레이어의 선택에 따라 진행가능한 301 퀘스트는 조금 충격이다. 301 퀘스트는 이 게임의 별미 같다. 매운 떡볶이 먹고 나서 먹는 아이스크림 같은 느낌의 퀘스트랄까. 뭔가 좀 깨는 맛이 있는데, 이 퀘스트를 하고 나면 좀 더 게임을 게임처럼 보게 된다. 꼭 진행해 보기를 추천. 로스트아크는 배럭 키우기 게임로스트아크는 캐릭터를 키울 수 있는 한계점이 기획적으로 지정되어 있는 게임이다. 게임 기획자의 의미는 아마도 “게임 좀 천천히 즐기시고, 서브 캐릭들도 좀 키우세요. 우리가 준비한 여러 가지 게임 요소를 두루두루 즐겨주세요”라고 말하는 듯하다. 근데 좀 인상 쓰면서, 어금니 꽉 깨물고, 주먹 쥐고, 무서운 표정으로… 왜 그런 느낌이냐면, 그렇게 해야만 하는 게임이니까. 안 할 수 있는 선택이 없다고 봐야 하니까. 로스트아크에서 서브 캐릭터, 부-캐를 키우는 행위를 ‘배럭’이라고 한다. 스타크래프트에서 마린 뽑는 그 배럭(Barracks)를 의미하는 듯하다. 로스트아크에서 배럭의 의미는 다음의 몇 가지를 전제로 한다. 플레이어가 하나의 서버 내에서 키우는 모든 캐릭터는 속성을 공유한다. (스킬, 퀘스트 진행 현황 등) 그러므로, 플레이어의 캐릭터 중 하나만 잘 키우면 나머지 캐릭터들은 그에 따른 도움을 받는다. 캐릭터마다 일정 주기마다 수급할 수 있는 골드량에 한계가 있다. 위와 같은 내용들을 전제로 하기 때문에, 로스트아크의 시나리오를 어느 정도 진행하고 나면 골드 수급이 너무 모자라게 되는데, 이때 배럭을 빠르게 렙업시켜 골드 수급을 원활히 해야 한다. 배럭들도 가능한 ‘점핑권’이라는 현질템을 사서 ‘파푸니카’라는 시나리오까지 깨고 1325라는 레벨이 되어야 골드 수급에 도움이 된다. 아이템을 티어3으로 맞춘 후 파푸니까 카오스던전을 도는 배럭의 수입은 대략 아래의 6가지 정도이다. 파괴석 수호석 보석 보스 러시 입장권 럭키 황금방 혹은 붉은 보스방 (재료나 실링 + 골드 2~300골 정도 수급 가능) 던전 클리어 보상 (극히 낮은 확률로 전투 각인 획득) 트라이포드 1번과 2번은 본-캐릭터 강화 및 보석 세팅 시에 사용하면 되고, 3번은 일주일에 1장 이상 고정으로 나오므로 반드시 얻어야 한다. 이 중 4번과 5번은 확률이라 부수입이고, 6번은 1415 정도의 카오스 던전을 돌아야 그나마 돈 되는 게 나온다. 그러니 배럭을 열심히 키워서 캐릭터 하나를 1415까지 올리고 나면, 그 메인 캐릭터로 골드 수급을 좀 더 원활히 할 수 있다. 1445가 된 후 카오스 던전에서는 경매장에 팔면 가격이 조금 나가는 트라이포드 재료들이 나오기 시작한다. 그러니 배럭을 키우는 목적은 메인 캐릭터 하나를 대략 1445 이상으로 만들기 위함이라 보면 된다. 보스 러시를 클리어하면 3렙 보석을 주는데, 이를 팔면 중반 골드 수급에 도움을 받을 수 있다. 그래서 보스 러시도 골드 받는 버스들만 가득하고, 정작 실제 플레이 방은 거의 없다. 오랜만에 언급하는 거 같은데, 그래서 이 게임은 고인물 지인이 있으면 훨~~~~씬 더 재밌게 즐길 수 있다. 배럭은 언제 키워야 할까? 이 항목의 초반에 언급한 바와 같이 로스트아크, 이 게임은 의도적으로 플레이 시간을 늘려 놓은 구간이 있다. 플레이 중 그런 걸 느낄 때 배럭을 키우면 된다. 처음 하는 사람에게는 너무 괴로운 구간 존재로스트아크는 맛집이다. 단골 손님이 많다. 단골이 많은 맛집인데 뭔가 친절하지 않다. 불친절하지도 않은데 이상하게 친절한 느낌을 못 받는다. 그래서 혼자 헤매고 있으면 손님 중에 친절한 사람들이 있다. 그 친절한 손님들이 그나마 새로운 손님들과 함께 던전을 돌아주니까 게임이 유지가 되는 게 아닐까 싶다. 게임을 처음 하는 사람에게는 1302에서 1370 구간이 너무 괴롭다. 아는 지인 없이 플레이할 경우 1302에서 1370까지 올리는 데 (엄청 열심히 해도) 약 3~4주 정도 소요된다. 1350 즈음이 넘어가면 가디언 토벌도 버스가 아니면 참여하기가 정말 어려워진다. 겨우 파티를 구해서 가거나, 매칭으로 가면 클리어 못하는 경우도 생긴다. 1370이 되면 “아르고스” 라는 “어비스 레이드”를 따라갈 수 있는데 뉴비가 전투에 참여할 수는 없고, 버스 기사가 돌아주는 “유료 방”에 참여할 수 있다. 골드를 주고 들어가서 기다리면 고인물 플레이어들이 깨준다. 1회 도는 데에 2022년 초 기준 약 500골드에서 800골드 사이. 가끔 뉴비들에게 플레이를 알려준다며 함께 플레이하자는 좋은 분들도 계시지만, 일반적으로는 그냥 버스 기사들만 한 가득하다. 이 게임은 원래 천천히 하는 게임이다. 그렇게 기획되어 있다. 2022년 3월 11일에 진행한 “로스트아크 특별 방송”에서 금PD가 42분 10초 즈음부터 언급한 바에 따르면 “전체 유저의 24% 정도가 특정 던전의 특정 레벨에 들어갈 수 있다”는 식으로 언급이 나온다. 즉, 그렇다는 말은 이 게임은 원래부터 기획 의도로 사용자의 레벨업을 고의적으로 느리게 만들어서 게임의 플레이 시간을 늘렸으며, 특정 레벨 대의 컨텐츠에 입장하고 클리어하는 사용자의 비율을 운영 지표로 삼고 모니터링하여 게임 속도를 조절하고 있다는 의미가 된다. 바로 이 지점이 이 게임에 처음 시작하는 뉴비가 혼자 들어가서 살아남기 힘든 구조이다. 그래서, 이 게임은 현질보다 고인물 친구가 중요하고, 길드 활동이 더 중요한 게임이라고 필자는 계속, 여러 번 강조하고 있는 거다. 고인물 플레이어들이 하는 조언 중 몇 가지는 들을 필요가 없다게임에서 채팅으로 도움을 요청하면 고인물 플레이어들이 나타나 친절히 조언을 해 주는데 그중 몇 개는 들을 필요가 없다. 왜냐하면 뉴비에게는 불가능한 이야기를 하기 때문이다. 그중 하나는 하이퍼&#x2F;점핑을 하라는 말이다. 게임을 새로 시작하는 뉴비 입장에선 파푸니카에서 갑자기 시작하는 것도 이해가 불가능한데다가 결국 각인이 1도 없어서 혼자서 할 수 있는 게 별로 없다. 배럭을 키우라는 조언 역시 크게 귀담아들을 필요가 없다. 전투 각인 수가 절대적으로 모자란 상황의 모코코들에게는 배럭 키우는 것도 고통이기 때문이다. 배럭에 관련된 내용은 필자가 위에 기재한 내용을 위주로 보면 된다. 로스트아크는 게임이 전체적으로 너무 고인물 컨텐츠들이라 1370 이하의 모코코들은 스스로 클 방법이 거의 없다고 봐야 한다. 우유는 꾸준히 마셔야 키가 큰다베른에 오면 시작되는 카오스 던전과 일일 에포나는 반드시 해야 한다. 매일 매일. 꾸준히 우유 먹고 키 큰다는 느낌으로. 그리고 그게 지겨워서 게임을 접게 된다. 왜냐면 게임을 새로 시작한 뉴비에게는 다른 선택이 없고 그거만 해야 해서. (이유는 위에서 쭉 설명한 바와 같음.) 판타지스러움은 어쩌면 B급 개그에서 나오는 걸지도토토피아섬이나 무릉도원 같은 뭔가 B minus 한 느낌의 개그가 너무 좋다. 캐릭터들의 웃음 포인트들에 빵 터져 웃다 보면 동화되어 그걸 자연스럽게 받아들이고 있는 자신을 발견하게 된다. B급 개그가 가벼운 느낌을 주면서 판타지 스러움을 배가시키는 듯하다. 보스 레이드는 꽤 어려움레이드가 너무 어렵고 초보들 입장에선 고인물 플레이어들과 함께 섞여 플레이하기에 되게 눈치 보인다. 보스 레이드 전까지는 친절한 플레이어들이 많지만, 레이드에 참여하면 욕박고, 파티 강퇴, 파티 탈퇴 등 나쁜 플레이어들이 집중 포진되어 있다. 친절히 알려주는 플레이어는 거~~~~~~의 없다. 아마 그래서 다들 버스를 타는 듯하다. 어비스와 레이드에 가기 전에는 유투브에서 공략을 최소 5편 정도 찾아보고 어느 정도 머리로라도 인식한 상태에서 가는 게 좋다. 그래야 비슷하게라도 따라 할 수 있기 때문에. 다음 편에서 다시 언급하겠지만, 사실 게임 플레이 자체에서 가디언 토벌 형식으로 레이드의 몬스터들을 맛보기 할 수 있도록 해 주면 참 좋을 듯한데 말이다. 가디언 토벌에서는 기본 공격 패턴을 익힐 수 있게 하고, 그 상태로 레이드에서 페이즈가 바뀐다면 초보도 조금 더 쉽게 게임의 재미에 접근할 수 있을 듯하다. 로스트아크에 개인적으로 바라는 개선점에서 계속…","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"게임","slug":"소프트웨어/게임","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EA%B2%8C%EC%9E%84/"}],"tags":[{"name":"게임","slug":"게임","permalink":"https://xeppetto.github.io/tags/%EA%B2%8C%EC%9E%84/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"놀자","slug":"놀자","permalink":"https://xeppetto.github.io/tags/%EB%86%80%EC%9E%90/"},{"name":"즐기자","slug":"즐기자","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B8%B0%EC%9E%90/"},{"name":"재밋다","slug":"재밋다","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EB%8B%A4/"},{"name":"매뉴얼","slug":"매뉴얼","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EB%89%B4%EC%96%BC/"},{"name":"안내서","slug":"안내서","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EB%82%B4%EC%84%9C/"}]},{"title":"[Games] 3편. 로스트아크 진짜 뉴비를 위한 여행 안내서 (3/3)","slug":"소프트웨어/Games/03-Lostark-Newbie-Travel-Guide-3","date":"2022-04-05T07:05:00.000Z","updated":"2022-04-05T07:05:00.000Z","comments":true,"path":"소프트웨어/Games/03-Lostark-Newbie-Travel-Guide-3/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Games/03-Lostark-Newbie-Travel-Guide-3/","excerpt":"","text":"목차 카오스 던전, 가디언 토벌, 일일 에포나는 매일 돌 필요 없음 어비스 던전은 반드시 매주 가자 레벨에 낮아서 그런지 파티 강퇴 당할 때 고인물 친구가 없을 때 게임을 어느 정도 즐길 수 있을까 로스트아크에는 지인만 필요한가 경매장 관련해서 알아야 할 사항 아이템은 어떻게 맞춰야 할까 초보가 현질할 템들 MMO Game의 재미는 언제 끝이 나는가 읽기 전 양해사항 알림지난 글에서 언급하였지만 다시 한 번 소개한다. 본 포스팅은 철저하게 필자의 개인 느낌과 경험에 의해 작성하고 있으며, 필자가 게임에서 경험한 느낌이나 사실은 실제 이 게임의 기획 의도와 다를 수 있음을 미리 양지 드린다. 이 게임을 오래 해오신 유저들 입장에서는 본 포스팅의 내용이 이해가 안 되어 따지고 싶거나, 사실과 달라 필자가 무척 한심해 보이거나, 지적하고 싶거나, 혹은 자신의 생각과 달라 화가 나실 수도 있겠다. 분명히 밝히건데 게임 두어달 해 본 필자가 초보로서의 느낌을 정리한 것이다. 읽다가 그런 기분이 드시는 분들은 굳이 끝까지 읽지 마시고 로스트아크를 하며 느낀점으로 넘어가시기를 추천한다. 카오스 던전, 가디언 토벌, 일일 에포나는 매일 돌 필요 없음초보들에게는 일일 퀘스트처럼 인식될 수 있는 카오스 던전, 가디언 토벌, 일일 에포나는 매일 할 필요 없다. 1~2일 정도는 스킵해도 되고, 3일에 한 번만 진행 해 주면 된다. 스킵한 날은 추가 경험치가 쌓이도록 스택이 생성되기 때문이다. 카오스 던전은 자동 매치가 되니 그래도 할 만한데, 가디언 토벌은 1302가 되는 순간부터 사람들이 잘 안 도와주기 시작하고, 골드로 버스를 타라고 할 텐데, 스트레스받지 말고 그냥 두자. 2일에 한 번, 혹은 3일에 한 번 하면 된다. 가디언 토벌 같은 경우 좀 웃긴다고 생각하는 밸런스가 있는데, 초보는 혼자서 도저히 잡을 수 없게 되어 있어서 어쩔 수 없이 버스 기사를 구해서 도움을 받아야 한다. 가디언 토벌은 도와주는 마음 착한 플레이어들도 많고, 초보 길드에 가면 도움 주는 경우도 있으니 쓸데없이 혼자 해 본다고 도전하면서 스트레스받지 말고 길드나 마음씨 좋은 플레이어들에게 부탁하자. 근데 이렇게 버스를 타다 보면 ‘내가 버스를 타는 건가, 게임을 하는 건가?’ 하는 의구심이 스스로에게 들 수 있다. 필자의 관점에선 그게 정상이다. 필자 관점에선 가디언 토벌은 정말 게임을 이상하게 만들었다고 생각하는 부분이다. 가끔 초보 지역 가디언을 20분씩 때려서 잡고 나면… ‘이 게임 만든 사람은 무작정 게임을 어렵게 만들어 놓으면 깨고 뿌듯해 하겠지라고 생각하는건가?’ 하는 생각이 든다. 지인이 없으면 할 수 없는 게임으로 기획을 한 이유가 뭘까 고민을 해봐도 이해가 잘 안된다. 어비스 던전은 반드시 매주 가자주간 던전인 어비스 던전은 반드시 매주 가야 한다. 자기 레벨 대에 맞는 어비스 던전에 따라다니면서 골드를 수급해야 하기 때문이다. 그런데 문제가 있다. 저렙 던전에 사람이 없다. 저렙들은 정작 파티 구하기가 힘들고, 초보임을 밝히면 강퇴당하거나 파티 탈퇴하는 경우도 있다. 계속 언급하지만, ‘고인물 게임’이고, ‘지인 게임’이다. (그리고, 게임 개발사는 이런 저렙 던전의 문제점을 해결할 생각이 없어 보인다.) 그러니 저렙 던전에서 “같이 하실 초보분들 구해요” 정도의 제목을 걸어놓고 대기하면 사람이 많은 시간대에 운 좋으면 파티를 구해서 갈 수 있다. 일주일 내에 1회만 하면 되므로, 총 여섯번(6일)의 기회가 있으니 조바심 내지 말고 천천히 파티를 구해보자. (이래서 필자가 초반에 지인이 있다면 이 게임을 편하게 할 수 있다는 이야기를 한 거다.) 그런 게임임을 알고 스트레스 덜 받고 게임을 하려면, 인내심이 좀 필요하다. 가끔씩 마음씨 좋은 플레이어들이 공짜로 돌아주는 경우도 있다. 그럴 땐 시네마는 스킵하자. 유튜브에서 보면 된다. 1375 입성한 캐릭터가 생겼다면, 이 캐릭터를 조금씩 업그레이드 하면서 다음 캐릭터를 또 1375로 올리면 된다. 결국 모든 캐릭터를 1445 이상으로 올려야 온전히 골드 수급을 하면서 다른 플레이어들과 함께 게임을 온전히 즐길 수 있다. 그런데 현질 없이 2번째 부캐를 키우면 게임이 정말 재미없게 느껴질 거다. 필자는 그랬다. 레벨에 낮아서 그런지 파티 강퇴 당할 때로스트아크는 캐릭터의 아이템 레벨이 1445 정도가 되어야 이것저것 할 수 있는 일들이 생기고, 적어도 파티를 걸었을 때 거부당하지는 않게 된다. 이 게임에 들어와서 파티 거부를 많이 당했다면 아마 아이템 레벨이 1302~1445 구간일 거다. 아이템 레벨이 낮기 때문에 당신의 캐릭터가 다른 플레이어들에게 “부캐 취급” 받고 있는 것이다. ‘크리스마스의 기적’이니 뭐니 하면서 뒤늦게나마 흥행에 성공해서 신규 플레이어가 많음에도 불구하고, 이 게임에선 레벨이 낮으면 당연히 부캐라고 생각하는 듯하다. 이벤트로 지급되는 ‘점핑권’이라는 걸 사용하면 1302에서 시작하기 때문에 레벨1부터 차분히 키운 메인 캐릭터라도 아이템 레벨이 1302가 넘어가면 점핑권을 사용한 부캐 정도로 취급당해 파티에서 강퇴당하는 경우도 많고, 못하면 공부하라고 욕지거리하는 경우들이 생기기 시작한다. 이런 부분이 바로 이미 고인물화되어 버린 로스트아크에서 신규 유저들이 살아남기 어려운 이유이다. 그러니 신규 유저의 목표는 메인 캐릭터 1개 이상에 아이템 레벨 1445가 되는 것이다. 할 수 있다. 화이팅! 고인물 친구가 없을 때 게임을 어느 정도 즐길 수 있을까로스트아크는 현질의 개념을 ‘pay to play faster’라고 잡고 마케팅한다. 게임 내에서 하루&#x2F;일주일 단위로 할 수 있는 행위를 기획으로 제한해서 모든 플레이어가 동일한 컨텐츠를 즐기지 않고 선별적으로, 차별화하여 게임을 즐기게 한다. 그래서 이런 제약 사항을 어느 정도 우회할 방법을 현질 아이템들도 만들어 두었다. 그런데, (필자가 계속 강조하지만) 사실 이 게임은 ‘지인의 차이’가 현질보다 더 ‘빠르게’ 나타난다. 게임이 좀 어렵다고 채팅창에서 징징대고 있으면, 고인물 플레이어들이 상담해 준답시고 다들 “레이드까지만 오시면 재밋어요”라고 하는데, 레이드까지 가려면 1375가 되어야 하고, 그나마 “딱 렙(그 레벨 되지 마자)”은 안 데려가기 때문에 사실상 1415까지 올려야 한다. 누가 도와주지 않는다면 현질을 하면서 해도 1415 혹은 1445까지 올리는 데 약 2달 정도 걸린다. (이래서 필자가 초반에 지인이 있다면 이 게임을 편하게 할 수 있다는 이야기를 한거다.) 각인(스킬) 포인트도 모자라고, 아이템, 골드 모두 모자란 초보 입장에서 딱렙(던전이 열리는 레벨)에 갈 수 있는 컨텐츠는 카오스 던전 밖에 없다. 나머지는 딱렙에 데려가지도 않고, 본인 혼자 가서 할 수 있는 컨텐츠가 거의 없다. ※참고 : 카오스 던전 &#x3D; 하루 2회 자기 ‘딱렙’에서 논 뒤, 각인 수급용 노가다를 해야 한다. 이 게임은 “게임의 본래 재미”를 느낄 수 있는 레벨이 2022년 초 기준 1400대이고, 신규 유저가 고통을 느끼는 구간이 1300이 넘어서 부터이다. 1300까지는 빠르면 1~2주 만에도 달성할 수 있는데, 아는 사람이 없는 신규 유저 입장에서는 1300에서 1400까지가 한 달 정도 걸린다. 정말 느릿느릿 크는 느낌이라 굉장히 답답할 거다. 아이템 레벨 1400 정도가 되면 혼자서도 여기저기 파티에 낑겨갈 수 있으니 그나마 게임의 본질을 느낄 수 있다. (기획팀이 이 글을 본다면 저렙 구간에서도 게임의 본질을 느낄 수 있는 파티 플레이할 수 있는 컨텐츠를 만들던가, 아니면 신규 유저들에게 1415짜리 캐릭터를 선물했으면 한다.) 이끌어 주는 고인물 지인이 없다면 캐릭터 하나를 1415를 만들고 파킹&#x2F;주차(주 캐릭터를 정체 시켜 두고 부 캐릭터를 키우는 행위) 시켜 두고 배럭 키우기(부캐 키우기)를 해야 한다. 왜냐라면 1415 전까지는 아이템 강화를 +15까지 하고 다음 단계로 넘어가지만, 1415에서 1445로 넘어가기 위해서는 강화를 +21까지 해야 하는데, +16 강화부터는 말도 안되게 낮은 확률로 아이템이 강화되기 때문에 사실상 현질을 하던가, 아니면 강화 보조 재료(강화 확률을 높여주는 재료)를 얻기 위해 누가 도와줘야 한다. 아는 지인이 끌어주면 한 달만에도 1445 찍는 사람들이 있다. 그래서 아이디 옆에 모코코가 있는데 아이템 레벨이 1445 인경우가 있다. 이런 사람들은 1445에 파킹 시켜 두고 배럭을 키우기도 한다. 계속 반복해서 말 하지만, 이 게임은 고인물 지인이 있냐 없냐에 따라 게임의 속도와 즐길 수 있는 컨텐츠, 게임의 재미가 달라진다. 현질을 하거나, 고인물 지인에게 술을 사주거나하면 된다. 이 게임은 명백히 “현질을 유도하지는 않는다.” 다만, 막대한 금액의 현질을 안하거나 밥&#x2F;술 사주고 키워달라고 부탁할 고인물 친구가 없는 신규 유저라면, 3~4달 동안 게임을 절반, 혹은 반의 반 정도만 즐기면 된다. 그게 이 게임의 게임성이다. 물론 필자는 예전에 게임 업계에 종사하기도 했고 해서 서버비 정도는 내야 한다고 생각해서 게임이 재밋으면 현질을 좀 하는 편이다. 근데, 그럼에도 아직 초보 수준에서 벗어나지 못했다. 로스트아크에서 현질이 ‘pay to play faster’라면, 로스트아크에서의 지인은 ‘pay to play and enjoy more fun’이다. 필자의 개인적인 관점에선 그렇게 보였다. 로스트아크에는 지인만 필요한가아니다. 필자가 자꾸 ‘지인’에 대한 강조를 하다 보니 이 이야기를 중간에 한 번 하고 싶었다. 게임을 하면서 플레이어들의 나이를 들춰보려 묻지는 않지만, 로스트아크의 채팅창을 보고 있으면 플레이어들의 연령대가 좀 높아 보였다. 아재 개그 수준이 아니고, 부장님 개그, 이사님 개그가 남발한다. 그래서 그런지 이기적인 플레이어들보다 이타적인 플레이어들이 꽤 많은 이상한(?) 게임이었다. 쉽게 말해 좋은 유저들이 참 많은 게임이었다. 초보들에게 친절하게 알려주려고 노력하고, 초보들이 어려워하는 던전을 대신 돌아주기도 한다. 친구 추가를 해 두고 특정 시간이 되면 인사를 해 주는 사람들도 있고, 초보 길드에 들어가면 많은 도움을 받을 수 있다고 한다. 하지만 레이드 따라갈 정도 되면 인성 X인 사람들이 보이기 시작한다. 레벨 낮다고 막 말하고, 가르쳐주기보다는 욕부터 때려 박고, ‘ㅇㅇ노~ ㅁㅁ노~’ 하는 말투를 쓰면서 사람 무시하는 사람들이 “게임을 제대로 즐길 수 있는 레벨대 컨텐츠”에 들어가면 잔뜩 있다. 필자는 길지 않은 시간 동안 플레이하고도 차단 목록에 아이디들이 한 가득 있었다. (게임을 하다가 욕하면 바로 차단.) 그렇다보니 이 게임은 고인물 친구나 함께할 친구가 중요하다고 자꾸 강조하게 되지만, 사실 좋은 플레이어들이 더 많다. 기왕 로스트아크를 시작할 거라면 초보일 때 초보 길드에도 가입하고 좋은 인연들을 많이 만들어두자. 경매장 관련해서 알아야 할 사항경매장은 게임 내 재화인 골드로만 주고 받는 경매장과 골드+페온으로 주고 받는 경매장, 두 개가 있다. 사용 방법은 인터넷을 검색하자. 아이템은 어떻게 맞춰야 할까계속 강조하는 거 같아 필자 스스로 생각하기에도 그만하지 싶지만… 한 번 더 한다. 아이템을 맞출 때는 ‘고인물 지인’에게 문의하는 게 가장 빠르다. 하다가 잘 알 수 없어서 인터넷 검색을 해 보면 솔직히 어느 정도 게임을 공부한 사람이 아니면 알아볼 수 없는 이상한 언어들로 설명해 놔서 마치 ‘한글을 쓰는 다른 국가가 하나 더 있어서 그쪽 나라말로 써놓은 건가?’ 싶은 이상한 용어들이 남발하기 때문에 그렇다. 예를 들면, 이런 식이다. 바드의 경우 귀금속은 신속으로 맞춘다.목걸이 : 품 70 이상귀걸이 : 품 60~70 이상반지가 싸다. 신속으로 맞추자.특성 : 중갑 절실 전문의 각성 x 3씩돌깎기 : 중갑, 각성보석 : 홍염으로 맞추기 게임을 두 달 정도 하고 나면 이게 무슨 소린지 감이 오는데 처음엔 이게 대체 뭔 댕댕이 같은 한글인가 싶어서 짜증이 났다. 아이템에 대해서는 캐릭터마다 키우는 육성법이 다르다고는 하는데 일반적으로 상위랭커 1위~3위의 세팅을 따라가는 방식으로 맞추는 경우가 많은 듯하다. 하지만 가장 좋은 건 전체 채팅창 혹은 초보 길드에 들어간 후 초보임을 밝히고 아이템 컨설팅을 받는 게 가장 좋다. 너무 고인물 게임이 되어놔서 아이템 세팅이나 스킬 세팅을 보고 파티 초대 후 3초 만에 강퇴당하기도 하기 때문이다. 초보가 현질할 템들로스트아크는 딱히 현질을 심각히 유도하지 않는 게임이라서 그런지 상점에 가면 뭘 사야 할 지 모르겠어서 ‘초보는 뭘 질러야 하나요?’라는 질문이 채팅창에 꽤 자주 등장한다. 간단히 정리해 보았다. 베아트리스, 니나브의 축복 배 스킨 - 에르미다의 노래 그 외, [초보]라고 달린 템들 MMO Game의 재미는 언제 끝이 나는가이 부분은 ‘그러므로’ 단락이다. 필자가 생각하는 ‘MMO 게임의 재미는 언제 끝이 나는가’에 대한 이야기. 길지 않게 간단히 하겠다. 내가 노력해서 되는 일과, 내가 노력해도 안 되는 일이 명확하게 구분될 때. 그건 그냥 MMO일 뿐, 더 이상 Game이 아니다. 로스트아크는 초보자가 죽도록 노력해도 시간의 장벽이 너무 커 고인물들과 상호작용이 어렵다고 느껴졌다. 재미를 위해 과금을 줄인다는 결정은 매우 아름다웠으나, 조금 선을 옮기는 게 좋겠다는 느낌이다. 초보들이 게임의 중반을 넘어갈 때 괴로운 상황을 해결해 주는 초보-중수용 현질템을 더 만들던가, 아니면 관련한 게임성을 변경해야 한다. 로스트아크는 처음에는 지인이 없어서 힘들고, 나중에는 시간이 없어서 힘들었다. 라이트한 게임을 지향한다면 라이트한 컨텐츠를, 지인 및 플레이어들과의 상호협력 게임을 지향한다면 그런 플레이를 강화했으면 싶었다. 사실 이 단락을 짧게 쓰는 이유는 이렇다. 게임을 하는 내내 ‘PD가 혹시 너무 많은 의사결정을 혼자 담당하고 있지 않은가’ 걱정이 됐다. 누군가 내부에서 ‘함께’ 고민하고 있는건가? 그런 생각이 들어서 굳이 길게 이야기하지 않아야 겠다고 생각했다. 로스트아크를 하며 느낀 개인 감상에서 계속…","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"게임","slug":"소프트웨어/게임","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EA%B2%8C%EC%9E%84/"}],"tags":[{"name":"게임","slug":"게임","permalink":"https://xeppetto.github.io/tags/%EA%B2%8C%EC%9E%84/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"놀자","slug":"놀자","permalink":"https://xeppetto.github.io/tags/%EB%86%80%EC%9E%90/"},{"name":"즐기자","slug":"즐기자","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B8%B0%EC%9E%90/"},{"name":"재밋다","slug":"재밋다","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EB%8B%A4/"},{"name":"매뉴얼","slug":"매뉴얼","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EB%89%B4%EC%96%BC/"},{"name":"안내서","slug":"안내서","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EB%82%B4%EC%84%9C/"}]},{"title":"[Games] 2편. 로스트아크 진짜 뉴비를 위한 여행 안내서 (2/3)","slug":"소프트웨어/Games/02-Lostark-Newbie-Travel-Guide-2","date":"2022-04-03T07:03:00.000Z","updated":"2022-04-03T07:03:00.000Z","comments":true,"path":"소프트웨어/Games/02-Lostark-Newbie-Travel-Guide-2/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Games/02-Lostark-Newbie-Travel-Guide-2/","excerpt":"","text":"목차 처음 해보는 뉴비가 로스트아크를 해보기로 마음 먹었다면 아는 사람이 없어 고생하고 있다면 뉴비인데 뭘 현질할 지 몰라 과금을 고민하고 있다면 ┕ 3.1 점핑권을 주는 경우 제련템 수급 요약 ┕ 3.2 점핑권을 주는 경우 점핑권을 사용한 캐릭터 키우기 요약 ┕ 3.3 난 점핑권 싫어, 현질도 싫어, 그냥 멘땅에 헤딩해서 키울래 요약 ┕ 3.4 현질을 해 보려는 사용자들을 위한 요약 서버 선택과 시작 캐릭터 선택에 대해 고민이 된다면 진짜 초보라면 해야 할 것은 이벤트를 자주 확인하자 게임의 조작 원정대란 부캐는 언제 키워야 하나 초보자들은 모든 골드를 소모하지 말고 항상 예비비를 남겨두자 트라이포드 읽기 전 양해사항 알림지난 글에서 언급하였지만 다시 한 번 소개한다. 본 포스팅은 철저하게 필자의 개인 느낌과 경험에 의해 작성하고 있으며, 필자가 게임에서 경험한 느낌이나 사실은 실제 이 게임의 기획 의도와 다를 수 있음을 미리 양지 드린다. 이 게임을 오래 해오신 유저들 입장에서는 본 포스팅의 내용이 이해가 안 되어 따지고 싶거나, 사실과 달라 필자가 무척 한심해 보이거나, 지적하고 싶거나, 혹은 자신의 생각과 달라 화가 나실 수도 있겠다. 분명히 밝히건데 게임 두어달 해 본 필자가 초보로서의 느낌을 정리한 것이다. 읽다가 그런 기분이 드시는 분들은 굳이 끝까지 읽지 마시고 로스트아크를 하며 느낀점으로 넘어가시기를 추천한다. 처음 해보는 뉴비가 로스트아크를 해보기로 마음 먹었다면로스트아크라는 게임을 아직 시작하지는 않았지만, 여기저기 커뮤니티에 올라오는 바이럴 마케팅을 보았거나, 혹은 본 포스팅을 보고 나름대로 흥미가 생겨 로스트아크를 해 보기로 마음을 먹었다면, 게임을 시작하기 전에 반드시 해야 할 행동이 하나 있다. 바로 「주변에 로스트아크를 하고 있는 지인 찾기」다. 이는 필자가 꼭 당부하고 싶은 부분이다. 로스트아크를 시작하려면 「가능한 로스트아크를 먼저하고 있는 지인이 있는 상태」에서 시작하기를 「강력히 추천」한다. 그렇지 않은 경우에 느껴야 하는 고통이 상당하기 때문이다. 이 부분에 대해서는 필자가 본 포스팅과 향후 게임에 대해 설명하는 글에게 계속 언급할 예정이다. 몇 차례 언급한 바와 같이 이 게임은 MMO(Massive Multi-player Online)의 기치를 매우 높게 살린 게임이고, 그래서 주변에 이 게임을 오래 한 지인이 있고&#x2F;없고에 따라 게임의 재미가 달라진다. 그래서, 게임을 재밌게 즐기고 싶다면 주변에 이 게임을 오래 한 지인이 있는지 꼭 찾아봐라. 그러니 가능하면 주변 지인들에게 “혹시 로스트아크 알아?” 하면서 하는 사람이 있는지 꼭 찾아봐라. 지인이 로스트아크의 고인물이라면 당신의 게임 인생은 대성공! 당신은 아주 편하고 즐겁게 로스트아크를 즐길 수 있을 거다. 주변 지인 중 로스트아크를 하는 사람이 없는데도 이 게임을 해봐야겠다는 마음을 먹었다면 필자가 미리 경고한다. 이 게임은 쉽지 않다. 아니, 정확히 말하면 굉장히 어려운 게임이다. 게임 컨텐츠 대부분이 협동&#x2F;파티 컨텐츠들인데 고인물화 되어서 신규 유저가 쉽사리 끼어들기 어렵다. 끼어들기 위해서는 공부한다는 느낌이 들 정도로 알아야 할 내용들이 많고, 실행할 능력이 있어야 한다. 착한 사람들도 많지만, 또 그만큼 텃세도 엄청나다. 신규 유저들에게 욕부터 박는 플레이어들도 많다. 그러니 주변 지인 중 고인물 플레이어가 없다면, 가능하면 주변 지인 중 함께 할 사람을 찾아보는 것도 좋을 거다. 누군가와 같이한다면 그 자체로 재미있을 테니까. 로스트아크의 역사를 잠시 찾아보니 대략 2018년부터 개발한 게임이라고 한다. 베타 테스팅을 하고 게임을 상당히 오랜 기간 정비했다고 한다. 아마 그때 남은 플레이어들이 지금도 남아 고인물화된게 아닌가 싶다. 게임 내 거의 모든 컨텐츠가 상당히 고인물화되어 있어서 초보들이 들어가서 저렙(Low Level) 컨텐츠를 즐기는게 불가능한 구간이 있다. (카오스 던전, 유령선 등) 그래서 저렙 컨텐츠를 같이 즐기거나, 아니면 빠르게 대부분의 플레이어들이 잔존하는 구간으로 끌어올려줄, 그런 도움을 줄 사람이 필요하다. 고인물 친구가 있으면 이 게임이 재밌어 지는 또 다른 이유는 이렇다. 로스트아크라는 게임은 알아야 하는 내용이 상당히 많은 게임이다. 게임 내 사용자 매뉴얼이 있는데, 초보 입장에서 보면 당최 무슨 소린지 모를 소리들이 쓰여 있는 데다가, 내용이 너무 방대해서 거의 백과사전 같은 느낌을 받는다. 로스트아크는 지인이 알려주면 핵심만 빨리 배우고 즐길 수 있다. 그러나, 도움을 줄 지인도 없고, 게임을 함께 즐길 지인도 없는 상태에서 게임을 편하게 하려면 남은 방법은 “유료 상품 결제”, 즉, “현질”이다. 필자도 현질을 많이 해보지는 않았지만, 초보자의 현질에 대해서는 이후에 간단히 설명해 볼 생각이다. (필자는 더 이상 로스트아크를 플레이하지 않는다.) 필자는 가끔 초보 지역을 지나치다가 만나 도움을 요청하는 뉴비들에게 제일 처음 묻는 말이 “이 게임 같이 하는 지인이 있으세요? 이 게임 혼자 하면 진짜 빡쳐요.” 라고 경고하곤 했다. 필자는 실제로 아는 사람 한 명도 없이 시작했다가 정말로 화를 몇 번이나 냈다. 기획팀에 아는 사람이 있다면 “대체 왜 이렇게 한 거?”라고 묻고 싶은 구간들이 많은 게임이다. 필자는 아는 사람 없이 두 달을 해서 모코코가 자연스럽게 떼어졌는데 겨우 렙이 1370밖에 안 됐었다. 이는 아는 지인이 있어서 도움을 받으면서 크는 일반적인 초보자들보다 한참 못한 수준이었다. 필자는 “결국 지인 없으면 안 되는 게임이구나” 하며 그냥 질릴 때까지 하고 말지 싶었는데, 갑자기 어느 날 만난 다른 서버의 누군가가 자신이 지인이 되어 주겠다고 했을 때… 진짜가 아닌 걸 뻔히 알면서도 그 말 자체가 정말 고마워서 게임을 하다가 눈물이 찔끔 날뻔했다. 과장이 아니라, 정말 이 정도로 이 게임은 지인의 유무에 따라 게임의 재미가 차이가 난다. MMO를 강조해서 장점인 게임의 단편적 그림자가 아닐까 싶다. • 결론 : 아는 지인이 고인물이면 해볼만 하다. 아니면 같이 할 친구가 있다면 좋다. 아니면 하지 말자. 아니, 심각히 고민하자. 아는 사람이 없어 고생하고 있다면이 게임을 이미 시작했는데, 필자처럼 아는 사람이 0.1도 없어 혼자 고생하고 있다면 다른 플레이어들에게 질문하고 초심자 길드에 들어가려 노력하자. 초심자 길드에 들어가면 많은 걸 알려주는 친절한 플레이어들이 있다. 그리고, 이 게임을 지인 없이 혼자서 하려면 “귀엽게, 때론 비굴하게 부탁하고 고인물들에게 빌붙어 버스 타는 행동 양식”에 익숙해져야 한다. 게임의 성격은 대단히 MMO를 강조하였고, 그렇다보니 게임 내 대부분의 컨텐츠들이 MMO 성향의 컨텐츠들이다. 그리고 오래된 게임이다보니 그런 협동 컨텐츠는 대부분 높은 레벨 플레이어들을 위한 장소에 집중되어 있다. 로스트아크는 개인이 진행해야 하는 「시나리오 모드, 에포나(일일퀘스트), 카오스 던전, 행해 컨텐츠」 크게 네 가지 정도의 분류를 제외하면 거의 다 협동&#x2F;파티 플레이인데, 저렙 던전에 사람이 없다. 특히 일주일에 한 번 할 수 있는 퀘스트는 대부분 협동&#x2F;파티 컨텐츠인데 높은 레벨 플레이어들이 낮은 레벨 던전을 고생하면서 플레이하는 경우는 거의 없다. 그래서 낮은 레벨 던전에 가면 클리어가 불가능하다. 그래서 고인물들에게 “제발 도와주세요.” 라고 해야 한다. 예를 들어, ‘가디언 토벌’ 같은 경우 “OOO 한 번만 잡아 주세요”하고 방을 열어 놓으면 지나가던 맘씨 착한 고인물 플레이어가 짠~ 하고 나타나서 정작 도움을 청한 사람은 적의 얼굴을 보기도 전에 보스를 죽여버리고선 “더 도와드릴 거 있나요?” 하고 묻고는 대답이 없으면 가버린다. 그런 거에 익숙해지면 이 게임을 오래 할 수 있다. 필자는 이 게임을 두 달 하면서 아직도 얼굴도 모르는 보스가 많다. 얼굴을 볼 수가 없다. 특히 던전 중간에 시네마가 나오는데, 그거 스킵 안 하면 시간 없다고 욕하면서 나가버리는 고인물 플레이어들도 있다. 그러니 개인적으로 보고 싶어도 필히 스킵해야 한다. 중간 시네마는 유투브에서 보자. 로스트아크는 오래된 게임이고 고인물 플레이어들이 많은 게임인데다가, 등장 시점에 유튜브의 전성기 시대였기 때문에 인터넷&#x2F;유튜브 등을 검색해 보면 정말 많은 컨텐츠들이 있다. 그리고 거의 대부분이 초보에겐 쓸모없는 컨텐츠다. 팁이라며 뭐라고 이야기하는데 뭔 소리인지 알아듣기가 정말 어렵기 때문이다. 하지만, 게임을 어느 정도 해서 게임에 익숙해지고 나면 정말 없는 정보가 없이 다 있다. 그렇게 잘 알아듣게 되는데 1달 정도 걸린다. 공부할 게 참 많은 게임이다. • 결론 : 혼자 클 수 있는 게임이 아니다. 비굴해지자. 부탁하자. 그리고 공부하자. 그러면 오래 할 수 있다. 뉴비인데 뭘 현질할 지 몰라 과금을 고민하고 있다면이미 게임은 시작했고, 재미는 있는 거 같은데 무과금을 할지, 현질을 할 지 고민하고 있다면 제일 좋은 방법은 게임에 이미 고인물이 된 지인에게 물어보는 게 최선이다. 지인이 없다면 먼저 유튜브를 열심히 찾아봐야 하고, 그다음은 게임 내에서 플레이어들에게 상담을 요청해야 한다. 물론 유튜브든, 플레이어들의 조언이든 게임 내 용어에 익숙하지 않으면 무슨 소리인지를 몰라 이해가 안 될 거다. 게임 내에서만 통용되는 용어들이 워낙 많고, 공부를 해야 게임 컨텐츠들을 이해할 수 있어서 어려울 수 있다. 위 영상들을 봐도 이해가 안되실거라, 필자가 이해한 만큼의 설명을 남겨본다. 물론 필자의 설명도 이해가 안되실 수 있다. 1. 점핑권을 주는 경우 제련템 수급 요약• 점핑권을 주는 경우 캐릭터 1개든, 2개든 일단 주어진 만큼 점핑을 쓰고 &gt; 모두 파푸니카를 깬다 &gt; 카오스 던전을 하루 2회 돈다 &gt; 가디언 사냥을 우르닐부터 해서 돈다 &gt; 캐릭터를 1개 만들어 시나리오를 진행한다 &gt; 티어1 아이템들을 업그레이드하면서 시나리오를 즐긴다.• 이렇게 하는 이유는 왜냐하면 그냥 시나리오를 진행해서는 제련템들을 수급하면서 진행하기가 정말 어렵다. 그러니 제련템을 수급할 캐릭터를 만들어서 인스턴트 던전들을 돌아야 한다. 2. 점핑권을 주는 경우 점핑권을 사용한 캐릭터 키우기 요약• 파푸니카 시나리오를 모두 깬다 &gt; 카오스를 하루 2회 돈다 &gt; 파푸니카 에포나(일일 퀘스트)를 매일 진행하며 골드를 조금씩 모은다 &gt; 제련을 통해 조금씩 강해진다 &gt; 골드를 700~1000골드 정도 모아둔다 &gt; 1375가 되면 아르고스라는 어비스 던전의 버스를 탄다 &gt; 무한 반복• 어비스 던전은 고인물 플레이어들이 게임 내 재화인 골드을 받고 클리어해 주는데, 그 버스를 탈만큼의 골드를 보유해 두어야 한다.• 만약 어떤 커뮤니티에 “무과금으로 플레이해서 몇 천 골드를 가지고 있다”라는 글들이 올라오면 그냥 무시하면 된다. 필자 생각엔 고인물 플레이어가 초보인척 하고 있거나, 아니면 그 게임 회사 관계자가 아닐까 싶다. 3. 난 점핑권 싫어, 현질도 싫어, 그냥 멘땅에 헤딩해서 키울래 요약• 시나리오를 진행한다 &gt; 베른 북부에 도착할 때쯤 ‘카오스 던전’ 이라는게 열린다. &gt; 카던을 돈다. 많이 돈다. 계속 돈다.• 카던에서 나오는 아이템으로는 절대 제련 재료를 사면 안된다. 반드시 전투 각인을 사라. 초보들에게 근본적 문제는 전투 각인이 모자란 문제다. 전투 각인을 미친 듯이 모아라.• 시나리오를 밀면서 차례대로 열리는 카던을 계속 돌면서 전투 각인을 모아라. &gt; 막히면 다른 캐릭터를 만들어서 다시 시나리오와 카던을 돌아라. &gt; 이 게임은 원래 그런 게임이다. &gt; 그렇게 계속 시나리오와 카던을 돌다 보면 굉장히 튼튼한 캐릭터들이 생길 거다.• 다른 건 어떻게든 노력하면 보완이 되는데 전투각인 모자란 건 보완이 안 된다. 카던 노가다를 뛰거나, 아니면 어마어마한 물량의 현금을 게임에 투자해야 한다. 4. 현질을 해 보려는 사용자들을 위한 요약• 로스트아크를 하다보면 초보들은 골드를 수급하기가 정말 어려워서 ‘뭐, 이런 게임이 다있나’ 싶고, ‘현질 유도 안한다더니 현질 안하면 아예 게임을 못하게 해 놨네’ 싶은 기분이 들기도 할거다. 그래서 간단히 현질을 정리해 보았다.• 현금으로 구입할 수 있는 로열 크리스탈(로크)은 우리가 쓰는 현금과 1:1 교환이다. 1000 로크는 1000원, 10000 로크는 10000원이다.• 그냥 크리스탈은 묶음으로 파는데 대충 계산해보면 27.5원&#x2F;1개가 있고, 25원&#x2F;1개가 있다. 그러니 비싼 걸로 사면 더 싸다는 정도만 알아두면 된다.• 골드는 로크와 교환할 수 있는데, 게임 서버마다 골드는 변동 환율이다.• 크리스탈로 골드를 확보하려면 크리스탈 100개, 즉 2750원 + 2750원 로열 크리스탈 &#x3D; 5500원이다.• 이 게임은 캐릭터를 6개까지 키우면 일주일에 약 1~2만원 어치 정도의 골드를 ‘플레이어의 노력’으로 얻을 수 있다. 그리고 고인물 플레이어들이 써둔 글이나 유튜브를 보면, 어느 정도 고인물이 되어가는 시점 쯤에는 무과금 플레이가 가능한 걸로 보인다. (초보들에게는 절대 아니다.)• 스토어에서 파는 크리스탈 관련 물품 중에는 월 3회 한정 크리스탈 박스의 효율이 좋다. 게임을 편하게 플레이할 수 있게 해 주는 베아트리체 버프의 원래 가격이 5,500원이기 때문에 크리스탈의 수율이 더 싸지기 때문이다. 서버 선택과 시작 캐릭터 선택에 대해 고민이 된다면게임을 설치하고 시작했다면 제일 먼저 하는 일 중 하나는 서버를 선택하고 캐릭터를 선택하는 일이다. 아는 지인이 먼저 플레이하고 있다면 따라서 가고 캐릭터 선택도 조언을 받으면 되겠지만, 그렇지 못한 경우는 고민이 될 수 있다. 서버는 사실 별로 크게 영향을 미치지 못하므로 대충 아무 서버나 선택하자. 어느 서버에나 좋은 사람, 나쁜 사람은 있다. 초보라고 밝히고 도움을 요청하면 귓말까지 걸어 하나하나 세팅을 지적해 주는 좋은 플레이어들도 있지만, 같이 파티 플레이하다가 초보에게 욕 박고 시간 아깝다며 나가버려 레이드 공대가 깨지는 경우도 있다. 그냥 그 사람의 성향 문제이고 분포도의 문제일 뿐 어느 서버에나 그런 사람들은 있다. 캐릭터 선택 시에는 가능하면 딜러를 키우는 걸 추천한다. 로스트아크는 여러 캐릭터를 키워 메인 캐릭터에 아이템을 몰아주는 방식으로 게임 시스템이 기획되어 있다. 그러니 가능한 딜이 나오는 쪽으로 선택해야 나중에 레이드 참여 시 거절을 덜 당한다. 가뜩이나 아는 지인이 없어 혼자 플레이하는 것도 힘들 텐데, 레이드나 파티로만 진행할 수 있는 콘텐츠에 몇 번 거절당하고 나면 게임에 오만 정이 똑~ 떨어진다. (필자도 그래서 접었다.) 진짜 초보라면 해야 할 것은이 게임을 시작하려면 먼저 주변 지인들에게 “로스트아크 하는 사람?”이라는 질문을 최소 일주일 넘게 하고, 해당 지인의 아이템 레벨이 1445이상인지, 본인을 키워줄 수 있는지를 확인하고 시작하는게 좋다. 혼자 시작하면 정말 개 고생이다. 진짜 로스크아크를 처음 해 보는 초보라면 느끼게 될 텐데… 이상하리만치 게임 내에서만 쓰이는 용어가 많은 게임이다. 필자가 지금 작성하면서 가능한 게임 내 용어들을 설명하겠지만, 필자는 이 게임을 처음 접하는 사용자들을 기준으로 작성할 예정이다. 이 게임의 사용자 매뉴얼은 백과사전 형태라 초보에게 거의 도움이 되지 않는다. 게다가 유튜브 등에서 이 게임의 뉴비 입문 매뉴얼 영상을 찾아봐도 알 수 없는 소리들을 한다. 1355니, 1415니 하는데 게임에 익숙하지 않은 초보들에게는 대체 어쩌라는 건지 모르겠는 이야기일 뿐이다. 이 요상해보이는 숫자인 1355니, 1370이니, 1415니 하는 건 바로 아이템 레벨이다. 로스트아크는 아이템의 레벨에 따라 게임의 컨텐츠가 점진적으로 열리는 방식으로 진행된다. 혹시라도 지금 이 글을 읽고 계시는 독자가 진짜 쌩-초보라면 처음에는 그냥 퀘스트를 하시면 된다. 시나리오를 쭉 따라 ‘베른 북부’를 클리어하면 ‘카오스 던전’이라는 던전을 이용할 수 있다. 카오스 던전에서 아이템들을 얻으면서 게임 중반까지 진행할 수 있다. 퀘스트를 진행 하다 보면 뭔 이상한 선박 업그레이드 퀘스트가 있는데, 이건 뭐냐면… ‘일일 에포나’라는 일간 퀘스트를 진행하라는 소린데 굉장히 불친절하게 기획되어 있다. 플레이어에게 ‘로팡 아일랜드’라는 곳에 가서 택배 기사로 일하는 걸 하라는 소리다. 이 퀘스트는 아무런 힌트도 없이 퀘스트를 떨렁 준다. (아니면 힌트를 줬는데 필자가 못 알아먹은 걸 수도 있다.) 즉, 이 게임의 기획자들은 저 퀘스트를 준 순간부터 열심히 일일에포나라는걸 하라고 유저들에게 말하고 있는 거다. 이런 걸 설명해 주는 매뉴얼도 없고, 뉴비 설명 영상에서도 이걸 설명해주는 사람도 딱히 없다. 이 게임은 2가지 즐길 점이 있다고 한다. 시나리오 모드를 쭉 따라가며, 게임 내의 대하 서사를 만끽하는 것이 하나이고, 이후 1415를 찍고 레이드에 참여하기 시작해야 재미있다고 한다. 필자처럼 서버에 아는 사람이 1도 없는 경우 1415를 찍기 위해서는 약 3달에서 4달 정도의 정말 열심히 게임을 해야 한다. 하루에 2~3시간 정도 투자할 수 있다면 대략 1년은 투자해야 할 거다. 그것도 아니면 대략 현금 30만원에서 50만원 정도가 필요하다고 보인다. 가디언 토벌의 경우 초반에는 고인물 플레이어들이 잘 도와주지만, 1300을 넘어가는 순간부터 버스를 타야 한다. 버스를 타는 방법은 게임 내 재화인 ‘골드’를 수급해야 탈 수 있다. 골드는 주간 퀘스트인 ‘어비스 던전’에서 얻을 수 있다. 어비스 던전 자체도 버스를 타는 경우가 있는데, 이런 경우 어비스 던전을 종료하면 총 1500골드가 생긴다면 버스 기사들은 대략 500골드에서 700골드 정도를 부르는 정도로 게임 내 시장이 형성되어 있다. 골드를 수급할 수 있는 또 다른 방법은 현질이다. 현금으로 게임상의 쿠폰인 ‘크리스탈’ 이라는 걸 구입해야 하고, 이거를 게임 내 실질 재화인 ‘골드’로 변경해서 ‘고인물 유저’들에게 골드를 주고 ‘버스’를 탑승할 수 있다. 골드가 없다면 뉴비는 어느 파티에도 낄 수가 없기 때문에 사실상 게임 중반 이후로는 시나리오 진행 외에는 할 수 있는 게 없다. 게임의 시나리오를 진행하여 ‘베른 남부’라는 지역까지 클리어하고 나면 아이템 레벨이 1355가 나오는데 사실상 여기에서 이후부터 뉴비가 스스로 할 수 있는 건 일일퀘스트, 주간 퀘스트 밖에 없다. 베른 남부 시나리오 이후에는 파티를 하지 않고 즐길 수 있는 긴장감 있는 전투 컨텐츠는 없다고 보면 된다. 하지만 앞서 말했다싶이 뉴비는 파티에 잘 받아주지 않는다. 그러나, 또 다른 컨텐츠인 항해가 가능하니, 항해를 하면서 이런저런 수집품들을 모아 보는 것도 도움이 될 수는 있겠다. 이벤트를 자주 확인하자초보들은 진행 중인 이벤트를 잘 캐치해야 한다. 꽤 많은 이벤트를 진행하고, 아이템들을 많이 준다.https://lostark.game.onstove.com/News/Event/Now 게임의 조작기본적으로 마우스 우클릭으로 이동하고, 좌클릭으로 선택한다. 스킬은 QWER와 ASDF이다. 그리고 F1과 숫자키 12345가 있는데, 물약은 12345에 배치하는게 좋다. 배틀아이템은 시나리오 하는 동안은 일단 크게 신경쓰지 않아도 되고, 시나리오 하는 동안은 물약 1개 정도 넣고 다니면 좋다. 일반 물약과 배틀아이템이 다른 점은 일반 물약은 시간을 지나며 천천히 회복되는데에 반해 배틀아이템 물약을 쓰면 바로 적용된다. 그러니 시나리오 중 보스 캐릭터를 만났을 경우에는 배틀아이템을 사용하게 되는 경우가 종종있다. 다른 컨트롤은 굳이 알려고 하지 않아도 된다. 게임을 진행 하면서 서서히 알게 된다. 원정대란이 게임을 하다보면 캐릭터 레벨과 별개로 원정대 경험치가 쌓이게 된다. 이 게임은 캐릭터 레벨 외에도 ‘원정대 레벨’ 이라는게 있는데, 원정대란 본인 계정의 모든 캐릭터를 말한다. 이 원정대 레벨의 경우는 본인 계정의 모든 캐릭터에 적용된다. 그래서 메인 캐릭터 하나를 잘 키워놓으면 다른 서브 캐릭터를 키울 때 좀 덜 고생하게 되는 구조로 플레이가 기획되어 있다. 부캐는 언제 키워야 하나이 질문을 고인물 플레이어들에게 하면 「배럭(서브 캐릭)」을 키우라는 조언을 듣게 될 텐데, 초보들은 들을 필요 없는 조언이다. 본인의 첫 번째 메인 캐릭터가 1375가 되어서 아르고스를 따라다닐 수 있게 되어야 겨우 골드 수급이 풀리는 느낌을 받게 되기 때문에 굳이 부-캐를 키우는 자체가 플레이 시 마음을 굉장히 힘들게 한다. 로스트아크는 메인 캐릭터 하나만으로도 해야 할 일이 무지 많은 게임이고, 메인 캐릭터로 달성한 각인 포인트(&#x3D;스킬 포인트), 이벤트 등은 다른 부-캐릭터들에게도 공통 적용되는 방식의 시스템이기 때문에 메인 캐릭터 하나만 정성들여 잘 키우면 되는 게임이다. 도와주는 사람이 없는 초보들은 초반에 골드 수급이 굉장히 부족한 느낌이 들텐데, 초반부터 쭉 진행해서 메인 캐릭터가 아르고스라는 레이드를 따라다닐 수 있을 때 (전투력 약 1375 정도)까지 키우고 다음 캐릭터를 키우기 시작하면 좀 덜 지루하다. 두 번째 캐릭터부터는 ‘점핑권’ 적용이 안 되는 경우가 많으므로 「시나리오 &gt; 베른 북부부터 카던 &gt; 시나리오 &gt; 카던 &gt; 무한 반복」 방식으로 키워야 한다. 초보자들에게 이 게임이 어려운 이유 중 하나는 스킬 포인트 부족이다. 특히 초보자들은 각인 포인트가 모자라서 데미지가 안 나오는 경우가 많은데, 각인 포인트를 올리려면 카오스 던전을 거의 무한에 가깝게 돌아야 한다. 그렇게 해서 두 번째, 세 번째 캐릭터들이 어비스 던전이라고 하는 주간 던전에서 골드를 수급하면 그 돈으로 메인 캐릭터의 전투력을 올려 조금 더 상위 컨텐츠로 진입하면 수급되는 골드량이 조금씩 늘어나는 방식으로 시스템이 기획되어 있다. 그리고 무과금으로는 이 골드 수급 속도를 늘릴 수 없으므로, 골드 수급량을 늘리고 싶다면 어마어마한 현질을 해야 하도록 기획되어 있다. 그러므로, 필자의 입장에서 조언하건데 로스트아크에 푹 빠진 사람이 아니라면 굳이 배럭을 키울 필요는 없다는게 필자의 생각이다. 고인물 플레이어들은 최대 6개까지 돌리라고 해서 정작 필자도 1 메인, 4 부캐를 돌리고 있었지만, 부캐를 2개째 만들고 키우는 순간부터 게임이 더럽게 재미없게 느껴지는 경험을 했다. 초보자들은 모든 골드를 소모하지 말고 항상 예비비를 남겨두자남의 도움을 받기 힘든 초보자들은 게임 내 재화인 골드로 레이드에 따라다녀야 하므로 항상 예비비를 남겨두어야 한다. 골드 수급이 풀린다는 느낌을 받게 되는 시점에 자신의 첫 번째 메인 캐릭터가 아르고스(전투력 1375 정도) 레이드에 참여하게 되는 시점이다. 아르고스 레이드는 운 좋으면 마음씨 좋은 버스 기사를 만나 무료 버스 혹은 전투 컨텐츠에 참여할 수 있지만, 그런 운이 없는 경우 초보자들이 파티에 들어가기가 쉽지 않기 때문에 여차하면 골드를 지급하고 버스를 타야 한다. 아르고스 버스를 언제든 탈 수 있도록 항상 1000골드~2000골드 정도의 예비비를 창고에 남겨둬야 한다. 골드를 지급하지 않으면 초심자들은 레이드에 참여할 수 없는 경우가 상당히 잦다. 필자는 이 부분에서 게임이 뭔가 잘못되었다고 생각하지만, 로스트아크는 이미 고인물 게임이 되어 버렸기 때문에 고칠 방법은 거의 없을 거다. 게임을 처음 시작하는 초보자들에게는 매우 큰 심리적 진입장벽이다. 아마 개발사에서 할 수 있는 최선은 버스 시스템을 공식화해서 우편으로 골드를 지급하는 게 아니라, 시스템적으로 아예 기사에게 골드를 전달하는 방식의 기능을 추가하는 것 정도가 아닐까 싶다. 그나마 다행인 건 전투력 1325 정도까지 달성하면, “오레하 우물”이라는 주간 컨텐츠에는 무료 버스들이 많다. 조건은 게임 끝나고 나타나는 아이템 경매에 참여하지 않는 것 정도로 초심자들이 참여하기 좋은 컨텐츠다. 어차피 경매는 기본 50골드에서 시작이라 초보자들이 쉽게 지르기도 애매하다. 트라이포드앞서 몇 번 언급하였지만, 로스트아크는 알아야 할 내용이 정말 많은 게임이다. 이 게임 내에서만 통용되는 개념이나 용어들이 너무 많아서 그렇다. 그중 하나가 바로 「트라이포드」다. 이 컨텐츠는 낮은 레벨일 때는 있는지도 모를 정도로 신경 쓰지 않다가 어느 순간이 되면 갑자기 중요해지게 되는데, 그 시점은 대부분 캐릭터가 어느 정도 성장한 후이다 보니 트라이포드 작업이 필요한 시점에 그에 알맞은 튜토리얼이나 가이드가 나오지 않는다. 어느 날 갑자기 이 내용을 알아야 게임이 쉽게 진행됨을 스스로 깨닫게 되는 컨텐츠 중 하나다. (지인이 없어서 생기는 문제 중 하나다.) 캐릭터를 한참 키워서 어느 정도 본인이 사용하는 스킬셋과 아이템들이 완성되었다면, 설정에 들어가 트라이포드 보기 기능을 필수로 켜야 하고(인터넷 검색 요망), 트라이포드 작업을 해야 한다. 아이템에 트라이포드를 세팅하는 게 시나리오를 완수하고 레이드로 넘어야 할 때 핵심이 된다. 트라이포드와 관련된 내용은 유튜브에서 검색하면 많은 내용이 나오므로 참고하시기 바란다. 다만, 이 포스팅은 ‘알려주는 사람이 없는 초보들’을 위해 작성한 문서이기 때문에 유튜브에 관련해서 하나 추가로 언급해야겠다. 유튜브에서 로스트아크 관련 컨텐츠를 찾으면, ‘1415니, 1445니’ 하면서 알아들을 수 없는 상태의 캐릭터들을 많이 언급할 텐데, 이 게임이 고인물 게임이라 그렇다. 저 숫자는 캐릭터의 아이템, 스킬 등을 총합하여 전투력을 의미하는 것이며, 1415까지 간 사람은 사실상 유튜브를 찾아볼 필요가 없을 정도로 게임을 이해한 사람일텐데 ‘뉴비를 위한’이라는 타이틀을 달고 영상들이 올라온다. 그냥 대충 개념만 알고 넘어가면 된다. 심지어 이 글을 쓰는 필자는 1445까지 만들고 접었다. 너무 힘들어서. 그 이상은 혼자서는 도저히 못하겠더라. (커뮤니티에 들어갈까 고민했지만, 그 고민할 생각에 접자 싶어서 접었다.) 또 하나 더 알려두자면, 로스트아크는 캐릭터 성장에 제한을 걸어두고, 이 제한을 어느 정도 우회하여 빠르게 키우고 싶은 경우 현질을 하도록 기획해둔 게임이다. 그래서 처음엔 하루에도 수십번씩 많이 강해지다가 점점 빈도가 줄어 어느 순간 하루에 한 번씩만 강해진다. 그리고 어느 순간이 되면 일주일에 한 번, 아주 조금 강해진다. 캐릭터의 성장 속도가 점점 느려진다는 점도 트라이포드 관련해서 알아두어야 하는 내용이다. 트라이포드 작업 하다보면 정말 정말 정말 정말 x 1000000000 ‘꽝’이 많이 나오기 때문이다. 뉴비 가이드 3편에서 계속…","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"게임","slug":"소프트웨어/게임","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EA%B2%8C%EC%9E%84/"}],"tags":[{"name":"게임","slug":"게임","permalink":"https://xeppetto.github.io/tags/%EA%B2%8C%EC%9E%84/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"놀자","slug":"놀자","permalink":"https://xeppetto.github.io/tags/%EB%86%80%EC%9E%90/"},{"name":"즐기자","slug":"즐기자","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B8%B0%EC%9E%90/"},{"name":"재밋다","slug":"재밋다","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EB%8B%A4/"},{"name":"매뉴얼","slug":"매뉴얼","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EB%89%B4%EC%96%BC/"},{"name":"안내서","slug":"안내서","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EB%82%B4%EC%84%9C/"}]},{"title":"[Games] 1편. 로스트아크 진짜 뉴비를 위한 여행 안내서 (1/3)","slug":"소프트웨어/Games/01-Lostark-Newbie-Travel-Guide-1","date":"2022-04-02T07:02:00.000Z","updated":"2022-04-02T07:02:00.000Z","comments":true,"path":"소프트웨어/Games/01-Lostark-Newbie-Travel-Guide-1/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Games/01-Lostark-Newbie-Travel-Guide-1/","excerpt":"","text":"목차 들어가기에 앞서 ┕ 1.1 본 포스팅의 컨셉 안내 ┕ 1.2 읽기 전 양해사항 알림 ┕ 1.3 게임 리뷰와 팁을 작성하는 개인적 감상 본 매뉴얼의 대상자와 비-대상자 구분 ┕ 2.1 본 매뉴얼을 읽어야 하는 분들 ┕ 2.2 본 매뉴얼을 읽을 필요가 없는 분들 로스트아크를 살짝 찍어먹어 보고 선택하고 싶으신 분들 로스트아크라는 게임에서 사용자들의 특징 로스트아크를 한 번 해볼까 말까 고민하고 있다면 ┕ 5.1 시간을 얼마나 낼 수 있는지 고민하자. ┕ 5.2 이런 사람은 잘 즐길 수 있다. ┕ 5.3 이런 사람은 하지 마라. ┕ 5.4 이런 사람은 이 게임을 무과금으로 할 수 있다. ┕ 5.5 과금을 하려는 사람들에게… 게임은 언제 시작해야 유리한가 고민에 대한 조언 현질 계산법 게임에 대한 개인적인 감상 들어가기에 앞서1. 본 포스팅의 컨셉 안내본 포스팅은 새롭게 로스트아크를 해 볼 예정인 완전 초보 사용자를 위한 게임 전 사전 지침서 정도의 컨셉으로 작성하였다. 그러니, 누군가 ‘로스트아크라는 게임을 한 번 해봐야 하나?’라는 생각이 들었다면, 본 포스팅을 한 번 읽어 보아도 좋으실 듯하다라고 필자의 「셀프-추천사」를 남겨본다. 본 포스팅의 소제목은 다음과 같이 잡았다. 「진심 로스트아크를 한 번도 안 해본 진짜 뉴비가 아는 사람 0도 없는 서버에서 캐릭터 키워본 진심에서 우러난 경험 공유」 이 글은 공략처럼 보이지만 사실상 안내서에 가깝다. 필자가 이런 식의 게임 공략&#x2F;안내서를 쓰는 건 십 몇 년 만의 일이다. 10대 때 게임을 좋아해서 주변에 게임 관련된 사람들이 많았고, 아마추어 게임팀에 초청 받아 버추얼파이터 세계 대회 랭커들과 게임을 해본적도 있다. (‘이게라우’님과 ‘신권제프리’님에게는 1승을 해봤으나 ‘아키라꼬마’님에게만은 1승은 커녕 한판도 못이겼다. ㅠㅠ) 20대엔 아르바이트로 게임 번역 알바를 하곤 했었고, 일만 하고 돈 뜯기거나 한 적이 많다. 결국 첫 회사를 게임 회사에서 시작하였으나, “게임을 만드는 걸 좋아하는 사람”으로서 “게임 플레이만 좋아하는 사람들”과 일하는게 필자로선 좋은 경험이 아니었다. 그런 경험들 때문에 “게임은 그들의 영역으로 두자. 난 즐기기만 하고, 더 이상 개입하지 말자”라는 개인적 다짐이 있었지만… 로스트아크는 공략을 정리해 보고 싶었다. 정말 꽤 재밋었다. 2. 읽기 전 양해사항 알림본 포스팅은 철저하게 필자의 개인 느낌과 경험에 의해 작성하고 있으며, 필자가 게임에서 경험한 느낌이나 사실은 실제 이 게임의 기획 의도와 다를 수 있음을 미리 양지 드린다. 이 게임을 오래 해오신 유저들 입장에서는 본 포스팅의 내용이 이해가 안 되어 따지고 싶거나, 사실과 달라 필자가 무척 한심해 보이거나, 지적하고 싶거나, 혹은 자신의 생각과 달라 화가 나실 수도 있겠다. 분명히 밝히건데 게임 서너달 해 본 필자가 초보로서의 느낌을 정리한 것이다. 읽다가 그런 기분이 드시는 분들은 굳이 끝까지 읽지 마시고 로스트아크를 하며 느낀점으로 넘어가시기를 추천한다. 필자가 기록한 내용 중 틀린 부분이 있다면 댓글 남겨 주시기 바란다. 지적은 달게 받겠으나, 글을 고칠지는 모르겠다. 왜냐하면 이 매뉴얼을 작성하고 있다는 의미는 이미 게임을 접고 안하고 있다는 의미이므로… 게다가 필자의 블로그는 Github 계정을 가지고 있어야 댓글을 달 수 있으므로, 게임을 하시는 분들이 깃헙 계정을… 가진 케이스가 얼마일까 싶어 딱히 댓글이 달릴 거로 기대하지 않는다. 필자의 로스트아크에 대한 감상은 로스트아크를 하며 느낀점에 기록했다. 다음 글은 필자가 이 게임을 하면서 진짜 개인적으로 느낀 점, 인상적인 점, 그리고 개선되었으면 하는 점들에 대해 기록하였으므로, 본 포스팅 보다는 훨씬 객관적인척 하지 않고 개인적인 감정 공유의 느낌이라 이 글보다는 훨씬 읽기 괜찮으실 거라 생각한다. 그리고 이 글에는 사람들의 눈길을 끌만한 이미지 삽입은 지양하려 한다. 이런 글은 사실 운영팀에서 발행해야 적절한 글이라, 필자는 플레이어로서해야 하는 선까지만 할 것이고 그 이상의 관심은 지양하고 싶어서다. 3. 게임 리뷰와 팁을 작성하는 간단한 개인적 감상필자는 게임을 좋아한다. 나이는 이미 중년이 훌쩍 지났는데, 남들은 나이 들면 게임이 재미없어진다는데 필자는 지금도 게임 플레이를 좋아한다. 시간이 없어서 못하지, 휴가 시즌이 되면 꼭 서너시간 빼서 게임 플레이를 한다. FPS 게임과 PvP 위주의 요새 잘 안 하고 있다. 대부분의 FPS 게임들이 스토리 라인을 따라가는 게임성으로 대결하기보다 PvP 컨텐츠로 승부를 보는 거 같아서 그렇다. PvP 게임을 하면 그 특유의 욕설이 가득한 채팅창이나 음성 채팅이 싫어서 그런 게임은 하지 않는다. (FPS 게임도 PvP만 아니면 좋아한다.) 필자는 게임을 좋아한다. TRPG라는 게 뭔지 사람들이 모를 때부터 ‘마법의 마을’이라는 매직:더개더링 + TRPG 사이트를 운영했었다. 그리고 게임 회사에도 근무했었다. 게임 업계를 그만둔 이유는 게임 업계에서 일하고 나니 게임이 일처럼 느껴지고, 그 좋아하던 애니메이션도 안 보게 되더라. 왜냐하면 게임을 보면 게임 자체를 즐기기보다 “이건 왜 이렇게 만들었을까? 이건 어떻게 만들었을까? 이 게임은 기획이랑 애니메이션이 사이가 안 좋은가, 왜 기획과 애니메이션이 엇박자야?” 따위의 생각이 들다 보니 게임을 즐기는 게 아니라 자꾸 과거 게임 회사에서의 경험이 겹치며 다른 생각들을 하게 되더라. 그런 필자의 성격에도 불구하고 로스트아크는 재밌다고 느꼈다. 이 게임은 분명히 호불호가 좀 있을 듯하다. 특히 전투에서 새로운 문법을 제시했다 보니 어렵다고 느끼는 유저들이 많을 수밖에 없는 게임이다. 필자는 로스트아크의 전투가 꽤나 잘 만들어졌다고 생각하지만, 이런 식의 전투를 좋아하지 않는 사람들도 분명히 많을 거다. 기존 블로그에는 게임에 대한 리뷰나 소감을 남겼지만, (최근 몇 년 동안 블로그를 쉬고) 다시 블로그를 재정비하면서 게임 컨텐츠는 만들지 않으려 다짐했었다. 그 다짐을 깨게 된 이유는 나이가 들어도 게임이 재밌다는 점 때문이기도 하지만, 로스트아크라는 게임이 참 잘 만든 게임이라 생각해서다. ‘이 게임 한번 해 볼까?’ 고민하는 누군가, 혹은 ‘시작은 했는데 혼자 하려니 답이 안 나오네’ 싶은 누군가에게 아주 조그마한 도움이 되어볼까 싶어서 다시 게임 컨텐츠를 작성해 본다. 본 매뉴얼의 대상자와 비대상자 구분1. 본 매뉴얼을 읽어야 하는 분들이 포스팅은 아래의 사람들을 대상으로 작성하였다. 로스트아크를 “한 번 해볼까 말까” 고민하고 있는 사람 로스트아크를 한 번 해보겠노라고 마음먹은 사람 로스트아크를 이미 시작했는데, 필자와 같이 아는 사람이 0.1도 없어 혼자 고생하고 있는 사람 로스트아크를 이미 시작했고, 재미는 있는 거 같은데 무과금을 할지, 현금으로 살 지 고민하는 사람 위 목록 중 하나가 본인이다 싶으면 이 안내서를 읽어보시면 지렁이 눈꼽만큼이라도 도움이 되실 수도 있다. 아닐 수도 있고. 2. 본 매뉴얼을 읽을 필요가 없는 분들이 포스팅은 아래의 사항에 해당하는 사람들에게 의미가 없는 내용이다. 이미 로스트아크를 오랫동안 즐기고 계시는 분 그냥 뭔 게임이든 액수 상관없이 현금 막 지르면서 하는 걸 즐기는 분 MMO 카테고리의 게임에 관심이 없는 분 이미 로스트아크 내에서 ‘고인물로 분류되는 친구가’ 있는 분 이런 분들은 굳이 본 매뉴얼이 도움이 안 되실 거라 읽어볼 가치가 없다고 말씀드린다. 로스트아크를 살짝 찍어먹어 보고 선택하고 싶으신 분들로스트아크 초반의 시나리오를 따라가다 보면 두 번의 인상적인 인-게임 시네마틱(in-game cinematic) 게임 플레이가 있다. 게임 플레이시 사용하는 엔진 그 자체로 장면을 연출했기 때문에 연출 중간에 바로 카메라 시점만 변경되면서 게임 플레이로 변경되기 때문에, 플레이어가 그 시나리오 자체에 개입된 듯한 연출을 보여준다. 그 두 번의 훌륭한 플레이 중 하나는 ‘영광의 벽’ 전투이고, 다른 하나는 ‘남겨진 바람의 절벽’ 전투다. 인터넷을 검색하니 이에 대해서 혹평하는 사람들도 꽤 있어 보이던데 온라인 게임에서 이정도 연출을 인-게임으로 구현한건 정말 게임 개발에 참여한 인원들을 갈아 넣었다는 표현이 맞지 않나 싶다. ‘남겨진 바람의 절벽’은 시나리오를 진행하면서 주인공 캐릭터들에 감정 이입을 좀 해야 플레이 상의 재미를 느낄 수 있으나, ‘영광의 벽’ 전투는 앞 뒤 정황을 모르더라도 그 자체로 썩 훌륭한 장관을 연출하므로 ‘살짝 찍어먹어 보고 결정하고 싶은 분들’께 꼭 해보시라고 추천하고 싶다. 유투브 검색 결과 : https://www.youtube.com/results?search_query=영광의벽 그 외에도 게임을 진행하다보면 그림자 섬에서 탑에 올라갈 때 카메라 시점이 바뀌며 까마귀가 날아가는 연출이라던가, 탑을 기어오르는 악마, 스토리 중간에 인물들끼리 전투하는 장면, 갈등 장면 등이 굉장히 인상 깊다. 로스트아크라는 게임에서 사용자들의 특징여기저기의 커뮤니티에 꽤 많이 검색되는데 그에 홀려 필자도 서너 달 정도 열심히 플레이했던 게임이지만, 게임을 접고 되돌아보니 그 커뮤니티의 글들이 바이럴마케팅이었나 싶다. 분명히 자기는 초보라고 글이 올라오는데, 올라오는 스크린샷을 보면 절대 서너 달 해서 달성할 수 없는 수준의 아이템이나 복장(이 게임은 복장이 고인 물의 지표 중 하나다) 착용 사진들이 올라와 있다. 로스트아크라는 게임에서 사용자들의 특징 중 하나는 ‘겸손한 게 아니라’ 그냥 ‘자신이 뉴비라고 우기는’ 상황들이 자주 연출된다. 게임 내에 뉴비를 도와주는 플레이어들이 유독 많은 게임이라서 그런 게 아닌가 싶다. 실제로는 굉장히 고렙인 메인 캐릭터를 가지고 있으면서 자신이 뉴비니 게임 내 재화를 지원해 달라는 앵벌이 플레이어들도 있고, 자신은 뉴비니 버스 타는걸 당연하게 생각하는 플레이어들도 있다. 또 그런 플레이어들이 많다 보니 뉴비든 뭐든 그냥 무시하고 욕부터 찍어 박는 플레이어들도 있고. 그러니 이 게임을 할 때, 그리고 필자가 작성한 이 불필요한 팁들을 작성한 페이지를 볼 때는 모두 자신을 기준으로 생각하면 되고, 남이 뭐라던 크게 신경 안쓰셔도 된다는 말을 먼저 남기고 이후 이야기 시작하려 한다. 로스트아크를 한 번 해볼까 말까 고민하고 있다면1. 시간을 얼마나 낼 수 있는지 고민하자.로스트아크는 MMORPG이다. MMORPG는 Massive Multi-player Online Role Playing Game의 줄임말로, 특정 역할을 담당하는 캐릭터를 선택하여 플레이하는 게임인데, 혼자 하는 게임이 아니라 여러 역할을 담당하는 여러 플레이어가 함께 모여 노는 게임이다. 그래서 플레이하려면 시간이 많이 필요하다. 충분한 시간이 있지 않다면 제대로 즐기기 어려울 수 있다. 게임을 시작하기 전에 현실의 자신과 게임의 자아가 공존할 수 있는지, 충분히 시간을 투자할 수 있는지부터 고민하자. 2. 이런 사람은 잘 즐길 수 있다. • 로스트아크는 게임 내에서 알아야 할 내용들이 정말 많다. 그래서 게임 초반에는 해도 해도 모르는 것들이 튀어나온다. 그러니 자기가 뭔가를 잘 모르는 상황에서도 다른 플레이어들에게 잘 물어보고 아무하고 친해지는데에 익숙한 사람이라면 이 게임에 적응하기 좋을 거다. • 뭔가 새로운 걸 받아들이는 데에 빠르고, 잘 받아들이는 사람에게 좋은 게임이다. 로스트아크는 알아야 할 게 정말 많은 게임이지만, 그 세부 사항들을 알아가는 걸 자연스럽게 할 수 있도록 기획적인 유도가 잘 되어 있는 게임이 아니다. 현재는 그렇다. 예전 자료들을 찾아보면 아마 패치 이전엔 막대한 양의 퀘스트를 진행하면서 게임에 필요하며 알아야 할 내용들을 알아갈 수 있도록 기획을 해뒀던 듯하다. 그렇게 플레이어들을 게임에 녹아들게 했던 거 같은데, 시즌이 넘어가면서 새로 시작하는 유저들이 퀘스트에 치여 게임을 포기하지 않도록 하기 위한 조치였는지 퀘스트들이 삭제되어 있는 느낌을 받았다. 그래서 게임의 세부 사항들에 익숙해지기 전에 게임을 하면서 알아야 할 내용, 그와 관련된 컨텐츠들을 공부하듯이 학습해야 한다는 느낌을 받게 된다. 이 게임은 시나리오를 진행하다가 막히는 구간이 나타나면 게임 내 잔존하는 고인 물 사용자들에게 질문을 던져 답변받고, 때로는 그들에게 비굴하지는 않을 정도까지 도움을 청해야 게임을 진행할 수 있다. 그러니 본인 성격이 그렇게 되지 않는다면 “지인을 찾아라.” 편을 읽어보고, 그게 안 된다면 접어라. 시간 낭비다. 3. 이런 사람은 하지 마라. • 로스트아크는 Massive Multi-player Online(MMO) 성향을 정말 잘 구현해 낸 게임이다. 그래서 로스트아크는 디아블로처럼 혼자 열심히 하면 어떻게든 클 수 있는 게임이 아니다. 로스트아크는 정말 잘 설계된 MMO 게임이며, 전반적인 컨텐츠가 MMO 스타일의 협동과 파티 플레이로 구성되어 있다. • 몇 번을 강조해도 아깝지 않은데, 이 게임은 전형적인 MMO(다수의 플레이어가 온라인에서 군집하는) 성향의 게임이다. 그러니 그냥 남의 도움 없이 혼자 뭔가를 해보려는 사람들에게 적합한 게임은 확실히 아니다. 철저하게 다른 사람들과 협업하며 도움을 받고, 도움을 주면서, 협동하면서 즐기는 게임이다. • 그러니 주변 지인 중에 이 게임을 하는 사람이 없고, 함께 커보자고 꼬셔봐도 별 감흥이 없다면 애초에 시작하지 않기를 추천한다. 성장하는 과정이 굉장히 괴롭다. 4. 이런 사람은 이 게임을 무과금으로 할 수 있다. • 로스트아크는 철저하게 속도 조절이 되어 있는 게임이다. 캐릭터 하나가 하루에 얻을 수 있는 자원 한계를 (기획으로) 정해두었기 때문에 캐릭터를 키울 수 있는 일일 한계가 있도록 설계해 두었다. • 그러나, 그래서 무과금 유저들에게는 할만한 게임일 수 있다. 캐릭터가 남들보다 좀 늦게 크더라도, 캐릭터 1개만 플레이하면서 하루에 1~2시간 정도만 게임을 즐기는 플레이어들은 무과금으로도 슬슬 하기에 무척 적합한 게임이다. • 본인 캐릭터가 좀 늦게 크더라도 1개만 플레이하면서 슬슬 즐기는 사람에게 적합하다. (하다보면 다른 캐릭터를 키워야 하는 상황이 오는데, 그런 상황을 잘 넘길 수 있다면…) 5. 과금을 하려는 사람들에게… • 필자는 어떤 게임을 하던 과금을 아예 안 할 생각으로 게임을 하지는 않는다. 필자도 예전엔 게임 회사에 근무했었기 때문에 게임을 하다 보면 뭔가 모를 동종업계 의식 같은 게 발동해서 그런 듯 하다. 그래서 어느 정도 재밌구나 싶으면 어떻게든 결제한다. (모바일 게임의 1만 원 짜리 광고 제거 상품이라도…) • 로스트아크가 유명해진 이유 중 하나는 다른 경쟁사 게임들에 비해 현금구매 유도가 적다는 점이다. 이 게임은 과금을 많이 한다고 빨리 크거나, 업적들을 달성하지 못한다. • 이 게임의 바이럴 홍보 방식 중 하나는 “우리는 Pay to Win(현질하면 이김)이 아니다, Pay to be faster(현질하면 더 빨리 진행할 수 있음)” 이라면서 현질을 무리하게 유도하지 않는 방식이다. (물론 그렇다고 공짜로 플레이할 수 있다는 소리는 아니다.) • 근데 초보자는 이 게임을 처음 시작하면 뭘 과금해야 할지 굉장히 난감하다. 어떤 아이템이 게임 플레이에 영향을 주는지 혼자 알아내기가 정말 어렵기 때문이다. 그러니 과금을 하려는 사람은 로스트아크를 이미 플레이하고 있는 지인에게 뭘 과금해야 하는지 물어봐라. 혹은 게임상에서 플레이어들에게 과금 아이템에 대해 도움을 요청하자. 굉장히 친절하게 알려주는 고마운 플레이어들이 꼭 있다. • 사족 : 분명히 로스트아크는 현질을 유도하지 않는다. 게임을 좀 빠르게 진행할 목적으로 자발적으로 현질하게 만들 뿐. 필자는 재밌는 게임을 공짜로 하지 않기 때문에 재밋다고 느낀 순간부터 꽤 현금을 집어넣었으나, 결국 초심자들에게는 기존 플레이어들의 커뮤니티에 참여하기가 어려운 ‘고인물 게임’이라는 느낌을 받았다. 그래서 어느 순간 그냥 전부 삭제하고 끝냈다. 게임은 언제 시작해야 유리한가로스트아크는 게임에 혹은 회사에 뭔가 이벤트가 있어서 프로모션 광고를 할 때 들어가야 한다. 그러면 이벤트 선물도 받을 수 있고, 게임 진행에 필요한 아이템들도 많이 준다. 평소에 섣불리 들어가면 개고생하게 된다. 고민에 대한 조언필자는 로스트아크가 참 잘만든 게임이라고 생각하고, 한 번 해 보기를 권한다. 하지만, 분명히 고민을 정확히 해야한다. 이 게임을 즐기려면 크게 3가지가 필요하다. 돈 고인물 친구 (or 함께 고생할 친구) 시간 이 게임은 MMO 기반의 게임이니 시간 많이 드는 거야 그러려니 하고… 고인물 친구 존재 여부에 따라 게임에서 즐길 수 있는 컨텐츠의 양과 속도가 달라져, 게임성이 바뀌는 부분이 실제 게임 플레이에 좀 많이 영향을 미친다. 그러니 인제 와서 굳이 로스트아크를 즐겨보고 싶다면 먼저 주변 지인을 찾아보는 게 좋겠다. 필자는 어땠을까? 필자는 아무도 모르는 상태에서 우연히 게임을 시작했다가 너무 괴로운 과정을 거쳤다. 게임을 진행할수록 난이도가 점점 올라간다. 필자가 이런 말을 하는 이유는 여러 가지가 있다. 지금 쓰는 1편인 「여행 지침서」에서도 언급하겠고, 또 뒤에 이어질 2편, 3편의 글에서 자세히 다룰 예정이다. 짧게 말하자면, 필자가 이 공략을 쓰는 이유는 이렇다. 필자의 고통을 누군가 다시 겪게 하고 싶지 않다는 점. 그래서 오랜만에 게임 공략… 까지는 아닌 소개 글을 써보기로 했다. 현질 계산법상점에서 크리스탈을 계산해보면 크리스탈 3600개는 10만원이다. 즉, 1개&#x2F;27.5원이다. 크리스탈 최저가 : 1개&#x2F;27.5원 그러므로, 크리스탈 100개면 2750원 그러므로, 크리스탈 100개를 주면 골드 1700~1950을 살 수 있다. 그러므로, 10만원을 쓰면, 크리스탈 3600개로 골드를 약 61,200개~70,200개 정도 수급할 수 있다. (서버마다 다르다.) (2022년 1분기 기준) 아르고스 버스는 대략 600골드에서 900골드, 평균 700골드 정도이다. 그러므로 크리스탈로 변환시 약 40개 정도이다. 한 판에 1000원에서 1500원 정도다. 매주. 현질을 왜 계산하냐하면 아이템 레벨 1385를 맞추고 나면 아르고스라는 어비스 던전을 갈 수 있고 여기에서 상위 등급의 아이템을 맞출 수 있다. 하지만 경매장에서도 살 수 있다. 골드로. 아이템을 사거나 맞추고 나서는 계승을 하고, 다시 제련을 해야 한다. 골드로. 그러니, 빠르게 크고 싶다면 초반에 30만원~50만원 정도를 쓰면 된다. 최소 값이다. 빠르게 키우고 싶으면 필자 계산으로는 약 150만원에서 200만원 정도를 쓰면 어느 정도 할만큼 키우기가 가능할 듯 하다. 아니면 천천히 6개월에서 12개월 정도 보고 게임을 플레이하면 될거다. 어디 어디의 커뮤니티 게시판에는 무과금으로 이만큼 키웠어요라는 글들이 올라오곤 하는데, 한 달 정도 해보면 알거다. 그거 진짜 오래한 고인물이거나, 그 회사 마케팅 바이럴인듯 하다. 근데, 사실 초보들은 각인이 모자라서 아이템 레벨이 높아도 딱히 할 수 있는건 많이 없다. 그리고, 초심자에게 로스트아크의 진입 장벽은 ‘현금 50만원’, ‘어느 정도 하려면 150만원’ 혹은 ‘1년치 인생의 시간’이라 보인다. 게임에 대한 개인적인 감상게임에 대한 감상을 적다 보면 게임을 즐기는 유저 관점에서의 단점들이나 아쉬운 점들을 나열하게 되는 경향이 짙어지다 보니 가능한 이를 줄이려 노력했다. 혹시라도 로아 개발팀이 이 글을 읽는다면 너무 실망하지 않으시기를. 게임에 대한 투덜이 많다는 건 그 게임을 사랑한다는 의미일테니까. 로스트아크, 이 게임은 재밋다. 와우가 내 생에 가장 길게한(총 6개월, 확장팩 출시시마다 2달씩 3번) 게임인데, 로아가 그 다음에 랭크되었다.한국 게임인데 한국 게임 같지 않은 독특한 성격을 가지고 있고, ‘게임성’ 이라고 불리울 수 있는 구간마다 필자가 게임 회사에서 일할 때 주장하던 내용들이 거의 대부분 반영되어 있어, 플레이어로서도 그리고 예전에 게임 회사에 일했던 사람으로서도 플레이를 하면서 굉장히 놀라워 하면서 했다. (물론 단점들도 많다.) 게임 내 연출이 모든 게임성을 압도하는 미친 레벨의 연출이 돋보이는 게임이다. 시나리오 모드에서는 게임의 연출이 좋으므로 한 번 해볼만한 게임이다. 특히 로스트아크의 초반 스토리인 루테란 동부까지는 짜임새가 매우 좋다. 근데, 루테란을 떠나면서 스토리가 뭔가…. ‘응? 뭐지?’ 하게 되는게 있다. 뭔가 산만하게 느껴진다. 비밀기지 퀘스트는 좋았다. 필자의 경우 꽤 늦게서나 해당 퀘스트를 진행했는데… 페이튼까지 진행하며 “악마, 이 나쁜 쉑희들 (부들부들)” 하며 캐릭터에 감정이입하고 있는데 느닷없이 “이 모든 건 다 연출된거야” 라고 말해줘서 고마웠다. 몰입하고 있다가 약간 깨기도(?) 했고. 근데 그런게 이 게임의 장점으로 보였다. 예전에 ‘손노리’사의 게임을 하던 감성이어서 반갑기도 했고. 그래픽에 대해서는… 가끔 이 게임을 하다 보면 3D 모델러들을 믹서기로 갈아 넣는 거 같다는 느낌을 받을 때가 있다. 맵이나 애니메이션들을 보고 있으면 ‘사람들이 찾아가지 않을 거 같은 맵의 구석구석까지 굳이 이렇게 자세한 작업을 해야 했을까?’ 싶은 생각이 든다. 그래픽 팀의 장인 정신(?) 혹은 ‘내가 이렇게 언리얼을 잘 다룬다.’(?) 라고 말하는 듯한 느낌을 받았다. 게임은 와우보다 늦게 출시되었지만, 와우보다 훨씬 가볍다. 라이트하다. 근데 배경 텍스쳐가 튈(?)때가 있다. 엔진의 이슈인지 그래픽카드 호환 이슈인지 모르겠다. 여러 캐릭터들을 동시에 키우며 플레이어의 플레이 자체가 성장하도록 게임 플레이 기획을 고려했다고 보인다. 그런데 조금 늦게 크는 감이 있고, 현질을 어떤 식으로 해야 하는지 안내가 적절치 않은 부분이 아쉽다. 한 달을 열심히 플레이해야 뭘 현질해야 하는지를 파악할 수 있다. 즉, 게임에 대한 진입 난이도가 무척 높다. 확실히 이 집은 맛집인데… 뭐랄까… 딱히 불친절하지는 않지만 그렇다고 붙임성 좋지도 않다. 현질 좀 해 주세요 징징 하는 다른 게임들보다 훨씬 점잖은 방법으로 현질 아이템들을 팔지만, 그 또한 딱히 영업을 하지도 않는다. (아니, 사실 크리스탈 영업은 좀 했으면 좋겠다.) 그래서 이 집을 잘 아는 친구가 같이 해주면 참 좋겠다. 위에서도 몇 번 언급하였지만, 지인이 먼저 플레이하고 있는 경우가 가장 유리하다. 이 게임을 하는 지인이 없거나, 혼자 조용히 해보고 싶은 사람이라면 뉴비 가이드 2편을 추천해 드린다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"게임","slug":"소프트웨어/게임","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EA%B2%8C%EC%9E%84/"}],"tags":[{"name":"게임","slug":"게임","permalink":"https://xeppetto.github.io/tags/%EA%B2%8C%EC%9E%84/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"놀자","slug":"놀자","permalink":"https://xeppetto.github.io/tags/%EB%86%80%EC%9E%90/"},{"name":"즐기자","slug":"즐기자","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B8%B0%EC%9E%90/"},{"name":"재밋다","slug":"재밋다","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EB%8B%A4/"},{"name":"매뉴얼","slug":"매뉴얼","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EB%89%B4%EC%96%BC/"},{"name":"안내서","slug":"안내서","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EB%82%B4%EC%84%9C/"}]},{"title":"[斷想] 난 뉴스를 좋아하지 않는다","slug":"Xeppetto/단상(斷想)/20220401-I-dont-like-commercial-news","date":"2022-04-01T07:01:00.000Z","updated":"2022-04-01T07:01:00.000Z","comments":true,"path":"Xeppetto/단상(斷想)/20220401-I-dont-like-commercial-news/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20220401-I-dont-like-commercial-news/","excerpt":"","text":"한 참 떠들썩했던 시절이 지나간다. 정말 관심 없는 사람들 덕분에 정치, 사회 뉴스에 별 관심이 없는 나에겐 너무 괴롭고 가혹한 시간이었다. 알고 싶지 않은 정보들에 무차별로 노출되고, 관심 없는 선택을 강요 받았다. 필자는, 아니 더 확실히 표현하기 위해 주어를 명확히 해야겠다. 나는… 시사를 좋아하지 않는다. 뉴스라는 것도 결국은 광고의 성향을 가진 정보의 일종일 뿐, 실제 올바른 정보도 아니고 믿을만한 가치도 존재하지 않는다. 다들 누가 옳고, 누가 그르다며 외쳐대 봐야 나에겐 그런 시끄러움에 대한 짜증만 유발할 뿐이다. 필자가 무언가 뉴스에 관심 가지는 기준은 하나다. “10년 뒤 나에게 물어보자, 이거 가치 있냐?” 저 질문에 필자 스스로 생각해서 내면의 메아리가 긍정적이지 않다면 관심 가지지 않는다. 필자는 특히 사실적인 척하며 자기네 이득 챙기기에 급급한 정치 뉴스가 너무 혐오스럽다. 제발 정치 뉴스를 싫어하는 사람에게는 선거철이든 뭐든 정치 소식, 정치 이야기 안 보고, 안 들을 수 있는 제도적 장치가 마련되길 기원한다. (필자처럼 정치에 대한 논쟁이나 관련 이야기 싫어하는 사람이 거부 의사를 밝혔음에도 계속 정치 이야기하면 징역 10년… 막 이렇게 해버리길…) 한국의 정치 뉴스는 정말 필자가 가장~~~ 듣기 싫어하는 광고다. 한국의 정치 뉴스가 불필요한 쓰레기 정보인 이유는 여러 이유가 있지만, 한국 언론 지형의 문제가 가장 크다. 한국 언론은 정치를 분석하지 않는다. 홍보를 하고, 중계를 한다. 마치 스포츠 게임처럼. 난 내가 관심 없는 스포츠 게임을 쳐다보고 있을 마음이 전혀 없다. 필자의 짧은 생각에 대해 간단히 적습니다. 댓글 기능은 막아둡니다.【단상】의 글들은 행복하게 살고자 하는 필자 개인의 생각이므로 딱히 누군가의 댓글을 받고 싶어 쓰는 글은 아니니, ‘이 사람은 이런 쓸데 없는 생각을 하고 사는 구나~’ 정도로 생각해 주시면 좋겠습니다.굳이 이야기를 나누고 싶으시면 제 Social Network 계정으로 와주세요. 감사합니다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"개인 의견","slug":"개인-의견","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%9D%98%EA%B2%AC/"},{"name":"개인 취향","slug":"개인-취향","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%B7%A8%ED%96%A5/"},{"name":"뉴스","slug":"뉴스","permalink":"https://xeppetto.github.io/tags/%EB%89%B4%EC%8A%A4/"},{"name":"내가 싫어하는 것","slug":"내가-싫어하는-것","permalink":"https://xeppetto.github.io/tags/%EB%82%B4%EA%B0%80-%EC%8B%AB%EC%96%B4%ED%95%98%EB%8A%94-%EA%B2%83/"},{"name":"신뢰","slug":"신뢰","permalink":"https://xeppetto.github.io/tags/%EC%8B%A0%EB%A2%B0/"},{"name":"거짓","slug":"거짓","permalink":"https://xeppetto.github.io/tags/%EA%B1%B0%EC%A7%93/"}]},{"title":"도네리카노 문 닫다","slug":"Xeppetto/ThisBlog/20220401-donaricano-closed","date":"2022-03-31T19:01:22.000Z","updated":"2022-03-31T19:01:22.000Z","comments":true,"path":"Xeppetto/ThisBlog/20220401-donaricano-closed/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20220401-donaricano-closed/","excerpt":"","text":"지난해 중반 즈음 「도네리카노 설정 기록」이라며 야심 차게 후원금 모금을 꿈꾸어 보았지만, 이루어지지는 않다. 필자가 되나 보려고 테스트한 5천원 외 입금은 없었다고 한다. (많은 눈물 ㅠㅜ) 하지만, 열심히 하지 않았기 때문에 억울함은 없다. 열심히 했는데 반응이 없었다면 억울했겠지만. 그래서 앞으로도 별로 열심히는 안하려한다. 앗, 맞다, 잡설이 길었다. 도네리카노가 문을 닫다. 1인 개발자 한 분이 혼자서 감당하기에 너무 벅차다고 느끼신 듯 하다. 위와 같이 2022년 2월 11일부로 서비스 중단을 선언하셨다. 무척 아쉽다. 그리고 개발하신 분께 감사하다는 말씀을 전하고 싶다. 해외의 ‘Buy me coffee’와 비슷한 종류의 한글 서비스가 있어 너무 좋았다. 그리고 한국에서는 ‘Buy me coffee’ 대신 ‘도네리카노’를 설정할 수 있어서 좋았다. 개발하시던 분 꼭 행복하시고 평안한 삶을 사시기를 기도해 본다. 그리고, 개인적인 바람이지만 네이버페이나 카카오페이, GS숍, 11번가, 쿠팡 같은 거대 거래 시장에 뛰어 들었으면 싶다. 이런 아이디어라면 어떨까? • Buy me coffee처럼 구독자가 작가에게 1천원부터 송금할 수 있게 한다. • 작가는 자기 잔고 금액이 5만원 이상일 때 출금할 수 있다. • 출금 시 서비스 제작자&#x2F;회사가 3~10%의 수수료를 가져간다. • 작가가 출금하지 않고 본인들 페이 계좌로 이동시켜, 본인들 쇼핑몰에서 소진 시 수수료 제외한다. (어쨌든 매출로 잡힌다면 회사에도 유리하므로.) 물론 누군가는 수수료가 적다며 논란이 있을 것이고, 누군가는 반대의 경우로 화를 낼 것임을 알지만… 한국의 수많은 블로거들을 위해 이런 서비스 하나쯤은 있어야 하는 게 아닌가 생각이 든다. 특히 페이(pay) 시스템을 가진 대기업이라면, 외부에서 유입되는 후원금을 본인들의 서비스에서 소진할 수 있도록 유도할 수 있기에 충분히 해 볼 만한 서비스가 아닐까… 생각해봤다. 아무튼, 다시 한 번… 도네리카노 개발하시던 분 행복하시고 평안하시기를 바랍니다. 고생하셨습니다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"후원","slug":"후원","permalink":"https://xeppetto.github.io/tags/%ED%9B%84%EC%9B%90/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"},{"name":"도네리카노","slug":"도네리카노","permalink":"https://xeppetto.github.io/tags/%EB%8F%84%EB%84%A4%EB%A6%AC%EC%B9%B4%EB%85%B8/"},{"name":"커피","slug":"커피","permalink":"https://xeppetto.github.io/tags/%EC%BB%A4%ED%94%BC/"},{"name":"즐겁게 글쓰기","slug":"즐겁게-글쓰기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EA%B8%80%EC%93%B0%EA%B8%B0/"}]},{"title":"[Tools] 노트패트++에서 자동완성 끄기","slug":"소프트웨어/Tools/20220214-NotepadPlusPlus에서-자동-완성-끄기","date":"2022-02-14T05:14:00.000Z","updated":"2022-02-14T05:14:00.000Z","comments":true,"path":"소프트웨어/Tools/20220214-NotepadPlusPlus에서-자동-완성-끄기/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Tools/20220214-NotepadPlusPlus%EC%97%90%EC%84%9C-%EC%9E%90%EB%8F%99-%EC%99%84%EC%84%B1-%EB%81%84%EA%B8%B0/","excerpt":"","text":"필자가 사용하는 오픈소스 프로그램 중 Windows OS를 설정할 때마다 자꾸 까먹어서 스스로 한심해하는 부분이 있는다. 그래서 이번엔 아예 정리해 놓고, 필요할 때 꺼내 봐야겠다 싶어서 정리해본다. 목차 자동완성 끄기 자동 줄바꿈 폰트 변경 자동완성 끄기필자가 노트패드++를 윈도우 환경에 설정할 때마다 “이 옵션이 어디에 있었지?” 하며 고생하는 옵션이 있는데, 그게 바로 노트패드++의 ‘자동완성 기능 끄기’다. 처음 한 번 해놓고 자꾸 까먹다 보니 바보처럼 동일한 실수(?) 혹은 삽질(?) 계속하고 있다. 이제 블로그에 적어놨으니 안 잊어버릴 거다. 먼저 설정 - 환경설정으로 이동한다. 나타나는 환결설정 창에서 자동완성으로 이동하면, 기본으로 「함수 및 단어 완성」이 선택되어 있는데, 이 선택을 「함수 완성」으로 변경해 주면 된다. 자동 줄바꿈‘자동 줄 바꿈’ 기능 역시 처음 한번 해 놓고 잊어버리니, 매번 이 기능이 환경설정에 있었는지 어디 있었는지 잊어버리게 된다. 폰트 변경마지막으로는 폰트 변경인데, 의외로 이것도 한 번 설정 후 변경하는 경우가 잘 없다 보니 적어놔야 기억이 잘 날 것만 같은 옵션 중 하나다. 그 외, 또 자주 쓰는 옵션을 발견하게 되면 불현듯 이 글에 추가할 예정이다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Tools","slug":"소프트웨어/Tools","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Tools/"}],"tags":[{"name":"Computer","slug":"Computer","permalink":"https://xeppetto.github.io/tags/Computer/"},{"name":"Tool","slug":"Tool","permalink":"https://xeppetto.github.io/tags/Tool/"},{"name":"Notepad++","slug":"Notepad","permalink":"https://xeppetto.github.io/tags/Notepad/"},{"name":"Notepad","slug":"Notepad","permalink":"https://xeppetto.github.io/tags/Notepad/"},{"name":"자동완성","slug":"자동완성","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EB%8F%99%EC%99%84%EC%84%B1/"}]},{"title":"2022년, 예전 글들 복구 계획","slug":"Xeppetto/ThisBlog/20220108-예전-글들-복구-계획","date":"2022-01-07T17:01:08.000Z","updated":"2022-01-07T17:01:08.000Z","comments":true,"path":"Xeppetto/ThisBlog/20220108-예전-글들-복구-계획/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20220108-%EC%98%88%EC%A0%84-%EA%B8%80%EB%93%A4-%EB%B3%B5%EA%B5%AC-%EA%B3%84%ED%9A%8D/","excerpt":"","text":"2022년 새 해 계획 중 Blogging과 관련된 계획 중 하나는 예전 글들을 다시 그 시절의 날짜로 변환시켜서 공개하는 것이었다. 그리고 그게 가능하도록 Hexo는 Front-Matter라는 속성을 입력할 수 있도록 해준다. 이를 이용하면 특정 글을 해당 아이디어가 떠올랐던 시점으로 저장하여 공개할 수 있더라. 가끔은 ‘이거 언제 다 정리하지?’ 싶은 기분에 막막함이 들기도 할 정도로 많은 수의 메모가 쌓여있다. 필자는 뭔가를 적어두고 정리해 두는 걸 마음 편해하는 경향이 있어서 그렇다. 이전에 쓴 블로그를 다시 시작하는 소회 중 하나인 「내가 블로그를 다시 시작한 이유에 대한 재미없는 긴 이야기」에서 언급한 바와 같이 여러 가지 이유로 블로그에 글을 쓰지 않고 멈추었다 보니 정말 많은 수의 노트와 메모들이 쌓여 있다. 그 중 많은 수의 글들과 메모들은 이미 시기가 지나버려 심폐소생술로 살려내기는 어렵겠지만, 그중에 살릴 수 있는 글과 메모들은 그 아이디어가 떠오른 날짜, 혹은 장문의 글을 썼던 그 날짜의 시간대로 다시 맞추어 공개하고 싶었다. 아마 이 부분이 필자가 블로그를 다시 시작하며 티스토리나 벨로그를 선택하지 않고, JAM Stack들을 선택한 이유인 듯 하다. (필자는 Hexo로 만든 본 블로그 외에도 Jekykll로 개발하는 다른 사이트도 운영 중이다.) 시간이 지나 다시 정리해서 공개하는 글들의 경우는 아래의 두 가지 규칙을 지키려 한다. 필자 스스로 나중에 그 글을 다시 봤을 때 예전 포스팅들을 다시 정리했음을 알아야 하므로, 이를 반드시 해당 포스팅 내에 메모해두고 그 시점에 다시 회고해둔다. 정리한 글은 삭제한다. 예1) 이 글은 20xx년 x월 x일이라고 기록된 필자의 메모 속에서 발견된 자료이므로, 해당 날짜로 블로그를 포스팅합니다. 예2) 20xx년 x월 x일, 글을 정리하며 회고 지금도 쌓여 있는 저 수 많은 페이스북 글들, 원노트, 에버노트, 구글 독스, 구글 노트, 애플 노트, 게다가 수기 노트 등을 빨리 정리해서 블로그에 업데이트해버려야겠다. 필자의 블로그는 새로운 글들만 생산하기보다, 필자가 격렬히 살아왔던 필자의 과거 글들을 타임머신을 태워 하나씩 공개할 예정이다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"새 해 계획","slug":"새-해-계획","permalink":"https://xeppetto.github.io/tags/%EC%83%88-%ED%95%B4-%EA%B3%84%ED%9A%8D/"}]},{"title":"2022년, 새 해 계획","slug":"Xeppetto/About-Me-and-My-thought/20220102-2022년-새-해-계획","date":"2022-01-02T13:01:02.000Z","updated":"2022-01-02T13:01:02.000Z","comments":true,"path":"Xeppetto/About-Me-and-My-thought/20220102-2022년-새-해-계획/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20220102-2022%EB%85%84-%EC%83%88-%ED%95%B4-%EA%B3%84%ED%9A%8D/","excerpt":"","text":"2010년 즈음부터 시작된 버릇이다. 매년 연초에는 1년 간의 희망을 담은 계획을 수립한다. 그리고 6월 말 혹은 7월 초에 중간 점검을 하고 부족한 내용들을 다시 심기일전하여 진행하곤 한다. 그렇게 올 해도 계획 완료. 최근 몇 년간 집중할 구간들을 찾아 계획하고, 덜 중요한 것들을 계획에서 덜어내서 우선순위를 정하는 도전을 계속했었는데 올해 계획을 하다 보니 확실히 이제 자리가 잡혔다. 여기까지 오는 게 3년 걸린 듯하다. 2013년 즈음에는 “하고 싶은 일과 해야 할 일을 합치시키는 점”에 노력했었고, 2020년 즈음부터는 “꼭 해야 할 일, 집중할 일에 대한 우선순위”를 골라 계획하려 노력했었다. 꽤 오랜 시간 동안 연습하고 실행해온 결과가 그래도 이제 잘 나온 거 같아서 다행이다. 사실 연초에 만드는 계획은 사실 그 전 해 연말부터 고민하기 시작한다. “난 무엇을 하고 싶은가”하고 스스로에게 자문하면서 하고 싶은 일들을 정리하는 데에 집중하는 방식으로 집중한다. 그 시점에는 세부적인 계획을 세우지 않는다. 그냥 큰 그림을 그리려 노력하고, 세부적으로 떠오르는 아이디어들은 흘러가게 내버려 둔다. 세부적인 계획은 이후에 필요할 때 만들면 되니까. 과거 경험으로 떠올려보건대 새 해 계획이 연 말까지 가지 못하고 자꾸 망가지는 이유 중 하나는 상황이 계속 변하기 때문이었다. 상황이 계속 변하면 계획을 실행할 수 없고, 그러면 계획은 뒷전이 되거나 혹은 이루지 못할 거라는 마음이 앞서며 계획이 틀어진다. 그래서 상황에 영향을 받지 않게 하려면 계획을 습관 내에 들여야만 했다. 매일의 루틴, 매주의 루틴 안으로 계획들을 집어넣어야 한다. 그런데 계획을 너무 중구난방으로 많이 하면 습관이 꽉 차 버려 포화상태가 된다. 인간에게 주어진 가장 공평한 요소는 ‘시간’이며 인간의 기준으로 딱 24시간이 주어지기 때문이다. 결국 ‘연간 계획’이라는 건 「습관과 상황을 고려」 해야 한다는 점을 깨달았다. 그렇게 꽤 오랜 시간 동안 “하고 싶은 일을 해야 할 일과 합치는 것”, 그리고 “꼭 해야 할 일, 집중할 일에 대한 우선순위를 정하는 것”에 집중했고, 올 해는 큰 어려움 없이 수월하게 만들어졌다. 다만, 작년의 결과를 회고해 보니 계획 실행 시점에의 세부 계획을 제대로 세우지 았았다 보니, 계획을 실행하긴 했는데 이룬 게 없다. 그래서 올 해는 계획을 실행하는 시점에 이를 이루어낼 수 있는 수준의 작은 작업으로 계획을 쪼개고, 하나씩 완성하며 성취감을 느껴야겠다고 다짐했다. 아래는 대략적인 아이디어 스케치. 이 큰 그림을 가지고 대략적인 방향을 잡은 후 특정 시점이 되면 세부 계획을 세워 진행한다. 그리고 6월 말&#x2F;7월 초에 진행 내용을 점검한다. 올 해도 꾸준히 잘 해봐야겠다. 나 자신, 화이팅!","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"새 해 계획","slug":"새-해-계획","permalink":"https://xeppetto.github.io/tags/%EC%83%88-%ED%95%B4-%EA%B3%84%ED%9A%8D/"}]},{"title":"나이 들어감에 대한 감정적인 소회","slug":"Xeppetto/About-Me-and-My-thought/20211231-나이-들어감에-대한-긍정적인-소회","date":"2021-12-31T12:12:31.000Z","updated":"2021-12-31T12:12:31.000Z","comments":false,"path":"Xeppetto/About-Me-and-My-thought/20211231-나이-들어감에-대한-긍정적인-소회/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20211231-%EB%82%98%EC%9D%B4-%EB%93%A4%EC%96%B4%EA%B0%90%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B8%8D%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%86%8C%ED%9A%8C/","excerpt":"","text":"필자의 어린 시절에는 여자가 20대 중반만 넘어가도 노처녀라며 놀리는 일이 다반사였고, 사촌 누님들을 보면 거의 26살이 되기 전에 결혼하셨다. 필자가 30대가 되었을 때는 40대에 관리자가 되지 않으면 회사에서 잘린다는 게 기정사실로 되는 거 같았고, 30대만 되면 온통 꼰대가 되어 나이 어린 신입 사원들을 하대하는 사람들이 참 많았다. 40대가 되면 온갖 질병을 달고 살아야 하며, 머리가 나빠져 더 이상 발전을 불가능하다는 식으로 말하는 사람들이 참 많았다. 그런데 최근에 확신을 가지건대… 예전에 그런 말을 하던 그들이 완전히 틀렸었거나, 아니면 세상이 완전히 바뀌었나 보다. 통계청 자료에 따르면 2019년 기준 20대 여성의 미혼율은 97%, 30대 남성의 미혼율은 50%에 달한다고 한다. 2020년 기준으로 봐도 남성의 50%는 미혼인 상태다. 예전에는 40대면 할아버지 같은 느낌이었는데, 요새 40대들은 참 젊다. 그래서인지 어째서인지 모르겠으나, 요새 30대들은 결혼에 대한 생각들이 크지 않아 보인다. 필자도 그렇고, 필자 주위 사람들도 그렇고 다들 젊게 사는 게 당연한 거처럼 느껴진다. 그래서인가? 아니면 다른 이유가 있는 걸까? 막상 필자가 30대가 되고, 40대가 되어도 나이 들어감에 대한 현실적인 느낌이 오지 않았다. 그리고 30대의 미혼율이 올라가는 만큼 당연히도 40대의 미혼율 역시 점점 올라가고 있고, 필자의 주위에도 그런 사람들이 부쩍 많다. 단순히 의식주 개선으로 나아진 시대의 변화라고 단편화시키기에는 생각보다 젊게 느껴지는 필자 스스로에 대해 ‘남들이 보기엔 늙었는데 나 혼자 주책인 건가?’ 싶을 때도 있었다. 실체적으로 몸이 아프거나 힘든 바가 없다 보니 ‘늙어감’에 대한 인식이 실제로 적었던 게 아닌가 싶다. 예전부터 그렇게 생각했다. ‘나이 만 45세가 되면 젊지 않음을 인정하겠노라’고. 앞으로 2달 뒤면 태어난 지 45번째 연수를 꽉 채우게 된다. 어르신들은 아직도 필자를 보며 “참 좋은 때다, 내 살아보니 그 나이가 제일 좋을 때더라.” 하신다. 그래, 스스로 생각하기에도 아직 젊다고 느껴진다. 하지만 필자 스스로 에너지의 크기가 줄었음을 느끼기도 하거니와, 사실 이젠 어디를 가도 중년을 대하는 사람들의 예의를 느끼곤 한다. 그래서 이제 ‘늙었다’라고까지 말하기는 어렵겠지만, 이제 젊지 않음을 인정하고 내 몸이, 그리고 호르몬이 변화하고 있음을 인정하려 한다. 부쩍 아침잠이 줄어들었고, 대신 오후에 한 번씩 졸리다. 운동해도 근육이 잘 붙지 않는다. 아직 심하지는 않지만 조금씩 노안도 오고 있음이 느껴진다. 호르몬 변화로 인해 몸이 변화함을 느껴지는 게 누군가에게는 우울증을 동반한다는데, 필자에겐 썩 그렇지도 않다. 그냥 ‘그런가 보다’ 싶고, ‘그럴 수도 있지’ 싶다. 2021년에 읽은 책 중에 ‘썩 잘 골랐다, 재미있게 읽었다’ 싶었던 책이 동의보감이라는 책인데, 이 책에 담긴 사상적 철학을 접하고 나니 자연스럽게 나이 들어감에 대한 노하우를 선배에게 전수하는 느낌이었다. 누군가 인생의 깨달음에 도움이 될만한 책을 추천한다면, 필자는 이 책을 한 번은 꼭 접해볼 책으로 추천하겠다. 호르몬이 변화하는 건 썩 나쁘지만은 않다. 젊은 시절, 아무리 이성적이려 노력해도 본능을 관장하는 뇌에 사로잡혀 마구잡이로 들쭉날쭉하던 감정들은 어느새 많이 없어졌고, 어느 정도는 스스로 감정을 컨트롤할 수 있게 됐다. 때론 머릿속을 어지럽히던 수많은 ‘쓸데없는’ 고민들이 줄어들었고, 뭐랄까… 조금 편안해졌다. 필자의 인생에 좋게 또는 나쁘게 느껴졌던 여러 가지 일들을 겪으면서 많은 경험이 쌓인 결과가 아닐까 싶다. 아니, 아니, 어찌 보면 너무 많은 경험이 쌓여 그저 그런 일들에는 그냥 무뎌져서 무심해져 버린 걸지도 모르겠다. 돌아보면 필자의 이 인생은 운이 좋았던 건지 나빴던 건지 모르겠다. 필자가 가진 실력보다, 필자가 기울인 노력보다 더 많은 보상을 받고, 칭찬을 받았다고 생각한다. 늘 신께 고마웠다. 착하게만 살았다고 자신할 수 없기에, 누구에게 어떤 상처를 주었는지 인간인 이상 모두 알아낼 수 없기에, 주어진 상황들에 늘 감사하고 받아들이려는 마음을 가지려 노력한다. 또한 동시에 여러 사람에게 이유 없는 미움을 받으며, 오해도 받고, 공격도 받았다. 괴로웠다. 아무 이유 없이 필자에 대한 근거 없는 소문이 도는 것들에 대해 ‘난 왜 이렇게 적이 많은가?’에 대해 고민하기도 했다. 해결하려고 할수록 더 꼬이는 상황들에 짓눌려 우울증을 겪기도 했고. 그런데 그렇게 어렵게, 힘겹게 버티는 과정에서 많은 걸 깨달을 수 있지 않았나 싶다. 덕분에 너무 늦기 전에 스스로의 감정, 주체적 정체성을 깨닫지 않았나 싶다. 특히 필자 인생을 어렵게 느껴지게 했던 젊은 날의 고생들은 고민들과 함께 산화했다고 느껴지고, 자기 스스로 행복해지기 위해서는 스스로 자신을 알아가야 함을 깨달은 부분이 가장 크다고 생각한다. 지금은 너무 어렵지 않게 찾아야 할 답들을 정의할 수 있고, 머리로만 깨닫고, 말로만 하는 게 아니라… 스스로, 실제로 그렇게 살 수 있게 되어서 정말 다행이라고 생각한다. 필자가 필자의 인생에서 얻은 답은 이것이다. ‘인생의 목적’은 행복해지기 위함이고,‘인생의 방향’은 자기 스스로 자신이 누구인가를 알아가며,자신의 정체성을 찾아가는 게 올바른 방향이다. 그리고, 그렇게 목적과 방향에 따라 인생의 여러 사건 속에서시간의 흐름과 함께 나이가 들어가며 자기 자신을 잘 알게 될 때쯤,운이 좋으면 매사에 감사하며 행복하게 살 수 있게 된다는 것. 필자가 어릴 적 그렇게 알고 싶었던 행복해지는 방법이란 건,남이 나에게 무엇을 해주는 게 아니고,내가 남보다 더 나은 조건이고, 잘나서가 아니라그냥 자기 자신을 인정하고 잘 아는 것이었다. 내가 언제 기쁜지, 언제 슬픈지,내가 무엇을 원하는지 나 스스로 알고 있고,내가 관심 있어 하는 것과 관심 없어 하는 것을 알고 있고,내 감정을 알고 변화함을 알고 있어나 스스로 감정의 변화를 일깨워 그 감정 변화를 평범하게 가져갈 수 있는 것. 어떤 상황에서 내가 어떻게 행동하는지를 스스로 알고 있고,어떤 상황에서 내가 어떤 선택을 하고 그거에 대해 책임질 수 있고,내 선택에 대해 어떤 결과가 나와도 그건 그대로 두고나 자신을 사랑할 수 있는 것이 행복함이었다. 남들보다 조금 못한 부분이 있어도 그대로 인정하고,남들보다 조금 나은 부분이 있어도 그걸로 남에게 피해를 주지 않는 것.남들과 비교해서 욕심을 내거나 비관하기보다는남들과 상관없이 나 스스로 여러 가지 내 인생에 필요한 기준을 알고 있는 것. 그런 게 필자가 찾은 행복함의 기준선(baseline)이었다. 이런 생각들을 정리해가는 길다면 길고, 짧다면 짧은 시간 속에서 필자 스스로를 찾아가며 여유도 좀 생긴 거 같고, 적절히 통제할 수 있게 되어간 듯하다. 결국 모든 진리는 자기 안에 있었고, 자기 자신을 잘 아는 것에서부터 모든 깨달음이 시작된다는… 그래야 행복하다는… 그게 결국 부처님의 말씀과 예수님의 말씀, 그리고 많은 성현들의 말씀이었다는 점도 어느 날 불현듯 깨달았다. “이 포스팅은 제휴마케팅이 포함된 광고로 일정 커미션을 받을 수 있습니다.” 이 페이지는 누군가에게 답변받고 싶어 쓴 글이 아니므로 댓글을 남기실 수 없도록 조정했습니다. 함께 이야기를 나누고 싶으시면 제 Social Media로 오셔서 친구 추가해 주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"나이 들어감","slug":"나이-들어감","permalink":"https://xeppetto.github.io/tags/%EB%82%98%EC%9D%B4-%EB%93%A4%EC%96%B4%EA%B0%90/"}]},{"title":"[Windows10] 'OneDrive로 이동' 제거","slug":"소프트웨어/Operating Systems/Windows/20211215_Windows10-ContextMenu-move-to-onedrive","date":"2021-12-15T03:15:00.000Z","updated":"2021-12-15T03:15:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20211215_Windows10-ContextMenu-move-to-onedrive/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20211215_Windows10-ContextMenu-move-to-onedrive/","excerpt":"","text":"Windows10을 사용하다 보면 프로그램들이 설치되면서 마우스 우클릭 시 나타나는 추가 메뉴가 점점 많아져 폴더나 파일 사용 시 매우 느려진다. 그래서 레지스트리를 조작해서 이를 해결해야 한다. ※주의 : 레지스트리를 잘 못 만지면 최악의 경우 컴퓨터를 포멧해야 하는 상황이 발생할 수 있다. 그러므로 전문가가 아니라면 굳이 조치하지 않는 쪽을 추천드린다. 「OneDrive로 이동」 메뉴는 레지스트리에서 아래 값을 찾아 삭제해 버리면 제거된다. RegEdit 실행 아래 위치로 이동한다. Shell Extensions 키 내에 Blocked가 없다면 생성해야 한다.• HKEY_CLASSES_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Blocked Blocked 키 안에 문자열을 생성한다. 문자열의 이름은 {CB3D0F55-BC2C-4C1A-85ED-23ED75B5106B}로 지정한다. 편집이 완료되면 regedit 편집기를 종료한다. CTRL + SHIFT + ESC를 눌러 작업 관리자를 실행한다. 작업 관리자에서 ‘Windows 탐색기’에 오른쪽 마우스를 클릭 후 ‘작업 끝내기’를 이용해서 작업을 종료한다. 다시 한 번 작업 관리자에서 ‘파일 &gt; 새 작업 실행’을 선택한다. 나타나는 새 작업 실행창에서 explorer.exe를 입력 후 실행한다. Windows 탐색기에서 마우스 오른쪽 버튼을 눌러 정상적으로 제거되었는 지 확인한다. Context Menu를 삭제하는 방식은 Windows10과 Windows11이 같다. Windows11에서도 동일한 방식으로 작업하면 적용된다. 참고자료 https://www.thewindowsclub.com/remove-move-to-onedrive-from-context-menu https://forbes.tistory.com/345","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"}]},{"title":"【斷想】Win11 업글, 그리고 이해할 수 없는 Office 정책","slug":"Xeppetto/단상(斷想)/20211213-Upgrade-to-Windows11","date":"2021-12-13T03:13:00.000Z","updated":"2021-12-13T03:13:00.000Z","comments":true,"path":"Xeppetto/단상(斷想)/20211213-Upgrade-to-Windows11/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20211213-Upgrade-to-Windows11/","excerpt":"","text":"고객사 보안 프로그램 때문인지 고객사 관련 업무를 하기 시작한 약 한 달 전부터 컴퓨터가 점점 느려지고 이상 증세를 보이더니 결국 Explorer.exe와 연관된 DCOM 관련 문제가 발생했다. 사실 이 문제가 발생하기 2주 전부터 Windows Terminal의 로딩 속도가 약 40~60초 가량 지연되는 현상이 있었으니, 이후에 비슷한 현상이 나타나면 언제 Format 해야 하는지 확실한 경험을 하게 됐다. 하여튼 간에 발생하는 문제 때문에 컴퓨터는 켜진지 3분 후부터 DCOM 오류를 뱉어내기 시작했고, 컴퓨터 사용이 거의 불가능했다. 안전모드로 부팅하면 문제가 없는데, 시스템 커널을 사용하는 서비스 중에 DCOM과 연관된 무언가가 에러를 뱉어내고 있었는데 당최 원인을 알 수 없었다. DCOM 1018 에러라나 뭐라나… 결국 이를 해결하려고 업무용 PC를 Windows10에서 Windows11로 업그레이드했다. 업그레이드하는 도중에는 시스템 커널이나 서비스를 이용하지 않을테니 업그레이드는 될 거 같았기도 했고, 현재 사용하는 업무용 컴퓨터를 처음 구입할 때 파티션을 나눠둘 생각을 하지 않고 그냥 사용했던 터라 개발 중인 데이터들을 살려야만 했다. Windows11으로 업그레이드 성공. 역시나 잘 된다. 덕분에 데이터나 개인 설정은 하나도 날려먹지 않고 잘 구출했다. 이제 백업하고 파티션 나눌 준비하고 경건한 마음으로 포맷을 해야겠고, 이번엔 Windows10과 Windows11 환경을 두 개 모두 갖출 예정이다. 역시 착하게 사니까 큰 고생 안 하고 문제 해결. 휴~ 다행이다. 차카게 살자! Windows11을 설치하고 나서 Microsoft Office 환경을 구성하다가 오랜만에 짜증이 올라왔다. Microsoft 365 정책 중에 필자 입장에서 단 하나 이해할 수 없는 부분은 개인 계정과 회사 계정을 분리해서 사용할 수 없다는 점이다. 회사 계정은 Microsoft 계정으로 사용할 수가 없어서 Microsoft 관련 App은 개인 계정으로 로그인해야만 한다. 그러다 보니 회사 컴퓨터에 가짜 로그인 계정을 만들어 심어 넣거나, 아니면 개인 계정을 연동해야 하는데… 개인 환경과 회사 환경을 분리하고 싶은 나 같은 이상한 놈이겐 여간 귀찮은 일이 아닐 수 없다. 게다가 회사 계정으로 웹 오피스 365로 로그인하는 것과 개인 계정으로 웹 오피스 365로 로그인하면 서로 뒤엉켜서 내가 지금 뭘 사용하고 있는지 알 수 없게 되어버린다. 그래서 결국 Edge와 Chrome 등 여러 브라우저를 병행해서 사용해야 하는 상황이 된다. 또, 개인폰에서 Edge 싱크를 맞추면 개인 계정은 잘 sync가 되는데 회사 계정은 Sync가 안된다. 이건 진짜 어쩌라고 이렇게 만든 지 모르겠다. 폰을 들고 다니면서 회사 업무가 불가능하거나, 아니면 개인 계정에 회사 업무를 녹여 사용해야 하는 불편함이 있다. 아… 대체 왜 이렇게 한 건지 내 머리로는 이해가 안 된다. 아마 사업적인 영역의 무언가 때문이겠지… 어쨌든, 업그레이드가 잘 되어서 다행이다. 오늘도 평화로운 하루!","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Windows11","slug":"Windows11","permalink":"https://xeppetto.github.io/tags/Windows11/"},{"name":"Microsoft Office","slug":"Microsoft-Office","permalink":"https://xeppetto.github.io/tags/Microsoft-Office/"}]},{"title":"[Windows10] 'Open with Visual Studio' 제거","slug":"소프트웨어/Operating Systems/Windows/20211210_Windows10-ContextMenu-open-with-visual-studio","date":"2021-12-10T01:00:00.000Z","updated":"2021-12-10T01:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20211210_Windows10-ContextMenu-open-with-visual-studio/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20211210_Windows10-ContextMenu-open-with-visual-studio/","excerpt":"","text":"Windows10을 사용하다 보면 프로그램들이 설치되면서 마우스 우클릭 시 나타나는 추가 메뉴가 점점 많아져 폴더나 파일 사용 시 매우 느려진다. 그래서 레지스트리를 조작해서 이를 해결해야 한다. ※주의 : 레지스트리를 잘 못 만지면 최악의 경우 컴퓨터를 포멧해야 하는 상황이 발생할 수 있다. 그러므로 전문가가 아니라면 굳이 조치하지 않는 쪽을 추천드린다. 「Visual Studio에서 열기」 메뉴는 레지스트리에서 아래 두 값을 찾아 삭제해 버리면 제거된다. RegEdit 실행 아래 위치로 이동한다.• HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\AnyCode• HKEY_CLASSES_ROOT\\Directory\\shell\\AnyCode 해당 키 안애 DWord(32비트)를 생성한다. 키 값의 이름은 HideBasedOnVelocityId로 지정한다. HideBasedOnVelocityId를 열고 내부 값을 16진수 상태에서 006698a6라고 입력한다. (주의 - 전문가용) 혹은 위 방법으로 안된다면 아래 값들을 찾아 그냥 제거• 제거할 경우 컴퓨터에 이상이 생길 수 있으므로 해당 키들을 백업 후 진행한다.• HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\AnyCode• HKEY_CLASSES_ROOT\\Directory\\shell\\AnyCode Context Menu를 삭제하는 방식은 Windows10과 Windows11이 같다. Windows11에서도 동일한 방식으로 작업하면 적용된다. 참고자료 https://newstory-of-dev.tistory.com/entry/Visual-Studio-2017-Visual-Studio에서-열기-제거","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"}]},{"title":"[Windows10] 'Git Bash, GUI here' 제거","slug":"소프트웨어/Operating Systems/Windows/20211209_Windows10-ContextMenu-git-bash-gui","date":"2021-12-09T00:00:00.000Z","updated":"2021-12-09T00:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20211209_Windows10-ContextMenu-git-bash-gui/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20211209_Windows10-ContextMenu-git-bash-gui/","excerpt":"","text":"Windows10을 사용하다 보면 프로그램들이 설치되면서 마우스 우클릭 시 나타나는 추가 메뉴가 점점 많아져 폴더나 파일 사용 시 매우 느려진다. 그래서 레지스트리를 조작해서 이를 해결해야 한다. ※주의 : 레지스트리를 잘 못 만지면 최악의 경우 컴퓨터를 포멧해야 하는 상황이 발생할 수 있다. 그러므로 전문가가 아니라면 굳이 조치하지 않는 쪽을 추천드린다. 「Git Bash here, Git GUI here」 메뉴는 레지스트리에서 아래 여섯 개의 값을 찾아 삭제해 버리면 제거된다. RegEdit 실행 아래 값들을 찾아 제거• HKEY_CLASSES_ROOT\\Directory\\shell\\git_gui• HKEY_CLASSES_ROOT\\Directory\\shell\\git_shell• HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\git_gui• HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\git_shell• HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\background\\shell\\git_gui• HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\background\\shell\\git_shell Context Menu를 삭제하는 방식은 Windows10과 Windows11이 같다. Windows11에서도 동일한 방식으로 작업하면 적용된다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"}]},{"title":"[Windows10] 'Windows Terminal에서 열기' 제거","slug":"소프트웨어/Operating Systems/Windows/20211208-Windows10-Context-Menu-Open-in-Windows-Terminal","date":"2021-12-07T23:00:00.000Z","updated":"2021-12-07T23:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20211208-Windows10-Context-Menu-Open-in-Windows-Terminal/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20211208-Windows10-Context-Menu-Open-in-Windows-Terminal/","excerpt":"","text":"Windows10을 사용하다 보면 프로그램들이 설치되면서 마우스 우클릭 시 나타나는 추가 메뉴가 점점 많아져 폴더나 파일 사용 시 매우 느려진다. 그래서 레지스트리를 조작해서 이를 해결해야 한다. ※주의 : 레지스트리를 잘 못 만지면 최악의 경우 컴퓨터를 포멧해야 하는 상황이 발생할 수 있다. 그러므로 전문가가 아니라면 굳이 조치하지 않는 쪽을 추천드린다. 「Windows Terminal에서 열기」 메뉴를 삭제하는 방법은 조금 복잡하다. RegEdit을 실행한다. 아래의 위치로 이동한다. • HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Blocked Blocked라는 키가 없다면 생성해줘야 한다. Shell Extensions에 오른쪽 클릭 후 ‘키’를 생성하고, 이름을 Blocked라고 입력한다. 다음은 Blocked키 내에서 문자을을 새로 생성한 후 {9F156763-7844-4DC4-B2B1-901F640F5155}라고 입력한다. 편집이 완료되면 regedit 편집기를 종료한다. CTRL + SHIFT + ESC를 눌러 작업 관리자를 실행한다. 작업 관리자에서 ‘Windows 탐색기’에 오른쪽 마우스를 클릭 후 ‘작업 끝내기’를 이용해서 작업을 종료한다. 다시 한 번 작업 관리자에서 ‘파일 &gt; 새 작업 실행’을 선택한다. 나타나는 새 작업 실행창에서 explorer.exe를 입력 후 실행한다. Windows 탐색기에서 마우스 오른쪽 버튼을 눌러 정상적으로 제거되었는 지 확인한다. Context Menu를 삭제하는 방식은 Windows10과 Windows11이 같다. Windows11에서도 동일한 방식으로 작업하면 적용된다. 참고자료 https://www.tenforums.com/tutorials/176295-add-remove-open-windows-terminal-context-menu-windows-10-a.html","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"}]},{"title":"[Windows10] 'Skype와 공유' 제거","slug":"소프트웨어/Operating Systems/Windows/20211207-Windows10-ContextMenu-Share-in-Skype","date":"2021-12-06T22:00:00.000Z","updated":"2021-12-06T22:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20211207-Windows10-ContextMenu-Share-in-Skype/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20211207-Windows10-ContextMenu-Share-in-Skype/","excerpt":"","text":"Windows10을 사용하다 보면 프로그램들이 설치되면서 마우스 우클릭 시 나타나는 추가 메뉴가 점점 많아져 폴더나 파일 사용 시 매우 느려진다. 그래서 레지스트리를 조작해서 이를 해결해야 한다. ※주의 : 레지스트리를 잘 못 만지면 최악의 경우 컴퓨터를 포멧해야 하는 상황이 발생할 수 있다. 그러므로 전문가가 아니라면 굳이 조치하지 않는 쪽을 추천드린다. 「Skype와 공유」 메뉴는 조금 특이하게 레지스트리에서 작업하지 않고 command shell에서 실행하여 제거한다. cmd &gt; 관리자 권한으로 실행 아래를 입력하여 실행 1REG ADD &quot;HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Blocked&quot; /v &#123;776DBC8D-7347-478C-8D71-791E12EF49D8&#125; /d Skype Process Explorer에서 Widnows Explorer 프로세스 다시 시작 Context Menu를 삭제하는 방식은 Windows10과 Windows11이 같다. Windows11에서도 동일한 방식으로 작업하면 적용된다. 참고자료 https://www.python2.net/questions-1224897.htm","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"}]},{"title":"[Windows10] 'DropBox Transfer로 보내기' 제거","slug":"소프트웨어/Operating Systems/Windows/20211206-Windows10-ContextMenu-Dropbox-Transfer","date":"2021-12-05T21:00:00.000Z","updated":"2021-12-05T21:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20211206-Windows10-ContextMenu-Dropbox-Transfer/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20211206-Windows10-ContextMenu-Dropbox-Transfer/","excerpt":"","text":"Windows10을 사용하다 보면 프로그램들이 설치되면서 마우스 우클릭 시 나타나는 추가 메뉴가 점점 많아져 폴더나 파일 사용 시 매우 느려진다. 그래서 레지스트리를 조작해서 이를 해결해야 한다. ※주의 : 레지스트리를 잘 못 만지면 최악의 경우 컴퓨터를 포멧해야 하는 상황이 발생할 수 있다. 그러므로 전문가가 아니라면 굳이 조치하지 않는 쪽을 추천드린다. Transfer로 보내기 제거 : 성공 케이스여러 가지 시도 후 마지막으로 아래의 방법으로 성공하였으나, 이 또한 시간이 지나면 제작사에 의해 막힐 수 있다. 나중에 제거 방법이 변경되면 다시 방법을 찾아 업데이트하도록 하겠다. 성공한 방법Send with Transfer를 삭제하기 위해서는 아래 3개를 삭제해야 한다. Folder와 바탕화면에서 삭제하는 위치 • HKEY_LOCAL_MACHINE\\software\\Classes\\Directory\\background\\shellex\\ ContextMenuHandlers\\DropboxExt 그 외 Folders에서 삭제하는 위치 • HKEY_LOCAL_MACHINE\\software\\Classes\\Directory\\shellex\\ ContextMenuHandlers\\DropboxExt 특정 Files 클릭 시 삭제하는 위치 • HKEY_CLASSES_ROOT*\\shellex\\ContextMenuHandlers\\DropboxExt Transfer로 보내기 제거 : 실패 목록Dropbox Transfer 관련 내용은 인터넷 검색 내용 여러 개를 적용해봤지만 제대로 되지 않았다. 필자가 시도했던 ‘실패 목록’은 아래와 같다. 실패한 방법 1번째 특정 registry를 삭제해 보라는 정보를 시도했다. 결과적으로 안되기 때문에 해당 레지스트리 정보를 공개하지는 않기로 했다. 해당 registry 삭제 후 dropbox 혹은 컴퓨터를 재시작해야 적용된다는 정보를 시도했다. 아무런 변화도 없었고, 변화가 적용되지 않았다. 그러니, 레지스트리 삭제는 크게 도움이 되지 않았다. 실패한 방법 2번째 파일 위치 열기 &gt; dropbox 시작 아이콘 &gt; 속성 편집 이후 아래와 같이 변경하라는 정보를 시도해 보았다. 12345[ 원본 ]&quot;C:\\Program Files (x86)\\Dropbox\\Client\\Dropbox.exe&quot; /home[ 변경 후 ]&quot;C:\\Program Files (x86)\\Dropbox\\Client\\Dropbox.exe&quot; /home-move-to-dropbox=false 위를 적용해보았으나 전혀 변화가 감지되지 않았다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"}]},{"title":"특정 브라우저에서 SCM Music Player가 작동하지 않는 경우","slug":"Xeppetto/ThisBlog/20211205-SCM-Music-Player-Permission","date":"2021-12-05T03:05:00.000Z","updated":"2021-12-05T03:05:00.000Z","comments":true,"path":"Xeppetto/ThisBlog/20211205-SCM-Music-Player-Permission/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20211205-SCM-Music-Player-Permission/","excerpt":"","text":"필자는 여러 가지 웹브라우저를 사용하고 있다. 작업 영역마다 아예 다른 브라우저를 사용하는 게 훨씬 생각하기 편해서 그렇다. 예를 들어, 네이버는 Whale 브라우저를 사용하고, 커뮤니티나 Social Media를 사용할 때는 Firefox를 사용하고, Google 관련 서비스를 이용할 때는 Chrome을 사용하는 식이다. 최근에는 몇몇 브라우저들에서 (예전에 Opera가 시도했었던) ‘Tab 모음’ 기능을 제공하지만, 필자가 구식이라 그런지 그냥 브라우저 별로 작업을 나누는 게 훨씬 깔끔하고 생각하기 편해서 좋다. 작업이 끝나면 그냥 브라우저에 있는 탭들을 일괄적으로 ‘닫기’해 버리면 그만이기 때문이다. 그래서… 그동안 필자가 개인 블로그를 보는 브라우저는 Firefox였는데, 어느 날 우연히 Chrome으로 접근했다가 하단의 SCM music player가 작동하지 않음을 알게 되었다. 잠깐 검색 및 기능 확인을 해 보니 Chromium 기반 엔진으로 만든 브라우저들에서 공통적으로 나타나는 현상이며, 이는 해당 엔진이 「각 사이트마다 허용하는 기능 설정이 다르기 때문」임을 확인하였다. 자, Chrome에서는 다음의 방법으로 ‘소리’를 허용으로 변경해 주면 SCM Music Player가 정상 작동한다. 먼저 블로그 주소창 왼쪽의 자물쇠 아이콘을 클릭한다. 자물쇠 아이콘 클릭 시 나타나는 ‘사이트 설정’을 클릭한다. 설정창이 나타나면 설정 항목 중 ‘소리’를 ‘허용’으로 변경하면 된다. 이제 SCM Music Player가 정상작동한다. 아래 참고자료에 보면 ‘소리’ 허용 후 안되면 ‘다운로드’도 허용하라고 되어 있긴 하다. 필자의 경우 ‘소리’ 허용만으로 정상작동하고 있다. 참고자료 http://emeraldcoastblog.blogspot.com/2019/12/scm-player-autoplay-not-working-in.html","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"SCM Music Player","slug":"SCM-Music-Player","permalink":"https://xeppetto.github.io/tags/SCM-Music-Player/"},{"name":"배경음악","slug":"배경음악","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EA%B2%BD%EC%9D%8C%EC%95%85/"},{"name":"음악","slug":"음악","permalink":"https://xeppetto.github.io/tags/%EC%9D%8C%EC%95%85/"},{"name":"인생 노래","slug":"인생-노래","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D-%EB%85%B8%EB%9E%98/"},{"name":"Music","slug":"Music","permalink":"https://xeppetto.github.io/tags/Music/"},{"name":"Youtube","slug":"Youtube","permalink":"https://xeppetto.github.io/tags/Youtube/"}]},{"title":"인스타그램 계정을 생성해 보았다.","slug":"Xeppetto/ThisBlog/20211201-Instagram-Created","date":"2021-12-01T03:05:00.000Z","updated":"2021-12-01T03:05:00.000Z","comments":true,"path":"Xeppetto/ThisBlog/20211201-Instagram-Created/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20211201-Instagram-Created/","excerpt":"","text":"엄청 늦었지만…. 인스타그램 계정을 생성해 보았다. 과거 개인 블로그에서 사진을 관리하였지만, 티스토리가 자기 멋대로 정책을 바꾸어 사진 데이터를 날려 먹은 탓에 정신적 충격을 받고 개인 사진을 어떻게 관리할까 고민이 깊었다. 그리고 먹고살기 바쁘다보니 쉽사리 결론 내리지 못하고 있다가 얼마 전에 결론을 내렸다. 일단 더 이상 인터넷의 공개된 공간에 개인적인 사진을 업로드하지는 않기로 결정했다. 사진이라는 건 인생의 흔적이기에 완전히 개인사를 지우고 올릴 수는 없겠지만 너무 지나친 TMI(Too much information)는 업로드하지 않아야겠다고 생각했다. 필자와 지인들의 사진, 필자가 자주 가는 곳, 필자가 하고 있는 운동 등이 누군가 악의를 가진 이들에게는 남을 괴롭힐 도구가 될 수 있다는 판단이다. 그러니 개인사는 업로드하지 않는게 좋겠다는 게 최종 결론이다. 또, 블로그에 사진을 올려 관리하면, 사진의 수가 많아진 경우 관리하기가 너무 어려워지는 경향이 있어 인스타그램, 네이버 클라우드, 구글 사진, 애플 클라우드, MS 원드라이브, 드롭박스 등을 놓고 고려하였고, 최종적으로 개인 사진들은 특정 Cloud Storage 1개를 선택해서 올려놓기로 결정했다. 인스타그램에는 인생을 살아가면서 본 아름다운 풍경, 상황들에 대한 기억 보존용 사진들을 올려놓을 생각이다. 여기에도 역시 개인의 사생활 정보를 아예 제거할 수는 없겠지만, 그래도 풍경 사진을 보며 공격 거리를 찾으려는 악의라면… 좀 웃기지 않을까 싶었다. 음… 며칠 사용해본 인스타의 단점은, 페이스북처럼 사진을 선택적으로 비공개할 수 없었고, 모두 공개하거나, 모두 비공개하거나 하는 식이었다. 일단 친구를 한 50~100명 모은 뒤에 비공개하는 게 낫겠다 싶다. 필자의 인스타그램은 블로그 상단 오른편 로고 아랫쪽에도 있고, 혹은 https://www.instagram.com/xeppetto/ 로도 접근할 수 있다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"인스타그램","slug":"인스타그램","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/"},{"name":"개인 사진","slug":"개인-사진","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%82%AC%EC%A7%84/"}]},{"title":"[명언] 안중근 - 인으로 악에 대적한다","slug":"배움/명언/20211127_인으로-악에-대적한다","date":"2021-11-26T16:27:00.000Z","updated":"2021-11-26T16:27:00.000Z","comments":true,"path":"배움/명언/20211127_인으로-악에-대적한다/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/20211127_%EC%9D%B8%EC%9C%BC%EB%A1%9C-%EC%95%85%EC%97%90-%EB%8C%80%EC%A0%81%ED%95%9C%EB%8B%A4/","excerpt":"","text":"\"약한 것으로 강한 것을 제거하고, 인(仁)으로 악(惡)에 대적한다\" - 안중근 (1879~1910) 천년나무의 생각 - 2021년 11월 27일의 회고인(仁)으로 악(惡)에 대적한다. 안중근 의사가 옥중에서 쓴 글의 일부라고 한다. 대체 어떤 의미셨을까? 어떤 시대적 고찰과 조국의 광복을 위해 고단했던 그의 생에 겪은 경험, 얼마나 깊은 생각에서 나온 말일지 가늠이 되지 않는다. 문득 쉬는 동안 보게 된 어느 유튜브에 나온 “인(仁)으로 악(惡)에 대적한다”라는 구절을 보고 며칠 전 받았던 질문을 떠올린 건 왜일까… 상념에 사로잡혀 짧은 시간이나마 개인적 회고를 해 보았다. 며칠 전 카톡오픈채팅방에 올라온 질문. “QA로서 KPI를 어떻게 잡아야 할까요?” 라는 질문에 농담처럼 던진 말이 있다. • 핵심 KPI : 올 해 이직하지 않기• 주요 KPI : 잘 참기, 인내, 싸우지 않기 (경영, 기획, 개발, 인사, 팀장 등으로 쪼개면 7~8개까지 가능) 뒤늦게 저 질문에 대한 지적질을 하자면… 질문 자체가 좀 틀리긴 했었다. “QA로서”가 아니라 사실은 “Tester로서”가 되어야 올바른 질문이다. 이 글에서는 Tester로 쓰겠다. 필자가 저 답변을 했을 땐 그냥 다들 웃고 말았다. Tester들이 모인 채팅방에서는 저런 농담이 꽤나 잘 통한다. 다들 실제로 현실에서 겪는 일이기 때문에. 씁쓸한 현실. Tester들은 알 거다. Tester로서 회사에 근무하다 보면 너무 당연하다는 듯이 ‘언제라도 무시해도 되는 아랫사람’ 취급을 받는 경우가 많다. 물론 월급 주는 입장, 경영하는 입장에서는 월급 받는 사람들이 더 열심히 해 주었으면 하는 심정이 생기는 게 인지상정이겠으나… 어디에서부터 유래가 된 것인지 Tester들에게는 그냥 막말하고, 막 다루어도 되는 사람 취급하는 회사들이 참 많다. 특히, 아무런 권한도 주지 않고 테스트에 대한 책임을 묻거나, 프로세스 개선 의견을 묻는 바보 같은 현상이 계속된다. 여러 회사에서 여러 고생들을 하는 Tester들에게 이런저런 이야기들을 듣고 있으면, 결국은 애자일 대유행 이후 시대에 Coding 위주로 경력을 쌓은 사람들이 권력을 잡고 Testing이라는 활동이 무엇인지 명확히 이해하지 못하는 부분이 근본 문제인건데… 엉뚱한 사람들이 고난의 시대를 살고 있구나 싶다. 코딩이나 테스팅이나 결국 소프트웨어 개발 내의 업무들인데 뭐는 더 중요하고, 뭐는 덜 중요하다는 인식이 계속되고 있다. 유물론적관점의 계급 체계는 아직 없어지지 않았다. 그리고 이런 현상은 전방위적으로 일어나고 있다고 보인다. 물론 모든 회사, 모든 부서, 모든 사람들이 그렇다는건 아니다. 결국은 모두 몇 몇 가해자인 어떤 어떤 사람들의 문제이겠으나, 일반적으로 이런 현상은 유독 많은 Tester들을 피해자로 많든다. 이야기들을 들어보면 참 많은 수의 Tester들이 동일하게 겪는 아픔이다. 필자의 예를 들어보자. 필자도 예전에 어느 회사 면접에서 그런 식의 폄하를 당한 적이 있는데, 면접 첫 질문이 “QA는 고등학생도 할 수 있는 일이 아닌가?” 였다. 해당 면접관은 그게 나름대로의 압박 질문이었다고 생각할 수도 있겠으나, 필자 역시 몇 백명의 면접을 진행해본 경험에서 비추어보건대 그건 면접 첫 질문으로서 적절치도 않았을뿐더러… 당시 경력 10년이 넘었던 전문 지식 수준을 갖춘 사람에게 물어볼만한 질문도 아니었다. 더 웃긴 건 난 그 회사에 QA로 지원한 게 아니었다. 그 회사 내부 인원의 추천으로 Agile Coach 겸 PM으로 지원했지. 그 면접관은 지원자의 이력서도 안 읽어봤고, 그 지원자가 내부 Dev Leader의 추천인지도 모른 채로, 그냥 와서 ‘어, 얘 QA네’ 하고 무시하는 질문을 던진 거다. 내부 추천이라는 점만 알았어도 그렇게 예의 없는 태도로 예의 없는 질문을 하지는 않았을 거라 생각한다. 면접이 종료되고 그날 저녁 그 회사에 다니는 지인들과 술을 한 잔 하며 “아마 난 떨어진 거 같다” 하며 웃고, 회포를 풀고 집에 오는 길에 갑자기 그 질문이 곱씹어지면서 PTSD(외상후 스트레스 장애, Post-traumatic Stress Disorder)가 생길 만큼 충격이 오고, 짜증이 나더라. 그래서 페이스북에 가볍게 투덜거리는 글을 올리고 잤다. 그러고 나서 자고 일어났더니 공유가 500회 이상되며 파주부터 제주도까지… 대한민국에 살고 계시는 여러 사람들에게 응원 메시지가 와 있더라. 그 일을 키운 것은 어느 유명 사이트의 커뮤니티 리더였다. 그는 꽤 유명한 사람이었는데 그날 술에 취했었는지, 내 글을 공유하며 해당 회사의 인사팀에 멘션으로 문의를 넣으면서 일이 일파만파 커져 있었다. 필자는 별로 큰 문제를 일으킬 생각은 없었어서 바로 비공개로 바꿨지만, 일은 너무 커진 상태였다. (하지만 Tester 커뮤니티에는 그 회사 불매하자고 글을 썼다. 그 질문은 필자 개인의 문제라고 볼 수 없었으니까.) 나중에 지인을 통해 그 면접관이 내부 게시판에 나름대로 해명한 걸 보게 되었는데 요약하면 그냥 이런 식의 답변이었다. “(필자가) 싸가지가 없었다.” 란다. 하하… 뭐… 그래… 그렇게 느꼈을 수 있다. 느낌은 개인의 것이니까. 자, 그래, 그렇다 치고, 개인의 느낌은 인정한다 치고. 가해자는 어떨지 몰라도 피해자 입장에서는 당시의 기억이 트라우마처럼 또렷하게 나기 때문에 이 기회를 빌어 굳이 할 필요 없는 불필요한 해명을 내려놓자면… 당시에 필자는 면접장에 15분 먼저 도착해 있었고, 면접 시간 5분이 지나서야 면접관 세 명이 들어왔다. 면접실 문이 열리고 덩치가 좀 있으신 분이 맨 앞에 서서 들어오셨고, 필자는 당연히 일어나서 인사를 했다. 그랬더니 그중에 제일 키가 조그마한 사람이 앉으라고 해서 대답을 하고 앉았다. 자기소개를 해 보란다. 그래서 했다. 그리고 첫 질문이 바로… 그것이었다. 우리 직군 전체를 싸잡아 폄하하는 발언. 지난 일은 지난 일이다. 상처는 남아 욱신거리지만 감정이 남아 있지는 않다. 불매운동 개뿔, 지금은 그 회사에서 물건도 잘 구입한다. 상처가 남아 잊히진 않지만, 스스로 잘 극복했다고 믿는다. 근데 난 지금도 그 면접관을 보게 되면 두 가지를 확인하고 싶다. 대체 어떻게 하면 처음 보는 사람이 정중히 인사하는 과정에서 싸가지 없음을 느낄 수 있는가? 본인이 한 번 시연해 보시라. 두 번 째는, 이력서도 제대로 읽어보지 않은 상태에서 대체 누구한테 레퍼런스 체크를 하고선, 그 선입견을 가지고 면접에 들어온 것인가? 누구에게 물었는지를 알고 싶은 게 아니라, 지원자의 이력서도 안 읽고선 그저 그 이력서에 아는 지인이 다녔던 회사가 보이니 냅다 레퍼런스 체크를 하고, 선입견을 가지고 면접에 응하는 사람이 어떻게 채용 담당자로서 일을 하고자 하는가에 대한 개인의 소견을 좀 들어 보고 싶다. 본인에게 직업 의식이란 무엇인가? 필자의 이런 경험, 이런 건 그냥 단편적인 사례 중 하나이고, 워낙 잘 알려진 이야기라서 공개할 수 있는 거다. 그 동안 보아온 필자가 겪은 경험담, 필자의 팀원들이 겪는 걸 본 목격담들도 많다. Tester로 살다 보면 굉장히 많은 편견과 무시를 당연히 받아들이고 살아야 한다. 아마 Tester들 몇 명 모아놓고 술 한 잔 하며 구체적인 사례를 하나씩 나열하다 보면 아마 성경책 두께의 책이 몇 권 나올거다. 그것도 굉장히 비슷한 패턴으로… 누군가는 말한다. “QA 하는 애들은 피해의식에 절어 있다.” 그래 그렇게 생각할 수 있다. 누군가는 우리가 하는 말들이 ‘피해의식’이 라고 치부해 버리고 싶은 정도의 가벼운 투정으로 생각할 수 있다. 근데 필자는 Tester 커뮤니티의 운영자로서 여러 사람들에게 고민 상담을 듣거나, 이력서를 리뷰해 주곤 하는데… 한국에서 일어나고 있는 자연스러운 Tester 차별과 폄하 언행들은 어느 회사 한 두 군데에서 발생하는 일은 아니다. 업계에서 전반적으로 발생하고 있는 현상이다. 그 모든 것은 결국 경영, 인사, Dev Leader들의 Software Engineering에 대한 이해와 Software Testing에 대한 이해의 관점 문제로 귀결된다. 그리고 그렇게 Tester들에게 영향을 주는 모든 사람들이 제대로 된 마인드셋을 가진 회사는 정말 드물다. 그러니, 업계의 동료, 후배님들 모두 인(仁)으로 악(惡)에 대적하라는 안중근 의사의 말씀을 기억하며 스트레스 많이 받지 마시고, 긍정적이고 행복하게, 그리고 지혜롭게 해결하시기를 바라고 또 바란다. References 이미지 출처 : 위키백과 - 안중근","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"명언","slug":"배움/명언","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/"}],"tags":[{"name":"명언","slug":"명언","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%96%B8/"},{"name":"안중근","slug":"안중근","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EC%A4%91%EA%B7%BC/"},{"name":"의사","slug":"의사","permalink":"https://xeppetto.github.io/tags/%EC%9D%98%EC%82%AC/"},{"name":"대한의군 참모중장","slug":"대한의군-참모중장","permalink":"https://xeppetto.github.io/tags/%EB%8C%80%ED%95%9C%EC%9D%98%EA%B5%B0-%EC%B0%B8%EB%AA%A8%EC%A4%91%EC%9E%A5/"},{"name":"약한 것","slug":"약한-것","permalink":"https://xeppetto.github.io/tags/%EC%95%BD%ED%95%9C-%EA%B2%83/"},{"name":"강한 것","slug":"강한-것","permalink":"https://xeppetto.github.io/tags/%EA%B0%95%ED%95%9C-%EA%B2%83/"},{"name":"인","slug":"인","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8/"},{"name":"악","slug":"악","permalink":"https://xeppetto.github.io/tags/%EC%95%85/"},{"name":"인으로 악에 대적한다","slug":"인으로-악에-대적한다","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%9C%BC%EB%A1%9C-%EC%95%85%EC%97%90-%EB%8C%80%EC%A0%81%ED%95%9C%EB%8B%A4/"}]},{"title":"2021년의 여름은 유난히 아름다웠다.","slug":"Xeppetto/About-Me-and-My-thought/20211010-2021년의-여름은-유난히-아름다웠다","date":"2021-10-10T01:10:10.000Z","updated":"2021-10-10T01:10:10.000Z","comments":true,"path":"Xeppetto/About-Me-and-My-thought/20211010-2021년의-여름은-유난히-아름다웠다/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20211010-2021%EB%85%84%EC%9D%98-%EC%97%AC%EB%A6%84%EC%9D%80-%EC%9C%A0%EB%82%9C%ED%9E%88-%EC%95%84%EB%A6%84%EB%8B%A4%EC%9B%A0%EB%8B%A4/","excerpt":"","text":"2021년의 하늘은 유난히 맑았다. 블로그에 혼을 쏟기엔 2021년 여름은 날씨가 너무 좋았다. 시간의 화살은 늘상 빠르게 날아가므로, 지금 이 시간을 누리고 싶었다. 올 해는 맑은 날씨를 즐기며 오프라인에서 하는 취미생활들에 집중하고, 또 신사업을 꾸려나가며 회사 업무에 집중하다보니 특히나 시간이 더 빠르게 지난 듯 하다. COVID-19 백신도 맞았다. 10월 14일에 2차를 맞기로 예정되어 있다. 2차 접종이 완료된 후인 2주쯤 뒤인 11월 즈음부터는 슬슬 다시 오프라인 모임 계획도 잡아 사람들도 만나야 겠다고 생각하고 있다. 2021년의 여름은 몇 년 동안 한국에 이렇게 날씨가 맑고 좋은 적이 있었나 싶을 정도로 너무 쾌청한 날씨가 이어졌다. 아침마다 눈쌀을 찌뿌리게 하던 미세먼지도 거의 없었고, 농민들을 눈물 짓게 만드는 태풍 피해도 거의 없었다. 비는 간간히 왔으나 큰 피해 없이 더위를 식혀주는 정도로 도움이 되는 비가 내렸다. 가뭄인가 싶으면 비가 오고, 좀 덥다 싶으면 한 번씩 비가 왔다. 여름 장마도 참 환상적이게 왔다. 해가 쨍쨍한 날에 흐느적 거리는 비가 오기를 몇 날 몇 일 하더니, 이내 곧 동남아의 스콜(Squall) 같은 비가 내리기도 하고, 이틀 맑고 하루 비오는 날씨도 왔었다. 하늘은 온통 ‘천지창조’라는 제목으로 어떤 천상의 화가가 붓질을 해 놓은 듯한 아름다운 빛내림(Tyndall phenomenon)은 몇 날 몇 일을 감상할 수 있었고, 아래 사진처럼 아름다운… 내 생에 직접 본 무지개 중에 가장 거대하고, 아름다운, 물감으로 색칠해 놓은 듯한 진한 무지개를 눈으로 직접 감상할 수 있었다. 운동하기에도 딱 적합한 날씨가 계속되었고, 2021년 여름의 노을은 그렇게 무척이나 매일 매일 아름다웠다. 황홀하다, 아름답다, 경이롭다.. 그런 말 이상의 무언가 표현이 있다면 그것을 쓰고 싶을 정도로 참 좋은 여름이었고, 또 그런 아름다운 가을을 보내고 있다. 잘 놀았다. 긍정적인 에너지 충전, 매일을 새롭게 하리라는 다짐의 동기부여, 꽉꽉 채워 완충이 될 때가지 잘 놀다 왔다. 매일 블로그에 글을 쓰리라는 다짐이 무색해질 정도로 날씨가 너무 좋아서… 그래서 잘 놀다 왔다. 앞으로도 내가 글을 열심히 쓸거라는 다짐은 들지 않는다. 그래도 맛있는거 많이 먹고, 운동 열심히 하고, 좋은 생각들을 하면서 사회생활을 한 후 처음으로 굉장히 평화롭고 회복되는 느낌의 계절을 보낸 듯 하다. COVID-19이 가시지 않은 2021년의 여름과 가을엔 이런 저런 문화생활도 많이 했다. 넷플릭스의 다양한 단편과 시리즈들을 감상했고, 한국 컨텐츠들의 높아지는 위상에 뿌듯해 했더랬다. 예전 TV드라마들도 찾아 보고, 다시 보기하면서 즐거워 했다. 그 중에 가장 인상 깊었던 컨텐츠 중 하나는 2013년 작(作)인 ‘직장의 신’이라는 시리즈였다. 너무 웃겼고, 주인공의 대사들이 공감도 됐고, 극인줄 알면서도 주인공이 바라는 그런 세상이 오기를 바라며 응원하기도 했다. 2021년을 강타한 넷플릭스의 오징어 게임 역시 이번 ‘계절 즐기기’에 가장 인상 깊던 컨텐츠 중 하나였다. 한국의 이야기로 전 세계의 공감을 얻어낼 수 있음을 증명한 사례가 되었으니, 이제 조금은 더 한국이 선진국임을 실감하며 살아도 되겠다 싶다. 맑은 여름 하늘, 가을 하늘을 보며 지난 시간들을 떠올려봤다. ‘직장의 신’이 방영되던 2013년을 곱씹어 보다보니, 당시엔 회사와 집, 가끔 헬스장이나 한강을 자전거로 돌아다니는 사이클을 몇 년을 하면서 왜 그렇게 열심히 살았을까 싶었다. 그렇게 재미있는 TV프로그램을 놓칠 정도로 당시에 내가 했던 일들이 가치 있는 일이었던지.. 지금 다시 생각하니 모르겠어서. 그러다 문득 ‘나의 20대, 30대에는 왜 그렇게 살았을까?’ 생각했다. 무엇을 위해 그렇게 열심히 공부를 하고, 일을 했던 걸까. 선구자가 될 생각은 없었는데… 유명해지거나, 남들을 이끌 생각이었다면 좀 더 그런걸 열심히 했겠지. 난 그럴 생각이 없었다. 난 그저 무엇을 하던 정상적인 방법으로 제대로 하고 싶었고, 그를 위해 내 업의 진리를 탐구했다. 가르쳐 주는 사람들이 없어서 스터디를 시작했고, 어느 순간 내가 스터디를 이끌고 있었고, 그렇게 어떤 커뮤니티의 리더가 되어 있었다. 커뮤니티의 리더가 되고 나니, 사람들이 모인 어느 곳이나 그렇듯 그곳에서 세력을 키워 자기 돈벌이로 이용하려는 사람들이 있었다. 그냥 둬도 됐을 텐데… 왜 그랬는지 그들과의 간헐적인 전투를 치르다보니 적도 생기고, 안티도 생겼다. 옳은 말을 하는 사람들보다 세력을 키워 떠드는 사람들이 잘되는 케이스들도 여러 차례 목격했다. 그래도 난 그들처럼 그렇게 살고 싶지 않았을 뿐. 죽는 날 하늘을 우러러 한 점 부끄럼 없기를 바라며 오늘도 내 업의 진리에 대해 고민한다. 이 계절이 지나면서 다짐한게 있다. 아마 다른 결심이 서기 전까지는 대중 앞에 서지 않으리라는. 세상이 나와 맺어준 인연들, 그들 중에 나에게 배우고자 하는 사람이 있다면 그들에게만 내 에너지를 쏟는게… 나에게도, 그리고 그들에게도 더 행복할 거라고 생각했다. 사실 올 해 열정적으로 하던 블로그의 글쓰기를 멈춘게 막연히 다른 일들이 너무 재미있어서 그런것도 있겠지만, 또 다른 이유는 내가 새로 만드는 블로그에 대해 너무 심각하게 생각하고 있었던게 아닌가 싶다. 좀 더 가볍게 가야겠다. 몇 년간의 공백, 그리고 이를 메우려는 욕심, 그 마음이 너무 앞서갔던 거 같다. 그래서 이제 그냥 간단하게 진행하려 한다. 생각나는 대로, 오늘의 이야기들을. 쓰고 싶으면 쓰는 거고 쓰기 싫으면 쓰지 않을 거다. 그리고 과거 블로그에 썼던 이야기들, 페이스북이나 테스트 관련 커뮤니티의 글들을 순서 없이 생각나는 대로, 눈에 띄는 대로 정리해봐야겠다. 정기적으로 뭘 하겠다는 생각도 떨쳐버리고, 뭘 되게 잘 해야겠다는 생각도 떨쳐버리고, 편하게 하고 싶은 이야기들을 써내려가려 한다. 그래, 2021년의 여름과 가을 하늘은 참 유난히 맑다. 저 맑은 하늘처럼 내 인생도 맑고, 앞으로 하려는 일들도 모두 맑게 잘 되었으면 좋겠다. 그리고 내 주변의 모든 사람들이 다 건강하고, 행복하게 살았으면 좋겠다. 아직 가을 하늘 공활하여 더 즐겨야만 하지만, 이제 다시 슬슬 글쓰기를 시작해야 겠다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"인간답게 살기","slug":"인간답게-살기","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EA%B0%84%EB%8B%B5%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"}]},{"title":"명언을 모아보기로 했다.","slug":"배움/명언/20210901_명언을 모아보기로 했다","date":"2021-09-01T00:01:00.000Z","updated":"2021-09-01T00:01:00.000Z","comments":true,"path":"배움/명언/20210901_명언을 모아보기로 했다/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/20210901_%EB%AA%85%EC%96%B8%EC%9D%84%20%EB%AA%A8%EC%95%84%EB%B3%B4%EA%B8%B0%EB%A1%9C%20%ED%96%88%EB%8B%A4/","excerpt":"","text":"너무나도 화창했던 2021년의 여름 어느날 밤, 넷플릭스의 다큐멘터리에서 아주 훌륭한 명언을 하시는 분을 보고 한참 동안 감동에 취해있다가 문득 ‘내가 기억하는 명언은 몇 개나 되나’ 생각이 들었다. 책을 읽다가, 영화를 보다가, 다큐멘터리를 보다가… 혹은 누군가의 발표자료에 적혀있던 내 가슴 속 무언가를 꽝 때리던 마음속 깊이 박혀지는 명언들. 그 좋은 내용들을 그냥 지나쳐가지 않도록 기억날 때 마다, 감동할 때 마다 모아 보기로 했다. 그런 생각을 하고 나서 모아둔 메모들을 보다보니 그런 내용들을 많이 보였다. 다시 꺼내 찬찬히 읽어보니 그런 명언들이 내 취향에 맞는 것인지, 아니면 시간이 지나고 시대가 지나도 원래 이렇게 좋은 내용들인건지 모르겠지만, 역시나 좋았다. 이런 내용들 타이핑하면서 다시 감동하고, 지금 시점에서의 내 소회를 회고해 보는 것. 그런게 요새는 날 행복하게 한다. 젊을 때는 다양한 것들을 보고 빨리빨리 움직임이 좋았다면, 이제 나이가 조금 드니 멀리 내다 보고, 어디든 좋으니 발밤발밤 움직이며 가는 게 좋은 거 같다. 그래서, 블로그에 명언을 모아보기로 했다. 개인적 상념들도 내려놓을 겸. 나 스스로를 위한 명언 모으기를 해볼까 한다. 명언들을 곱씹으며, 그 당시의 회고도 하고, 예전 일들을 정리도 해보려한다. 그렇게 앞으로의 인생을 살아가며, 그냥 스스로 하고 싶은 일들을 찾아 하나씩 해나가며 스스로 조금 더 행복해 지기를 바라는 바람이다. References 이미지 출처 : GoalCast - 10 good quotes","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"명언","slug":"배움/명언","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/"}],"tags":[{"name":"명언","slug":"명언","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%96%B8/"},{"name":"모으기","slug":"모으기","permalink":"https://xeppetto.github.io/tags/%EB%AA%A8%EC%9C%BC%EA%B8%B0/"},{"name":"시작","slug":"시작","permalink":"https://xeppetto.github.io/tags/%EC%8B%9C%EC%9E%91/"}]},{"title":"도네리카노 설정 기록","slug":"Xeppetto/ThisBlog/20210712-donaricano-setting","date":"2021-07-11T13:12:12.000Z","updated":"2021-07-11T13:12:12.000Z","comments":true,"path":"Xeppetto/ThisBlog/20210712-donaricano-setting/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20210712-donaricano-setting/","excerpt":"","text":"1. 후원과 관련한 잡담가장 강한 동기부여는 ‘결핍’이라고 한다. 필자에게도 그랬다. 하지만 이 ‘결핍’이라는 건 부정적 에너지에서 발생하는 동기부여이다. 나이가 들면 들수록 부정적 에너지를 동기부여 에너지로 전환하는게 힘들더라. 이유는 여러가지가 있겠으나, 이야기를 꺼내자니 괜히 재미 없는 필자의 인생한탄이 될거 같다. 아무튼 나이가 조금 들면서 부정적 에너지는 무시하고, 긍정적 에너지를 만들어 동기부여 에너지로 전환하는 연습을 계속 하고 있다. 실제로 그렇게 해야 무언가를 열심하고 꾸준히(Grit) 하게 되기 때문이다. 글을 쓰는 데에는 동기부여가 필요하다. 누구에겐 쉬울 수 있겠으나 필자에겐 그렇다. 필자는 글을 잘 쓰는 사람이 아니라 열심히 쓰는 사람이라서 그렇다. 젊을 때 쓰던 글들은 누군가 나를 알아봐 주었으면 하는 바램이 결핍으로 발동하면서 거대한 부정적 에너지가 동기부여 에너지로 전환되었고, 그 동기부여가 필자의 글이 되었었다. 그런데 부정적 에너지를 전환해서 사용하면 문제가 발생하더라. 필자가 가끔 예전 글들을 보고 있노라면 어떤 감정이 느껴진다. 세상이 필자를 알아주지 않는다고, 지식을 감추듯 암호처럼 써놓은 예전 글들을 보면 ‘그 당시 무슨 일이 있었지?’ 하고 갸우뚱하게 된다. 아마 뭔가 상처 받는 일이 있던 모양인데 사실 기억이 잘 나지 않는다. 그 때는 필자의 삶과 필자가 가진 지식에 대해 왜 그리 감사할 줄 몰랐는 지 모르겠다. 또 다른 이유는… 그렇게 악착 같이 공부하고, 글을 쓰고, 커뮤니티를 관리하고, 세미나를 벌리고, 발표를 하는 과정에서 에너지를 꽤 많이 소모했다. 흔히 말하는 번아웃 상태가 되고나서야 필자가 하는 행동들이 뭔가 잘 못되었다는 걸 깨달았고, 몇 년 간의 고민을 거쳐 긍정적 에너지를 전환해서 사용하는 방법을 익히게 되었다. 그렇다. 서론이 거창했지만, 긍정적 동기부여 에너지 확보를 위해… 필자를 작가로서 후원해 줄 분들을 위한 후원 링크를 만들었다. 필자가 남들보다 조금 잘하는 거 중 하나는 남들 다 알고, 하고 있는 것들의 원리와 근본적인 본질에 대해 고찰하고 이를 글로 펼쳐 써내는게 아닐까 싶다. 그래서 읽는 사람들이 ‘이게 뭐 어째서? 당연한거 아니야’ 하는 글들을 써내는게 필자의 장점 중 하나가 아닐까 싶다. 그런데 이것도 꽤나 정신적 에너지가 필요하다보니 필자가 글을 쓰기 위해 동기부여가 필요하고, 긍정적 동기부여를 위해 후원 링크를 열어 볼까 싶었다. 누가 커피라도 한 잔 사준다면 그 고마움과 누군가 이 허접한 글을 보고 있구나 하는 부담감 때문에라도 글을 열심히 쓰지 않을까 싶어서… 그리고 또, 필자의 블로그 그리고 필자가 지인들과 운영하고 있는 소프트웨어 테스팅 팀-블로그에 간단한 수익 모델을 찾고 있다. Google Adsense 정도가 가장 널리 알려진 방안이겠으나, 필자가 예전에 블로그할 때와 달리 최근의 Adsense는 통과하기가 거의 고시 수준이라고 알려져 있는데다가… 필자 블로그의 글과 우리 팀블로그에서 작성하고 있는 글의 주제는 획기적인 트래픽이 발생하지는 않을 주제다보니 다른 방식을 고려하고 있다. 일단은 합법적으로 많은 컨텐츠 크리에이터들이 도네이션용으로 사용하고 있는 도네리카노를 사용하기로 했다. 도네리카노에서 필자의 계정을 설정하기 위해 사용 방법을 분석하면서 해당 내용을 기록해 보았다. 이후에도 광고를 개재해 줄 업체를 찾아보거나, 블로그 컨텐츠로 수익을 낼 수 있는 방안이 무엇인지 꾸준히 연구해볼 예정이다. 2. 도네리카노 가입과 설정먼저, 도네리카노의 주소는 https://donaricano.com/ 이다. 카카오페이를 이용해서 후원금을 주고 받는 시스템이기 때문에 현재는 카카오톡으로 가입해야 한다. (언젠가 네이버페이나 다른 페이들도 지원하려나?) 가입 프로세스는 뭐… 언제 바뀌어도 이상하지 않으니 필자가 굳이 스크린샷을 찍어가며 설명할 필요는 없어 보인다. 먼저 필자 계정의 페이지는 이렇게 설정하였다. 이렇게 설정하는 방법에 대해 아래에 간단히 설명할까 한다. 가입 완료하고 나면 페이지 상단의 ‘대시보드’ 버튼을 클릭한다. 대시보드 페이제에서 - ① 후원 QR 코드 등록, ② 정보 수정 - 이 두 가지를 설정해야 한다. QR 코드는 카카오페이로 후원금을 송금할 수 있게 해 주는 역할을 하는 기능이고, 정보 수정은 해당 계정의 프로필을 등록하는 기능이다. 먼저 ① 후원 QR 코드 등록를 등록해 보자. (1) 카카오톡의 자기 프로필을 보면 상단에 QR 코드 아이콘이 있다. 이를 클릭한다. (2) 나타나는 QR 코드 하단에 있는 다운로드 버튼을 클릭하면 자기 자신에게도 QR 코드가 보내진다. (3) 이를 도네리카노 QR 코드 등록 화면에 등록하면 된다. (4) 등록 버튼을 눌러 저장하자. 이제 혹시라도 필자에게 후원금을 송금하고 싶은 분이 계시면 해당 QR 코드를 이용해서 카카오페이로 후원금을 송금할 수 있게 되었다. 후원 QR 코드를 등록한 후 행복 회로를 돌리면서 꿀잠을 자보자. 다음은 ② 정보 수정 페이지로 이동하자. (1) 위에서부터 프로필 아이디를 등록하고 자기 소개를 등록한다. (2) 그 뒤 자신을 대표할 대표 이미지와 인삿말을 등록한다. (3) 아래 쪽에는 컨텐츠 크리에이터의 분류와 주소를 입력한다. 분류 별로 주소를 1개씩 입력할 수 있다. 필자는 필자가 관리하는 3개의 컨텐츠들을 모두 등록했다. (4) 이제 마이페이지로 이동하면 등록한 정보들이 정상적으로 표시된다. 마이페이지 구성을 완료하고 나면 대시보드에서 ‘도네이션 버튼 추가’ 페이지로 이동한다. 여러가지 선택이 있는데 필자는 아래 색감이 마음에 들었다. 이를 페이지에 추가하면 아래와 같은 배너가 나타난다. 필자에게 커피 값 후원해 주시는 분이 계실지 모르겠지만 해 주시면 감사히 먹겠습니다. 마시고 남는 돈은 제가 후원하는 곳에 보내겠습니다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"후원","slug":"후원","permalink":"https://xeppetto.github.io/tags/%ED%9B%84%EC%9B%90/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"},{"name":"도네리카노","slug":"도네리카노","permalink":"https://xeppetto.github.io/tags/%EB%8F%84%EB%84%A4%EB%A6%AC%EC%B9%B4%EB%85%B8/"},{"name":"커피","slug":"커피","permalink":"https://xeppetto.github.io/tags/%EC%BB%A4%ED%94%BC/"},{"name":"즐겁게 글쓰기","slug":"즐겁게-글쓰기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EA%B8%80%EC%93%B0%EA%B8%B0/"}]},{"title":"정기 후원 기관 소개","slug":"Xeppetto/About-Me-and-My-thought/20210711-about-me_donation-for-myself","date":"2021-07-11T12:11:11.000Z","updated":"2021-07-11T12:11:11.000Z","comments":true,"path":"Xeppetto/About-Me-and-My-thought/20210711-about-me_donation-for-myself/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20210711-about-me_donation-for-myself/","excerpt":"","text":"글을 쓰면서 혹시 괜찮다고 생각하시는 분들이 계시면 커피를 좀 구걸해 볼까 싶어 도네리카노 후원 링크를 만들었다. 그리고 도네리카노 후원 링크를 설정하면서 난 어디에 후원하고, 했었는가에 대해 한 번 쯤 정리해 봐야겠다 싶었다. 아마 많은 분들이 그렇겠지만 필자도 어찌어찌하다보니 경험을 많이 해 보고 싶던 20대, 30대에 여기저기에 봉사활동도 많이 다니고 했더랬다. 지금은 COVID-19의 영향으로 어디 찾아가기도 어렵고, 그 동안 봉사활동을 하면서 깨달은 바가 있어 시간을 내서 찾아가는 봉사활동 보다는 금전 후원에 집중하고 있다. 아… 음… 그래, 이 이야기는 하는게 좋겠다. 혹시라도 영화나 TV에서 봉사하는 모습을 보고 어디 찾아가서 봉사하고 싶은 분들은 최소 3년 이상 한 기관에 계속 다닐 수 있는 분만 가시는게 좋다는 말씀을 드리고 싶다. 뜨내기처럼 봉사단이 왔다갔다하면 (봉사하는 자신은 얼마나 뿌듯할지 모르겠지만) 그 기관에 계속 있어야 하는 누군가(아기, 노인, 동물 등)는 잠깐 왔다가는 봉사단이 낯설고 정 붙이기가 어렵다. 특히 그런 기관에 남는 누군가들은 외로움에 노출되어 있기 때문에 잠깐 왔다갈거면 차라리 안가는게 낫다. 필자에게도 어려웠다. 정 붙였던 아이들과 정 떼려고 몇 달 동안 아이들에게 인사만 하고 기관 청소 봉사만 했었다. 사람에게서 정 떼는건 정말 어렵다. 본인이 그들을 책임질게 아니라면… 봉사는 자신이 꼭 3년 이상 지속적으로, 그 기관이 오라고 하는 시간에 갈 수 있을 경우만 하는게 좋다. 그렇지 않으면 금전으로 하는게 좋다. 남의 인생에 너무 적극적으로 개입하지 말자. 본인이 적극적으로 끝까지 책임질게 아니라면. 필자는 여러 기관에 후원&#x2F;봉사했다가, 금액&#x2F;시간을 줄였다&#x2F;늘렸다가 많이 했었다. 현재까지 필자가 지속적으로 후원하는 곳은 두 군데다. 어쩌다 보니 두 군데 모두 수녀님들이 운영하시는 기관들만 남았다. 성가정입양원 (http://www.holyfcac.or.kr)이곳에 처음 붕사 활동을 갔을 때 신부님께 대충 들은 내용은 이랬다. 과거에 한국이 못 살 때 한국인 해외 입양이 많았던 이유는 해외로 입양 보내는 기관들이 거의 돈을 받고 입양시키는 기관들이었다고 한다. 좋게 보면 가족을 찾아 주는 거지만, 나쁘게 보면 아이들을 해외로 팔아넘기는 걸로도 볼 수 있었다고 한다. 당시 수녀님들이 그런게 너무 마음이 아파서 버려진 고아들을 돌보기 시작했고, 그렇게 성가정입양원이 시작되었다고 한다. 관련해서 짧게 경험을 공유해본다. 원래 아기 봉사는 남자들을 잘 들이지 않는다. 요즈음은 모르겠다. 예전엔 그랬다. 왜냐하면 아기돌봄 정기 봉사를 올 시간이 있는 건 거의 다 가정이 있는 여성들인 경우가 많기 때문이다. 이게 왜 문제냐면, 아기들을 돌 볼 때 아무리 갓난 아이라도 여성의 느낌과 남성의 느낌을 안다고 한다. 그런데 남성들은 비정기적으로 봉사하거나, 지속적으로 오는 경우가 적어서 남성이 한 번 안아주고 나면 아줌마들이 아무리 어르고 달래도 계속 운다고 한다. 그래서 가능하면 입양 보내서 입양처의 아빠가 안아주는게 제일 낫다고 한다. 필자는 필자 인생에서 가장 고민이 많은 20대의 오춘기에 자주 봉사를 갔었다. 뭔가 남을 위해 봉사하면 마음이 편해지는 경험을 했어서 그렇다. 정기 봉사하시는 분들이 못오시는 경우 필자가 대신 아기를 몇 번 돌 볼 경험이 있었는데, 솔직히 마음이 너무 아파서 못보겠더라. 필자가 주는… 그 남자의 따뜻함이 그리운 아이가 필자만 보면 안아달라 보채기도 해서, 그 뒤로는 인사만 하고 청소만 했었다. 아주머니들이 필자에게 보채는 아이 안아주지 말라고 하시는 것도 너무 마음아프고. 지금은 그래서 그냥 후원금만 보낸다. 많이 보낼 수 없어 항상 미안한 마음이 있다. 모든 아이들이 좋은 부모님을 만나 행복했으면… 하고 기도한다. 필자는 몇 년 전부터 더 이상 찾아는 봉사는 하지 않고 매달 정기 후원을 하고, 회사나 기타 경우 보너스 돈이 생기면 생각나서 비정기 후원금을 보낸다. 알로이시오 마리아 수녀회 (http://www.sistersofmary.or.kr)먼저 기관의 ‘알로이시오’는 고(故) 알로이시오 슈월츠 신부님의 이름에서 따온 이름이다. 예전에는 ‘알로이시오 학교’를 운영하셨으며 대상은 한국의 청소년 중 가족들이 없거나, 가족들이 돌볼 수 있는 능력이 되지 않는 경우 선생님들과 수녀님들이 챙겨주시는 학교였다고 한다. 현재는 한국이 잘 살게되고, 또 여러 교육 사정이 바뀌어 학교는 더 이상 운영하지 않으신다고 한다. 해당 학교의 건물은 교육체험시설로 탈 바꿈하여 알로이시오 기지로 리모델링 되었다. 리모델링 된 건물은 부산의 교육격차 해소를 위한 기구로 변경되었으며, 수 많은 지역의 교육 정책 관련 공무원들이 들러보는 기관이 되었다. 알로이시오 기지는 COVID-19이 창궐한 이후 외부 방문객의 출입을 제한하고 있는데, 필자는 우연한 기회에 지인 찬스로 방문할 기회가 있었다. 이 건물은 정말… 대단하다. 필자가 본 모든 교육 건물 중에 최고로 좋은 구조였다. 너무 너무 멋있었다. COVID-19이 끝나면 꼭 다시 방문해서 좀 긴 시간 동안 머물며 여러 체험을 해보고 싶기도 하고, 알로이시오 힐링 센터를 운영하고 계신다고 해서 참여해 보고 싶은 마음이 있다. 알로이시오 기지 건물의 구조에 대해서는 아래 영상으로 간접적으로 느껴볼 수 있다. 이곳에도 매달 정기 후원도 하고 가끔 회사에서 보너스가 나오면 생각이나서 함께 나누기도 한다. 그 외, 비정기 후원처아래는 정기적으로 후원하고 있지는 않지만 비정기적으로 후원하고 있는 경우다. 인센티브가 나오거나, 생각지 못한 수입(교육 후 수강료 입금 등)이 생기면 금전 지원을 보내곤 한다. (1) 저소득층 여아 생리대 지원 : 이 후원에 대해서는 명확한 필자만의 철학을 가지고 있다. 남자로 태어나면 입식 변기를 자연스레 사용할 수 있다. 그렇게 남자의 신체로 생겼으니까. 그리고 그 변기를 쓰는게 훨씬 청결하고 합리적이니까. 그런데 여자들은 여자로 태어났는데 왜 생리대를 구입해야 하는가에 대해 몇 년 동안, 꽤 오래 의문을 가지고 있었다. 이를 사회적으로 해결 방법이 있을까 고민하며, 만약 필자가 사회적 기업 형태라도 할 수 있으면 스타트업을 해 볼 생각으로 여러 자료를 찾아보곤 했었다. 회사의 정치에 질려 1인 스타트업이라도 하겠다며 그렇게 조사를 열심히 하던 즈음에 한국 여성들의 급진적 이념이 발생했다. (필자는 한국의 ‘그분들’의 철학을 이해 못하겠다. 필자처럼 열심히 자신들을 위해 고민하는 사람에게도 “넌 남자니까 가해자야”라길래… 그냥 신경을 끊었다.) 그래서 필자가 할 수 있는 최선이 무엇일까 고민하다가 금액적인 지원이 낫겠다 생각들었다. 1년에 1회 정도는 인센티브 같은게 생기면 이를 진행하는 기관들에 비정기적으로 후원하고 있다. (2) 결손청소년지원 : 필자는 기회의 평등이 보장되었으면 좋겠다. 세상은 원래 불공평한거라지만, 기회를 제대로 가져보지 못한채 자본주의의 정글 속에서 실패와 무기력을 강제로 학습 당하는 아이들, 그 어떤 보호막도 없는 아이들이 너무 많은거 같다. 이런 청소년들을 보호해 주는 고마운 어른들도 많기에 필자가 정기 후원을 하고 있지는 않지만, 1년에 한 번 정도는 후원을 하는거 같다. (3) 그 외, 기관 : 해피빈이나 유니세프 등 후원 기관들에는 2005년부터 비정기 후원을 계속 했었으나, 회계 정산 내역을 명확히 밝히지 않는다고 해서 2019년 이후 후원을 멈추었다. 알림 : 생리대지원 후원과 관련한 내용에 대해서는 논쟁을 미리 거부합니다. 댓글 남길 시 댓글 삭제하고, 댓글 작성을 막겠습니다. 정치적 견해 차이나 성관념에 관한 관점 차이로 쓸데 없는 소모적 논쟁하고 싶지 않습니다. 시간 아까워요. 그냥 나가서 맛난거 드세요. 인생 행복하게 삽시다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"인간답게 살기","slug":"인간답게-살기","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EA%B0%84%EB%8B%B5%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"함께 사는 세상","slug":"함께-사는-세상","permalink":"https://xeppetto.github.io/tags/%ED%95%A8%EA%BB%98-%EC%82%AC%EB%8A%94-%EC%84%B8%EC%83%81/"},{"name":"후원","slug":"후원","permalink":"https://xeppetto.github.io/tags/%ED%9B%84%EC%9B%90/"}]},{"title":"[Windows11] AMD 사용 시 Secure Boot 켜기","slug":"소프트웨어/Operating Systems/Windows/20210701_Windows11-compatibility-turnon-Secure-Boot","date":"2021-06-30T22:07:07.000Z","updated":"2021-06-30T22:07:07.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20210701_Windows11-compatibility-turnon-Secure-Boot/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20210701_Windows11-compatibility-turnon-Secure-Boot/","excerpt":"","text":"※ 알림1 : 모든 스크린샷은 너무 커지면 페이지의 스크롤이 길어지므로 적당히 편집하였다.※ 알림2 : 필자는 AMD processor와 MSI mother board를 2018년 중순 쯤에 구입했다. (다른 CPU와 MB를 이용한 설정은 이후 특이점이 있으면 별도의 글로 개재 예정이다.) AMD에서 Secure Boot 켜기 컴퓨터를 시작 혹은 다시 시작하고 BIOS Mode로 진입한다. MSI board를 사용하는 경우 &lt;DEL&gt; 키 혹은 &lt;F11&gt;키를 누르면 BIOS 설정으로 진입할 수 있다. BIOS에 진입하면 아래와 같은 Settings 메뉴가 나타난다. 여기에서 고급을 선택한다. Settings\\고급 메뉴에서 Windows OS Configuration을 선택한다. Settings\\고급\\Windows OS Configuration 메뉴에서 Windows 10 WHQL Support를 선택하여 활성화한다. Windows 10 WHQL Support를 선택하여 활성화하고 나면 아래에 Secure Boot 메뉴가 나타난다. 이를 선택한다. Settings\\고급\\Windows OS Configuration\\Secure Boot 메뉴로 들어가면 Secure Boot control이 나타난다. 이를 활성화한다. Secure Boot control이 정상적으로 활성화되면 다행인데, 필자의 경우처럼 아래와 오류가 발생할 수 있다. PK(Platform Key)가 뭘까 싶고… 이런 경우 아래의 Secure Boot Mode를 Standard ▷ Custom으로 변경한다. 그리고 다시 Secure Boot Mode를 Custom ▷ Standard로 변경한다. 그러고 나면 아까는 오류가 발생하던 Secure Boot control을 활성화 상태로 변경할 수 있다. 이제 BIOS의 변경을 저장하고 종료하면 완료된다. 이제 Windows11 호환성 검사 도구를 실행하면 TPM이 정상 작동한다고 나타날 것이다. 자료 출처 https://m.blog.naver.com/from020/221004985939 https://youtu.be/TbgIig29A1c","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Windows11","slug":"Windows11","permalink":"https://xeppetto.github.io/tags/Windows11/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"AMD","slug":"AMD","permalink":"https://xeppetto.github.io/tags/AMD/"},{"name":"Secure Boot","slug":"Secure-Boot","permalink":"https://xeppetto.github.io/tags/Secure-Boot/"}]},{"title":"[Windows11] 부팅 모드를 MBR에서 GPT로 변경하기","slug":"소프트웨어/Operating Systems/Windows/20210630_Windows11-compatibility-MBR-to-GPT","date":"2021-06-30T08:17:17.000Z","updated":"2021-06-30T23:30:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20210630_Windows11-compatibility-MBR-to-GPT/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20210630_Windows11-compatibility-MBR-to-GPT/","excerpt":"","text":"Windows11에서 MBR이 안된다는게 대체 무슨 소리일까?Windows11에서 부팅 모드가 MBR일 때 정상적으로 작동하지 않는다는 기술적 문제는 설명이 좀 많이 복잡하다. 그 기술이 나온 배경을 필자가 모드 인지하고 있지 못하기도 하고, 해당 분야는 소프트웨어가 아니다보니 필자가 충분한 지식을 갖추고 있지도 못하다. 그래서 필자가 제대로 설명할 수 있을 지 모르겠으니 관심 있으신 분들은 본 포스팅에서 키워드를 캐치하셔서 인터넷 검색을 활용하시기 바란다. 아마, Windows11이 출시되는 시점에 고수분께서 이런 걸 아주 쉽게 설명해주는 포스팅 혹은 유투브 강의가 등장하지 않을까 기대해 본다. 일단, MBR이란 Master Boot Record의 약지로 예전 Windows의 Booting 방식이다. 이 MBR 모드는 굉장히 오래전부터 Windows의 부팅 시스템으로 사용했던 기술이며, Windows10에서 Secure Boot 개념이 등장한 이후 MBR 방식의 부팅은 ‘Legacy BIOS mode’라고 부른다. MBR에서는 disk sector size 등 여러 Legacy 설정(예전 기술의 잔재)으로 인해 최신 기술을 이용한 Secure Boot를 이용할 수 없다. 그래서 이 MBR 부팅 모드를 GPT(GUID Partition Table)로 부팅 모드로 변경해줘야 UEFI가 작동하고, 그래야 Secure Boot를 사용할 수 있다. Windows11에서는 기존의 Legacy 모드를 버리고 Secure Boot만 지원하기 때문에 필수로 변경해야 한다. MBR을 GPT로 변경하기필자는 인터넷을 검색하여 MBR을 GPT로 변경해 보기로 했다. 먼저 Windows PowerShell을 관리자 모드로 실행한다. 필자의 경우는 Windows Terminal을 이용했다. 아래의 명령을 이용하여 해당 OS에 연결된 저장소 목록 및 부팅 모드 정보를 확인한다. 1Get-Disk | ft -auto 필자의 경우 아래와 같이 2010년 경부터 사용하던 저장소들이 있다보니 MBR과 GPT가 뒤섞여 있었다. 제어판 &gt; 관리 도구 &gt; 컴퓨터 관리 &gt; 디스크 관리로 이동하면 MBR로 된 드라이브는 “주 파티션”이라고 표시되며, GPT로 된 드라이브는 “기본 데이터 파티션”이라고 표시된다. 이 MBR(주 파티션)들을 모두 GPT(기본 데이터 파티션)으로 변경해야 한다. 필자의 경우 MBR로 된 파티션 중 하나가 겨우 111GB 밖에 되지 않았으므로, 해당 드라이브의 내용을 백업 후 포멧해 보기로 했다. Windows PowerShell 혹은 Windows Terminal에서 diskpart를 이용한다. 1diskpart 위 명령을 입력하면 아래와 같이 DISKPART shell 모드가 나타난다. 아래의 명령들을 쭉 입력해 주면 결과가 나타난다. list disk : 해당 OS에 연결된 저장소 목록을 보여주며, GPT 부팅 모드 여부는 * 로 표시한다. select disk &lt;num&gt; : 저장소 번호를 부여하여 선택한다. clean : 선택된 저장소를 포멧한다. 복구되지 않으므로 반드시 작업 전 백업해두어야 한다. convert gpt : 선택된 저장소의 부팅 모드를 GPT로 변환한다. 다시 제어판 &gt; 관리 도구 &gt; 컴퓨터 관리 &gt; 디스크 관리로 이동하여 확인하면 변환한 파티션은 GPT(기본 데이터 파티션)로 변경되어 있음을 볼 수 있다. 상용 프로그램 사용으로 스트레스 없는 변환을 경험하다위 방법을 진행한 후 사소한(?) 문제에 봉착했으니… 2번 저장소까지는 장상적으로 잘 변환했는데, 필자의 저장소 중 MBR이라고 되어 있는 1번 저장소에 시스템 파일들이 들어 있어 ‘백업 &gt; 포멧 &gt; 복원’이라는 절차를 거치기가 너무나 거추장스러웠다는 점이다. 잠시 딴 소리를 하자면… 필자는 MS-DOS 시절부터 Windows를 사용했다. MS-DOS 위에서 가동하던 Windows 3.1부터 사용했던지라, 필자의 컴퓨터 사용 행위 자체에도 Legacy Behavior(예전 기술로부터 생겨난 버릇)가 존재하는데… 바로 시스템 드라이브인 C:\\을 절대적으로 신뢰하지 못하고 ‘사용자 문서, 즐겨찾기, 이메일 저장소, 중요 Program 설치’ 등을 D:\\ 드라이브에 저장하는 버릇이 그것이었다. 한 마디로 말해서 「C:\\ 드라이브 뻑나면 그냥 포멧한다」라는 의도로 그렇게 구성했었다. 그리고 필자의 저 1번 저장소는 바로 문제의 D:\\ 드라이브였던 것이었던~ 것이었던~ 것이었다~ 사실 요새는 OneDrive를 이용해서 주요 설정을 모두 Cloud로 백업해 버릴 수 있으므로, Outlook 파일 정도만 옮겨주면 된다. 그런데 이게 버릇이 되어 버려서 그대로 행하는 게 문제다. 필자도 ‘천년나무V11’로 스스로의 버릇을 업그레이드해야 할 듯하다. GUI(?)도 좀 고치고… 인터넷을 검색하여 ‘데이터 손실 없이 MBR을 GPT로 변환하는 방법’을 찾았으나 이는 2번 저장소에는 잘 들어맞았지만, 1번 저장소에서는 아래와 같은 오류가 발생했다. (아래는 필자가 찍어둔 스크린샷을 분실해서 인터넷에서 검색한 이미지이다.) 이를 어찌 해결해야 하나 고민하면서 약 1시간을 검색하며 고군분투하다가 문득… ‘흠… 꽤나 큰 크기의 저장소 내에 수 많은 시스템 파일이나 없어져선 안될 파일들을 가진게 나 뿐은 아니겠네’ 하는 생각이 들었다. 그래서 이를 해결한 솔루션이 있을 거라 생각했고, 검색했고, 찾았다. 검색했노라, 찾았노라, 해결했노라. 필자가 찾은 솔루션은 Partition Assistant라는 프로그램이었는데, Freeware 버전을 받으면 하필 MBR-GPT 변환만 지원하지 않는다. 변환을 위해서는 Pro 버전을 구입해야 한다. 근데 ‘이걸 살까말까’하는 고민은 3분도 채 하지 않았다. 일단 필자의 컴퓨터에 작업해야 하고, 앞으로 필자가 관리하는 회사의 업무용 컴퓨터 2대에 같은 작업을 해야 하며, 또 필자의 주변 지인들거 도와줄거 생각하니 어차피 1회성으로 사용하고 끝날 일이 아니었기 때문이다. 그래서 뒤도 안돌아보고 결제했다. Partition Assistant Pro 버전은 개인용이며 2대의 PC에 설치할 수 있다. LifeTime 버전업을 지원해주므로, 한 번 구입하면 계속 기술지원 및 버전 업그레이드를 받을 수 있다. 공식 홈페이지에서 이것저것 프로모션 코드를 받으면 한화 약 5만원 정도 지불하면 구입할 수 있다. (물론, 필자는 환전 비용을 아끼기 위해 미화로 결재했다. 근데 웃긴건 이 회사 독일 회사다. 근데 유로보다 미화달러가 더 싸다.) Partition Assistant Pro를 이용하니 뭐 백업이나 복원이니 할 필요 없다. 상단의 Convert Disk 메뉴만 눌러주면 알아서 한다. 컴퓨터 다시 시작하라는 것만 하면 끝. 스트레스 받지 않고 돈 5만원 정도 투자하고 싶으신 분, 혹은 필자처럼 주변에 여러 대의 PC에서 MBR-GPT 변환 작업을 하셔야 하는 분들에게 Partition Assistant Pro 버전을 추천한다. 자료 출처 http://cantips.com/3431 https://aomeitech.com/aomei-partition-assistant.html","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Windows11","slug":"Windows11","permalink":"https://xeppetto.github.io/tags/Windows11/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Storage","slug":"Storage","permalink":"https://xeppetto.github.io/tags/Storage/"},{"name":"MBR","slug":"MBR","permalink":"https://xeppetto.github.io/tags/MBR/"},{"name":"GPT","slug":"GPT","permalink":"https://xeppetto.github.io/tags/GPT/"},{"name":"convert","slug":"convert","permalink":"https://xeppetto.github.io/tags/convert/"}]},{"title":"[Windows11] AMD 사용 시 TPM 켜기","slug":"소프트웨어/Operating Systems/Windows/20210630_Windows11-compatibility-AMD-TPM","date":"2021-06-29T22:07:07.000Z","updated":"2021-06-29T22:07:07.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20210630_Windows11-compatibility-AMD-TPM/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20210630_Windows11-compatibility-AMD-TPM/","excerpt":"","text":"※ 알림1 : 모든 스크린샷은 너무 커지면 페이지의 스크롤이 길어지므로 적당히 편집하였다.※ 알림2 : 필자는 AMD processor와 MSI mother board를 2018년 중순 쯤에 구입했다. (다른 CPU와 MB를 이용한 설정은 이후 특이점이 있으면 별도의 글로 개재 예정이다.) AMD에서 fTPM 켜기 컴퓨터를 시작 혹은 다시 시작하고 BIOS Mode로 진입한다. MSI board를 사용하는 경우 &lt;DEL&gt; 키 혹은 &lt;F11&gt;키를 누르면 BIOS 설정으로 진입할 수 있다. BIOS에 진입하면 아래와 같은 Settings 메뉴가 나타난다. 여기에서 Security를 선택한다. Settings\\Security 메뉴에서 Trusted Computing을 선택한다. Setting\\Security\\Trusted Computing에서 Security Device Support를 선택하여 Enable로 변경한다. Security Device Support를 클릭해도 화면에 아무런 변화가 없을 텐데.. 아직 저장을 하지 않아서 그렇다. 첫 번째 화면의 메뉴로 가서 BIOS의 변경을 저장하고 컴퓨터를 다시 시작한다. 다시 Setting\\Security\\Trusted Computing으로 이동하면 아래와 같이 TPM 관련 설정들이 나타난다. TPM 관련 세부내용을 특별히 변경할 필요는 없다. 그냥 BIOS에서 나가면 된다. 이제 Windows11 호환성 검사 도구를 실행하면 TPM이 정상 작동한다고 나타날 것이다. 본인 컴퓨터의 TPM 버전 확인하기본인 컴퓨터의 TPM 버전은 윈도우 실행 화면에서 tpm.msc를 입력하여 실행할 수 있으며, TPM이 성공적으로 활성화된 경우 결과는 아래와 같이 나타난다. 필자의 경우 AMD의 fTPM을 Enable 하였으며 아래와 같은 정보를 보여준다. 자료 출처 https://docs.microsoft.com/ko/windows/security/information-protection/tpm/trusted-platform-module-overview https://jee00609.github.io/it%20news/What-is-TPM/ https://namu.wiki/w/TPM","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Windows11","slug":"Windows11","permalink":"https://xeppetto.github.io/tags/Windows11/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"AMD","slug":"AMD","permalink":"https://xeppetto.github.io/tags/AMD/"},{"name":"TPM","slug":"TPM","permalink":"https://xeppetto.github.io/tags/TPM/"},{"name":"fTPM","slug":"fTPM","permalink":"https://xeppetto.github.io/tags/fTPM/"}]},{"title":"[Windows11] Windows11, 설치 가능 여부 확인","slug":"소프트웨어/Operating Systems/Windows/20210629_Windows11-compatibility-checking","date":"2021-06-28T22:07:07.000Z","updated":"2021-06-30T15:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20210629_Windows11-compatibility-checking/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20210629_Windows11-compatibility-checking/","excerpt":"","text":"목차 Windows11이라고? Windows11 사양 MS 공식 호환성 검사 도구 WhyNotWin11 오픈소스 호환성 검사 도구 Moin11 오픈소스 호환성 검사 도구 이 글은 필자가 평소 잘하지 않는 ‘괜히 유행따라 써 보는’ 포스팅이다. 😉 결국 연말엔 필자의 업무에 필요한 일이 될 것이기 때문에 미리 공부하는 겸, 겸사겸사 기록해 보았다. Windows11이라고?Windows11이 나오기 몇 일 전부터 Facebook 친구분들 중 전문가분들의 논의가 분주했다. 출시 버전의 이름부터도 꽤나 논란이었고 요란했다. Windows10 21H2로 출시한다던가, Windows10 Sun Valley로 출시한다 혹은, Windows11로 출시된다는 설도 있다 등등. 그도 그럴것이 Windows10을 출시할 때 Microsoft는 “더 이상의 Windows 버전은 없다.” 라고 선언한 적이 있기 때문이었다. 그러나… 결론은 Windows11로 출시되었다. Microsoft가 Windows를 11 버전으로 올린 이유는 아래의 Windows11 사양 내용을 읽어보면 대략 알 수 있다. 그 동안 업무를 하면서 겪어온 고생스러운 점들 중 큰 변경점이 있다. 일단 32-bit는 더 이상 지원하지 않고, 64-bit만 지원한다는 점과 Windows10부터 제거할 수 있었던 Internet Explorer가 아예 기본으로 빠져 있다는 점이 가장 큰 변경점이다. (물론, IE는 추가 설정으로 추가할 수 있다. 어쨌든 기본이 아니다.) 그리고 부팅 Legacy BIOS mode를 완전히 제거하고, Secure Boot mode로만 부팅할 수 있다는 점도 아주 크게 변경된 점이다. 소프트웨어 개발에 참여하는 입장에서는 테스트 범위가 확~ 줄어든 경향이 있기 때문에 당연히 반가운 변화이다. Windows11의 외형을 보면 과거 Windows의 뭔가 딱딱하고 못생긴 느낌을 없애고 사용자 인터페이스의 사용성을 높였다. 그리고 사용자 인터페이스 자체가 굉장히 다이나믹해졌고, 전체적으로 GUI의 모양을 다듬었으며, 인공지능을 활용한 기능들을 강화했다고 한다. (※주: 인공 지능 부분은 필자가 확인할 길이 없어 그냥 뉴스와 블로그의 내용을 차용했다.) 아직 확인할 길은 없지만 Microsoft에 따르면, Windows11은 Windows10보다 약 30~40% 정도 작고 효율적으로 하드웨어를 사용하기 때문에 더 빠르다고 한다. 글세… 이건 확인해봐야 할 일이다. 😉 백문이불여일견(百聞而不如一見), 써봐야 아는 것. 써보기 위해 일단 설치 환경부터 살펴보자. Windows11 사양발표된 Windows11의 사양은 아래와 같다. 필자는 뭘 세세하게 기억하는 스타일이 되지 못해서, 나중에 필자가 필요할 때 찾아보고 알아볼 수 있게 정리를 해 보았다. 분류 설명 Processor Processor란 일반 사용자들 용어로는 CPU를 말한다. 2코어 이상 + 1GHz 이상, 64-bit 지원해야 한다. 혹은 SOC(System on Chip)를 지원해야 한다. 다만, 오래 사용하면 느려지는 OS라는 시스템 프로그램의 특성상 설치 이후가 관건. RAM RAM은 일반 사용자들 용어로는 Memory를 말한다. 4GB 이상이 최소사양으로 나와 있다. 그러나 메모리는 다들 아시다 싶이 거거익선(巨巨益善), 클 수록 좋다. Storage 예전엔 HDD라고 표기되었을 테지만, 요새는 저장 장치가 다양해져서 Storage라 부른다. 저장 정치는 64GB 이상이면 가능하다고 한다. 하지만 OS에서는 저장장치 역시 거거익선(巨巨益善), 클 수록 좋다. System Firmware UEFI(Unified Extensible Firmware Interface)는 필수가 되었다. UEFI Class 2 이상을 사용할 수 있어야 Secure Boot 활성이 가능하다. Secure boot란 펌웨어의 유효성을 체크하는 부팅 방식을 말한다. 즉, 신뢰할 수 있는 펌웨어를 통해서만 시스템 부팅을 허용하는 안전장치가 필수다. TPM AMD 계열에서는 fTPM이라 칭한다. Trusted Platform Module (TPM) version 2.0 이상을 지원해야 한다. TPM 칩은 암호화 작업을 수행하도록 설계된 보안 암호화 프로세서이다. TPM 기술은 Windows의 BitLocker 기술 및 부팅 시 Secure Boot에 사용된다. TPM 관련 내용은 설명하자면 암호 알고리즘과 소프트웨어 적용 등 내용이 굉장히 방대하다. Windows11이 출시되는 시점에 전문가들이 잘 정리한 글들이 게시될 듯하다. Graphics Card DirectX 12 이후 버전을 지원해야 한다. 이 의미를 조금 더 해석하면… DirectX 12는 2020년 출시되었다. 해당 DirectX를 지원하지 않는 그래픽카드는 구동불가라는 의미이다. 또한, WDDM(Windows Display Driver Model) 2.0 드라이버를 지원해야 한다. WDDM은 데스크톱에서 바탕화면 및 응용 프로그램을 렌더링할 때 사용하는 기능을 담고 있다. Display 9인치 이상의 모니터 크기, 그리고 1280x720 이상, HD 이상의 해상도를 지원해야 한다. 이는 일반 사용자들이 사용하는 모니터를 고려한 최소사양이 아니므로 고려하지 않아도 된다. Windows11로 타블렛이나 기타 디바이스를 만드는 개발 회사를 위한 사양이다. 단말용 Software Tester들은 반드시 알고, 이해하고 있어야 하는 내용이다. Internet Connection &amp;nbsp; Microsoft 계정을 가지고 있어야 하며, 인터넷 네트워크에 연결되었어야 한다. Windows11은 설치 시점에 최초 1회는 반드시 Microsoft 계정으로 설치를 완료해야 한다. 현재까지 알려진 바로는 Local Account로는 설치를 지원하지 않는다고 한다. 이유는 최초 설치 시 쌓여 있는 Windows Update를 적용하기 위해서라고 한다. 설치 후에는 Local Account만 따로 설정하여 사용 가능하다고 한다. 뭐… 뭔가 복잡한데 위 사양들을 간략하게 요약해서 극단적으로 표현하자면… 「기본 스펙이 꽤나 높지만, 결국 2021년 기준으로 대략 최근 3년 안에 ‘그래픽카드를 어느 정도 좋은 걸로 구입한’ 컴퓨터에서는 구동된다는 소리」이다. MS 공식 호환성 검사 도구Windows11은 2021년 하반기에 출시될 예정이다. 이 글을 쓰고 있는 2021년 6월 현재는 Insider Program에서만 사용할 수 있다. 현재 사용하는 컴퓨터가 Windows11을 구동시킬 수 있는 지에 대해서는 Microsoft의 Windows11 공식 페이지에서 볼 수 있다. 근데, 초기 오픈 당시 가능 여부를 체크하는 프로그램을 제공하였으나, 2021년 6월 30일 현재 “출시 예정”으로 변경되어 있다. 아마 재정비해서 다시 제공하려는 모양이다. WhyNotWin11 오픈소스 호환성 검사 도구Microsoft의 공식 도구가 출시 예정인 관계로 비슷한 도구를 검색해 보았다. 먼저 이 도구를 찾았다. WhyNotWin11은 Windows11 설치 전 컴퓨터의 사양을 확인해 주는 호환성 검사 도구이다. Github repository - https://github.com/rcmaehl/WhyNotWin11/ 필자의 2018년에 맞춘 컴퓨터에서 구동시 결과는 아래와 같다. 원래 처음에는 TPM이 작동하지 않았는데, BIOS 설정에서 TPM 설정을 해 주고나서 다시 실행하니 아래와 같이 모두 OK가 표시되었다. 데헷~ 혹시 AMD에서 TPM 때문에 고생하시는 분이 계시다면 AMD에서 fTPM을 켠 방법을 참고하시면 된다. Moin11 오픈소스 호환성 검사 도구여기저기 돌아다니다보니 WhyNoyWin11과 조금 다르게 생긴 도구가 있길래 실행시켜 보았다. Moin11역시 Windows11 설치 전 컴퓨터의 사양을 확인해 주는 호환성 검사 도구이다. Github repository - https://github.com/builtbybel/moin-11 위의 WhyNotWin11이 모두 OK인 상태에서 돌렸는데… 어라? 이렇게 나온다. WhyNoyWin11과 다르게 2개의 호환성 오류가 발생했다. Secure Boot를 켜기 위해서는 먼저 TPM을 활성화시켜야 하고, 그 뒤에 BIOS에서 UEFI를 이용하여 Secure Boot를 활성화시켜야 한다. AMD 기반의 컴퓨터에서 Secure Boot를 켜는 방법은 스크린샷의 수가 많아 별도로 기록해 두었다. Disk Partition Type에 오류가 나타나는 이유는 CMOS Setup에서 UEFI를 사용할 수 없어서 나타나는 오류이다. Secure Booting을 하기 위해서는 TPM을 이용한 UEFI를 사용해야 하는데, UEFI를 사용하려면 저장소의 Boot mode를 MBR이 아닌 GPT로 변경해야 한다. 이에 대한 자세한 내용은 MBR을 GPT로 변경하는 방법에 별도로 정리해 두었다. 자료 출처 https://www.microsoft.com/en-us/windows/windows-11 https://rudalstb.tistory.com/60 https://ko.wikipedia.org/wiki/통일_확장_펌웨어_인터페이스 https://comeinsidebox.com/check-enable-secure-boot-in-windows/ https://namu.wiki/w/Windows 11 https://ko.wikipedia.org/wiki/DirectX https://ko.wikipedia.org/wiki/윈도우_디스플레이_드라이버_모델 https://m.blog.naver.com/agebreak/60211738428","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Windows11","slug":"Windows11","permalink":"https://xeppetto.github.io/tags/Windows11/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Compatibility","slug":"Compatibility","permalink":"https://xeppetto.github.io/tags/Compatibility/"}]},{"title":"과거의 게으름을 따라잡는 중","slug":"Xeppetto/ThisBlog/20210601-what-i-am-doing-for-now-on-this-blog","date":"2021-06-12T03:12:12.000Z","updated":"2021-06-12T03:12:12.000Z","comments":true,"path":"Xeppetto/ThisBlog/20210601-what-i-am-doing-for-now-on-this-blog/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20210601-what-i-am-doing-for-now-on-this-blog/","excerpt":"","text":"“블로그 새로 만드시더라고요? 잘 보고 있습니다. 근데 이제 QA 관련해서는 글 안 쓰시나요?” … 무척 부끄러운 질문을 받았다. 그 부끄러움은 내 현재의 게으름과 쌓아둔 과거 이야기들에서 기인한다. 한 마디로 요약하자면 ‘필자의 과거를 따라잡는 중’이다. 이 이야기를 시작하기 전에 먼저 해야 하는 고백이 있다. 필자에게는 사실 성격적 큰 단점이 있다. ‘남들에게 장점을 증명하는 것을 중요하게 생각하지 않는 점’이다. 필자는 필자 자신의 역량에 대해 한 번도 의심해 본 적이 없고, 필자의 면접 자리에서 면접관의 충만한 자기애로 인해 면접자인 필자를 이상한 방식으로 다그쳐도 ‘그러라 그래라~’ 하는 경우가 많다. 면접관이 어마어마하게 말실수를 하거나 예의 없게 하지 않는 이상 거의 그렇다고 봐야지. 필자는 그저… ‘나랑 같이 일해보면 내가 얼마나 잘하는지 알 텐데 뭐…’하며 필자를 선택하는 회사 자체가 운이 좋은 거라 생각하는 경향이 있다. 그래서 증명하려 노력하지 않는다. 나쁜 버릇이다. 필자가 그동안 해온 세미나 발표, 이런저런 생성한 자료들 등은 그야말로 ‘모두에게 나누어 주기 위한 목적’으로 한 행동일 뿐, 그걸로 필자가 어떤 능력을 갖추고 있노라고 증명하려 들지 않았었다. 어쩌면 지금 이 블로그도 증명한다기보다는 ‘정리한다’라는 느낌이 더 강하기도 하고. 원래 천성적으로 남에게 자신의 매력을 어필하려 들지 않는 성향이다 보니 딱히 무언가를 열심히 집중에서 증명하지 않았었다. 그런 개인적 단점 때문에 재미있는 취미 겸, 하고 싶은 말들을 하기 위한 개인 블로그들을 운영했었는데 2016년 즈음, 어느 순간 하기 싫어지는 이유들이 생겨버렸다. (그 이유들은 다른 글에서 정리 중이다.) 필자는 한두 가지 이유에 꽂혀서 뭔가를 결정하지 않는다. 어떤 행동을 하는 것도, 어떤 행동을 하지 않는 것도, 필자에겐 수많은 이유들에 대해 충분히 대응하고, 상황을 바꿔보려한 후에 고민한다. 시간이 흘러 뭔가를 해야 하는 또는 하지 말아야 하는 이유가 명확해지면 그때서야 행동에 옮긴다. 그렇게 그 때는 블로그를 더 이상 하기 싫어지는 이유가 너무나도 많았고, 명확했다. 그렇게 글 쓰기를 중단하고 몇 년간 개인 블로그를 하지 않았다. 하지만 메모에 광적으로 집착하고, 글 쓰는 걸 좋아하는 자아의 근본적 습성이 바뀌지는 않음으로, 여러 가지 노트 앱 서비스들(에버노트, 구글 드라이브, 애플 노트, MS원노트 등 서비스들과 필기 노트 등)에 그동안 정리하지 않은 많은 글이 몇 년 치, 블로그에 글을 쓰지 않은 기간만큼, 그렇게 많이 쌓여 있다. 어느 날 블로그를 다시 시작해 볼까 싶어서 꺼내 놓은 노트들을 보면서… 또 다시 꽤 긴 시간 동안 블로그 글쓰기를 다시 시작할까 말까 고민했다. 필자가 다시 글쓰기를 한다면 어떤 내용으로 글을 써야 하고, 어떤 방식으로 글을 남길지… 복잡한 생각들이 얽혀서 그 실타래를 풀어 단순화 시키는 작업, 그 고민은 몇 달간 계속되었다. 그리고 2020년 말, 결정했다. 올해, 2021년 동안 필자가 해야 하는 일은 과거 필자가 수행하며 ‘정리해야지’ 하고 두었던 일들을 먼저 정리하고, 그러고나서 지금 수행하고 있는 업무에서 정리해야 할 내용들을 정리하는 일이 우선이다. 필자는 이 내용을 「과거를 따라잡는 일」이라 정의하고 지금 글을 정리하고 있다. 과거의 생각들을 어느 정도 정리한 후, 내년부터는 새로운 생각들을 블로그에 적을 수 있도록 달리는 걸 올해의 목표로 삼았다. 근데… 솔직히 지금 속도라면 내년 중순까지는 과거를 정리하게 되지 않을까 싶다. 아, 그래서 초반의 질문에 답하자면 “QA 이야기를 다시 하긴 할 겁니다. 근데 아마 그동안 정리 좀 해야지 싶었던 내용들 다 정리하면서 동시에 시리즈로 연재할 수 있는 형태로 준비하지 싶습니다.” 라고 말씀드려야 할 것 같다. 필자가 쓰는 QA 관련 정보와 이야기를 읽으시러 방문하시는 분들께는 감사 인사드리며… 올해(2021년) 말이나, 내년(2022년)에 확인해 주시면 그 때 쯤엔 QA와 품질, 테스팅 관련 이야기들을 다시 시작할 거 같다는 말씀을 드리고 싶다. 이 글에는 댓글을 열어 두었으니, 혹시라도 먼저 정리했으면 하는 내용이 있으시면 댓글 달아주시면 제일 먼저 고려할까 한다. 항상 고맙습니다.2021년 6월 현재, 본 블로그의 댓글쓰기는 Github 회원만 가능합니다. 그림 출처 https://www.quotemaster.org/","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"},{"name":"과거","slug":"과거","permalink":"https://xeppetto.github.io/tags/%EA%B3%BC%EA%B1%B0/"},{"name":"현재","slug":"현재","permalink":"https://xeppetto.github.io/tags/%ED%98%84%EC%9E%AC/"},{"name":"미래","slug":"미래","permalink":"https://xeppetto.github.io/tags/%EB%AF%B8%EB%9E%98/"}]},{"title":"[Windows10] 패키지 설치 관리자","slug":"소프트웨어/Operating Systems/Windows/20210530_Windows10-App-InstallerV1-release","date":"2021-05-30T11:00:00.000Z","updated":"2021-05-30T11:00:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20210530_Windows10-App-InstallerV1-release/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20210530_Windows10-App-InstallerV1-release/","excerpt":"","text":"목차 윈도우 패키지 관리자 개요 윈도우 패키지 관리자 설치 및 실행 확인 몇 줄 요약 쓸만한 명령어들 몇 개 줍줍 윈도우 패키지 관리자 개요2021년 5월 26일에 Microsoft에서 직접 개발한 패키지 관리자가 정식 출시되었다고 한다. 「패키지 관리자」란, Linux 계열의 OS에서 패키지를 shell에서 설치하는 기능을 가진 실행 명령을 말한다. 예를 들어, Ubuntu의 apt, CentOS의 yum, MacOS의 brew 같은 것이다. 좀 더 명확한 예를 들자면, 본 블로그 내 필자의 다른 글에 정리해 두었지만, Ubuntu에서는 시스템에 설치된 패키지들의 업데이트 시 아래와 같은 명령을 활용한다. 1apt update &amp;&amp; apt upgrade &amp;&amp; apt dist-upgrade 이제 Windows10에서도 아래와 같이 업데이트할 수 있다. 1winget upgrade --all 한글로 「패키지 설치 관리자」라고 부르는 기능은 영어로는 「Windows Package Manager」이며, Microsoft 공식 사용자 매뉴얼도 링크해 두었다. 이로 인해 달라지는 점이라면 이렇다. 보안 향상 : 예전에는 윈도우의 특정 프로그램을 실행시키면 해당 프로그램이 서비스하는 서버에서 최신 버전을 실행 시점에 업데이트 하는 방식이었지만, 이제 패키지 설치 관리자 실행 명령을 이용하여 윈도우 서버에 최신 버전의 Manifesto 정보가 있다면, 즉시 모든 앱들을 업데이트할 수 있다. 시스템 업데이트를 잘 하지 않는 사람들에게는 조금 귀찮은 일이 생겼지만, 필자처럼 ‘취약점’ 같은 거 없애는 거에 강박관념 있는 사람들에게는 정말 좋은 변화이다. 패키지 전체 설치 : 예전에는 Windows OS를 포멧하고 다시 설치할라치면, 자기가 사용했던 프로그램들을 모두 기억하고 하나 하나 찾아다 다운로드하고 설치하고, 업데이트하고, 나에 맞게 설정해야 했지만… 이제 패키지 설치 관리자를 이용하면 스크립트로 한 방에 주르륵~~ 필요한 프로그램들을 설치할 수 있게 된다. (물론, 해당 프로그램의 제작사가 윈도우 관리 서버에 Package Manifesto 정보를 등록해줘야 하지만…) 아직까지 필자의 이해는 이정도다. 필자보다 똑똑한 분들이 더 좋은 리뷰를 해 주시면 필자도 훔펴보고, 공부하고 본 페이지의 내용에 추가해 보겠다. (대놓고 컨닝 예고!) 윈도우 패키지 관리자 설치 및 실행 확인필자가 처음에 이 뉴스를 보고 ‘응? 나 저거 설치 했었는데?’ 하는 생각이 들어, Microsoft Store를 켜고 검색해보니 뭔가 설치되어 있기는 하다. 어라? 얘가 아닌가보다. 다시 출시 관련들을 자세히 읽어보니 Windows Insider에 등록한 사람은 설치되어 있을 것이지만, 아니면 수동 설치하라고 한다. 필자는 그렇게까지 훌륭한 개발자는 아닌 쪼렙 코더라서 굳이 Windows Insider 프로그램까지 참여하고 있지는 않다보니 수동으로 설치하기로 했다. Windows Package Manager의 Github repository로 이동한다. 설치 패키지이니 덩치가 좀 클 것만 같다. Repository 중간에 있는 내용 중 덩치가 좀 큰 녀석을 다운로드 한다. (appxbundle이라는 파일명이 뭘 의미하는지 찾아보기 귀찮았다고나 할까…) Windows Terminal을 실행시켜 winget을 입력해보니 아래와 같이 아름답게 나타난다. 딱히 뭘 설치해야 할 지 모르겠어서 업그레이드를 해 보기로 했다. winget upgrade -all 명령을 입력해 보았다. 그랬더니 온갖 오류가 발생하면서 fail 메시지가 잔뜩 나타난다. 뭔가 느낌이 쎄~해서 CTRL+C 를 입력하여 진행 중인 업데이트를 abort 했다. Windows Terminal을 다시 “관리자 모드”로 실행했다. 다시 winget upgrade -all 명령을 입력하였더니, 정상적으로 등록된 모든 프로그램들을 업데이트 해 주었다. 성공! 몇 줄 요약 Windows Package Manager는 별도 다운로드 해야 한다. Windows Package Manager는 Windows Terminal이 “관리자 모드로 실행” 되었을 때만 정상 작동한다. Windows10에서도 이제 Linux 계열의 OS처럼 command shell에서 패키지 관리를 할 수 있다. (어라? 근데 이러면 Winux? Wibuntu?) 쓸만한 명령어들 몇 개 줍줍 패키지 매니저 명령어 보기 1winget 시스템 내 모든 프로그램들 업그레이드 1winget upgrade --all 모든 명령에 대한 도움말 표시 1winget --help 명령에 대한 옵션 표시 1winget &lt;command&gt; --help 실제 help 사용 예) 1winget upgrade --help","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Package Manager","slug":"Package-Manager","permalink":"https://xeppetto.github.io/tags/Package-Manager/"}]},{"title":"[Windows10] 뉴스 및 관심사 기능 꺼버리기","slug":"소프트웨어/Operating Systems/Windows/20210527_Windows10-TurnOff-News-and-Interests","date":"2021-05-27T09:45:00.000Z","updated":"2021-05-27T09:45:00.000Z","comments":true,"path":"소프트웨어/Operating Systems/Windows/20210527_Windows10-TurnOff-News-and-Interests/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating%20Systems/Windows/20210527_Windows10-TurnOff-News-and-Interests/","excerpt":"","text":"무척이나 정신 없고 바쁜 4월과 5월을 보냈지만, 바쁜 와중에도 시스템 업데이트를 하지 않으면 뭔가 불안해 하는 필자의 개인적 강박관념 덕분에 빠뜨리지 않고 Windows10의 21H1 업데이트를 진행했다. Windows10 21H1의 기능 업데이트를 진행하고 나니 다른 기능들 뭐가 바뀌었는지 모르겠고 작업표시줄에 무척 거슬리는게 하나 나타났다. 필자는 ‘현실적이라고 강요되는’ 모든 ‘비현실적이고 현실 왜곡적인 시사와 뉴스’에 대해 강한 경멸적 태도를 취하며 살아가는 사람이라, 뉴스나 주식 정보를 별로 좋아하지 않는다. 특히 그게 광고로 사용되면 정말 정말… 정.말. 싫다. (심지어 한국 언론은 ‘기레기’라는 말이 양산될 정도로 신뢰도가 바닥이다.) 그러니, 지워야 겠다. 작업 표시줄에 마우스 오른쪽 클릭한 뒤에 「뉴스 및 관심사 &gt; 끄기」로 꺼버렸다. 이제 더 이상 표시되지 않는다. 하지만 뭔가 찜찜했다. 어쨌든 선택지가 나타난다는 의미는 메모리에 상주할 가능성도 있기 때문이다. 작업표시줄을 우-클릭할 때 마다 나타나는 Cortana도 거슬려서 안그래도 지우려던 참이었다. 열심히 검색해보니 다행히 외국 포럼의 자료에 완전히 시야에서 지우는 방법을 안내하고 있었다. 자, 윈도우의 정책편집기(gpedit.msc)를 실행시킨다. 정책 편집기에서「컴퓨터 구성 &gt; 관리 템플릭 &gt; Windows 구성 요소 &gt; 뉴스 및 관심사」로 이동한다. 이후 「작업 표시줄에서 뉴스 및 관심사 사용」을 선택한다. 「작업 표시줄에서 뉴스 및 관심사 사용」을 「구성되지 않음 &gt; 사용 안 함」으로 변경한다. 성공이다, 이제 작업표시줄(Taskbar) 오른쪽 클릭해보면 아예 사라져 있음을 볼 수 있다. 혹시 바로 적용이 안되면 시스템을 ‘다시 시작하기’로 껐다 켜면 적용된다. 휴, 이제야 속이 시원하다. 이제 가서 Windows10 Version 21H1 패치노트나 한 번 읽어봐야지~! 참고 자료 https://www.tenforums.com/tutorials/178178-how-enable-disable-news-interests-taskbar-windows-10-a.html","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"}]},{"title":"【斷想】 리더가 감싸줘야 할 「그릇」에 대하여","slug":"Xeppetto/단상(斷想)/20210517-the-limitation-of-leadership","date":"2021-05-17T03:32:30.000Z","updated":"2021-05-17T03:32:30.000Z","comments":false,"path":"Xeppetto/단상(斷想)/20210517-the-limitation-of-leadership/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20210517-the-limitation-of-leadership/","excerpt":"","text":"이 세상 거의 모든 사람들은 자기 직업에 진심일 거다.누구나 더 잘하고 싶고, 더 인정 받고 싶고, 자신의 기여도를 확인받고 싶어한다.어제보다 나은 오늘의 자신을 발견하면 누구나 기쁘다.그건 너무나도 당연한 인간의 ‘존재 확인의 욕구’에서 기인할 것이다. 모든 사람은 다르게 생겼다.누구는 키가 크고, 누구는 작다. 손의 크기, 발의 크기, 얼굴 생김새의 크기도 제각각이다.그렇듯 모든 이들에게는 능력의 그릇, 마음의 그릇, 행복의 그릇 등 타고난 그릇의 크기가 제 각각이다.능력은 출중하나 마음의 여유가 없는 경우도 있고, 능력은 부족하나 현재에 만족하며 행복한 경우도 있다.늘 행복하지만 여유가 없는 사람도 있고, 마음이 편해서 욕심 없이 사는 이들도 있다.또 어떤 이는 가끔은 본인이 바라는 행복함을 향한 열망의 그릇이 너무 커서,그 욕망을 채우기 위해 자기 자신의 작은 그릇을 깨뜨리고 나아가 더 큰 그릇이 되기도 하더라. 그런 한계를 돌파하는 건 리더와 팔로워 간 상호 존중, 믿음, 사랑&#x2F;우정으로 이룰 수 있지만,여러 차례해 보니 결과적으로 그 모든 것은 누가 이끌어 주어야만 달성할 수 있는 경지가 아니었다.그건 각 개인의 노력과 인생의 운과, 그런 점들에 영향 받아 얻게되는 깨달음에 달려 있다는게 최종적인 결론이었다.개인의 노력이 있다고 해도 인생의 운이 따라 주지 않으면 깨달음을 얻을 수 없고,깨달음이 없는 상태에서는 본인의 그릇이라는 ‘알’을 깨뜨리고 나올 수 없다는게 나의 결론이었다. 새는 알을 깨고 나온다. 알은 곧 세계이다. 태어나려고 하는 자는 하나의 세계를 파괴하지 않으면 안 된다. 그 새는 신을 향해 날아간다. 그 신의 이름은 아프락사스라고 한다. (데미안, 헤르만 헤세) 그릇은 세상이고, 자신의 세상을 깨고 나오면 새로운 세상, 새로운 시야가 펼쳐진다.그러나, 이 세상 모든이의 그릇은 크기만이 아니라 모양도 다르므로,누군가가 자신의 세상에 살고 있고, 누군가가 어떤 세상을 깨고 나오지 못한다고 해서비난하거나 조롱할 거리는 아니다. 누군가가 자신과 맞지 않으면, 안 보면 된다.하지만 리더는 그들을 품고, 감싸주어 조직의 번영에 기여해야 한다.항상 그런 지점에서 고민이 시작되곤 한다. 리더의 입장에서는 여러 직원들과 함께 사업의 성공을 함께 해야 한다.리더들은 이런-저런 전략들을 수립하고, 또 실행하여 사업에 이바지하기 위해서 노력한다.그래서 각 직원들을 잘 교육시키고, 바르게 이끌어야 하지만,또 동시에 각 직원들의 한계를 명확히 인지해야 한다. 아무리 열정적인 직원이라도 그의 타고난 그릇의 크기를 다른 사람이 바꾸는 건 불가능하다.오직 자기 자신만이 자신의 그릇을 깨뜨리고 새로운 세상으로 나아갈 수 있다.그러니 각 개인이 스스로 깨닫는 한계까지만 교육으로 발전시킬 수 있음을 인정하되…그 이상은 바라지 않고, 각 개인이 가진 그릇의 생김새 그대로를 받아들여 조직의 업무에 녹여 넣는 것.거기까지가 리더의 역할이다. 거기까지가 리더의 역할임을 깨닫고 자연스러워짐은 위 글을 쓴 뒤로부터 한 2년 쯤 뒤였던거 같다.이를 머리가 아닌 몸에 익혀 체화(體化)하는 시간이 약 2년 정도 걸린거 같다. 이런 생각들이 몸에 붙어 당연해지고 나니같이 일하는 사람들에게 무리한 것을 요구하지 않게 되고,또 업무 중에 쓸데 없는 짜증이 잘 나지 않고,나 스스로 욕심도 많이 버리게 되는거 같다. 그렇게 난 아주 조금 더 행복해졌다. 어느 비오는 봄 날,문득 점심 시간에 페이스북을 들여다보다가 나타난 예전 글에 떠오른 짧은 생각,끝. &lt; 그림 출처 &gt; http://www.onday.or.kr/wp/?p=11605 필자의 짧은 생각에 대해 간단히 적습니다. 댓글 기능은 막아둡니다.【단상】의 글들은 행복하게 살고자 하는 필자 개인의 생각이므로 딱히 누군가의 댓글을 받고 싶어 쓰는 글은 아니니, ‘이 사람은 이런 쓸데 없는 생각을 하고 사는 구나~’ 정도로 생각해 주시면 좋겠습니다.굳이 이야기를 나누고 싶으시면 제 Social Network 계정으로 와주세요. 감사합니다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"댓글 금지","slug":"댓글-금지","permalink":"https://xeppetto.github.io/tags/%EB%8C%93%EA%B8%80-%EA%B8%88%EC%A7%80/"},{"name":"그냥 이런 놈이구나","slug":"그냥-이런-놈이구나","permalink":"https://xeppetto.github.io/tags/%EA%B7%B8%EB%83%A5-%EC%9D%B4%EB%9F%B0-%EB%86%88%EC%9D%B4%EA%B5%AC%EB%82%98/"}]},{"title":"[Docker] Docker에 Tibero 설치하기","slug":"소프트웨어/WSL-and-Docker/16-Docker-Tibero","date":"2021-05-08T05:53:00.000Z","updated":"2021-05-08T05:53:00.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/16-Docker-Tibero/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/16-Docker-Tibero/","excerpt":"","text":"본 글은 Windows10 WSL2 - Docker 시스템에 Tibero를 설치하여 테스트하는 내용을 소개한다. 고지1 : 기술 내용 변경이 될 가능성본 글은 2021년 5월에 퇴고를 완료하였다. 그 시점을 기준으로 Windows10에서 제공하는 WSL2, 그리고 Docker를 이용하여 Ubuntu image에서 Tibero를 설치하는 방법을 담고 있다. 시간이 자나 본 글의 내용 중 Windows10, WSL 등의 변경 혹은 TMax 공식 홈페이지 변경 등이 발생하면 본 포스팅과 내용이 맞지 않을 수 있다. 고지2 : 라이선스 저작권자의 요청에 의한 변경TMaxSoft社가 사업상의 이유로 본 포스팅의 내용 중 특정 내용 변경&#x2F;삭제 요청 시 일부 내용이 변경될 수 있음을 미리 감안하시고, 필요한 내용은 바로 저장하시기를 추천드린다. 고지3 : Docker와 WSL 사용법 숙지WSL의 사용 방법, Docker 사용 방법은 해당 내용이 설명된 페이지를 확인 부탁드린다. 해당 내용들에 대해서는 이미 어느 정도 숙지하고 있다고 가정하고 글을 작성하였다. Tibero DB란?이번 포스팅에서 Tibero DB란 무엇인가에 대해서는 다루지 않는다. 관련 내용은 Tibero 제품 공식 사이트를 참고하시기 바란다. 설치 환경이번 포스팅은 Windows10의 WSL2 + Docker를 이용한 설치 환경에 대해 설명하였다. Mac이나 기타 OS에서 설치하는 방법은 요청이 있을 시 매뉴얼을 만들어 보는 걸로! Tibero DB의 공식 이미지는 없음2021년 4월 현재, Tibero DB의 공식 이미지는 없다. 일반적으로 Docker에 이미지를 찾을 때는 Docker Hub로 이동하여 검색하여 내려 받게 되는데, Tibero는 공식 이미지랄게 없다. Docker Hub에서 Tibero를 검색하면 아래와 같이 그래도 몇 천 번 정도 데려간 흔적이 있는데 막상 실행해 보면 잘 안된다. 이런 저런 Tibero DB 설치 관련 글들을 찾아 보고 이유를 알게 되었는데, 뒤에서 다시 설명하겠으나 Tibero는 라이선스(License) 발급 시 해당 컴퓨터의 정보를 가지고 활성화(Activation)하는 구조를 가지고 있기 때문이었다. 또, Demo 버전은 최대 6개월까지 발급받아 사용할 수 있으나 이를 고정된 Docker image로 만드는 건 어려웠다. 그래서 필자가 한 번 정리해 보았다. 일단 Docker에서 Ubuntu 이미지를 데려오기필자가 다른 블로그들의 Tibero 관련 내용들을 살펴보고 설치하려 여러가지 삽질(?)을 해 보니, 결론적으로 Tibero의 경우는 각 개인이 따로 Docker Image를 보유하는 쪽이 더 나은 선택인거 같았다. 먼저 Docker에서 Ubuntu 공식 이미지를 이용하여 Image를 생성해 보자. 1docker pull ubuntu 생성된 이미지를 확인하자. 1docker images 필자의 경우는 아래와 같다. 아래와 같이 Ubuntu 이미지가 생성되어 있으면 정상이다. Ubuntu 이미지를 이용하여 TiberoDB를 설치할 Container를 생성아래의 Docker 컨테이너 생성 명령을 이용하여 TiberoDB를 설치할 컨테이너를 생성한다. 1docker run -i -t -p 8629:8629 --name tiberodb01 --hostname localhost ubuntu /bin/bash 8629는 TiberoDB의 공식 Port이므로 Forwarding 설정을 한다. Tibero는 라이선스 활성화 시 해당 컴퓨터의 Host Name과 Host ID 정보를 Mapping한다. 그러므로 hostname을 지정한다. 위 명령어 실행 시 생성한 tiberodb01 컨테이너의 bash shell이 나타날 것이다. Docker에서 Ubuntu Image를 처음 컨테이너로 생성하신 분들은 바로 Docker System Update하기 페이지를 참고하셔야 한다. 참고 : 컨테이너에서 나왔다가 다시 진입 할 때컨테이너에서 작업 후 나왔다가 다시 진입할 때는 아래와 같이 확인하여 진행하면 된다. Docker의 해당 컨테이너 상황을 확인한다. 1docker ps -a 해당 컨테이너가 stop&#x2F;exit된 상태라면 컨테이너를 실행시켜준다. 1docker start tiberodb01 해당 컨테이너가 start&#x2F;up된 상태라면 해당 컨테이너의 쉘로 진입한다. 1sudo docker exec --user=&quot;root&quot; -it tiberodb01 /bin/bash 현재 컨테이너 시스템의 bit를 확인Tibero는 x86 - 32 bit 버전과 64 bit 버전을 모두 지원한다. 그러므로, Ubuntu의 시스템 bit를 확인해야 한다. 아래의 명령을 사용하면 해당 컨테이너의 bit를 확인할 수 있다. 1dpkg -s libc6 | grep Arch 필자가 생성한 컨테이너의 경우는 아래와 같이 출력되었기 때문에 64 bit Tibero DB를 설치하기로 한다. 현재 컨테이너 시스템의 host name을 확인계속 강조하지만 Tibero는 라이선스 활성화 시 컴퓨터의 이름 정보를 가지고 활성화하며, 컴퓨터의 여러 정보들을 가지고 라이선스 정보를 완성하는 걸로 보인다. 그래서 필자는 컨테이너 생성 시 –hostname localhost 라고 명시하여, 컨테이너의 host name을 localhost로 명명하였다. (컨테이너 생성 시 사용자 지정하지 않으면 Ubuntu 마음 대로 명명한다.) 1hostname 위 명령어로 생성한 컨테이너의 host name을 다시 한 번 확인한다. Tibero DB를 위한 시스템 환경 변수를 추가이제 본격적으로 Tibero DB를 설치하기 전 시스템에서 사용할 환경 변수를 설정해야 한다. &#x2F;etc&#x2F;profile 파일을 열어서 맨 아랫부분에 아래 내용을 추가한다. 1vi /etc/profile profile 파일이 열리면 가장 아래 쪽에 아래의 내용들을 추가한다. 1234export TB_HOME=/usr/local/tibero6export TB_SID=tiberoexport LD_LIBRARY_PATH=$TB_HOME/lib:$TB_HOME/client/libexport PATH=$PATH:$TB_HOME/bin:$TB_HOME/client/bin 필자의 설정은 대략 아래와 같다. 환경 변수 설정을 시스템에 적용하기 위해서는 아래와 같이 수행하면 된다. 123echo $TB_HOME. /etc/profile echo $TB_HOME 위를 1 ~ 3까지 한 줄씩 실행하면, 1번에서는 아무 것도 출력되지 않다가 3번에는 &#x2F;usr&#x2F;local&#x2F;tibero6 라고 나타날 것이다. 2번째 줄에서 수행한 바와 같이 . &#x2F;etc&#x2F;profile 을 이용하여 변경 내역을 시스템 등록하면 환경 변수들이 정상적으로 적용된다. Tibero DB를 다운로드하기자, 이제 잠시 WSL을 내버려두고 웹브라우저에서 TMaxSoft의 공식 웹사이트(https://technet.tmaxsoft.com)로 이동한다. 회원 가입을 진행하고, 완료되면 로그인한다. 다운로드 &gt; 데이터베이스 &gt; Tibero &gt; Tibero6 다운로드로 이동한다. 페이지 하단에 나타나는 OS 중 Linux 선택 &gt; 64 bit &gt; tar.gz를 클릭하여 다운로드한다. 데모용 라이선스를 확보하기TMaxSoft의 공식 웹사이트(https://technet.tmaxsoft.com)에 아래와 같이 “데모라이선스 신청”이라는 배너가 보이면 클릭한다. 아래와 같은 배너가 나오면 클릭한다. 2021년 5월 기준, 공식 홈페이지의 첫 페이지에서도 볼 수 있고 다운로드 페이지에서도 볼 수 있다. 팝업 창이 나타나면 화면의 입력 항목들을 모두 기재한다. Host Name은 아까 컨테이너를 설정했단 localhost로 하고, 사용 용도를 반드시 기재해야 한다. 주의 : 데모 라이선스는 절대 상용 서비스에 사용하지 말라는 경고 문구를 꼭 숙지하시기 바란다. ‘실제 운영시스템’이라 함은 인터넷 상의 불특정 일반 사용자들에게 오픈하여 사용하는 유&#x2F;무료 서비스를 의미한다. 라이선스 고지 정책을 잘 지켜 국산 DB를 제작하는 회사에 피해 주는 일이 없도록 하자. 생성이 완료되면 본인의 이메일로 라이선스 파일이 도착한다. 첨부 파일을 다운로드 한다.(필자가 국산이니 소중히 아끼자고 설레발 쳐 놨는데 쌩뚱 맞게 메일은 영어로 올 거다. 쌩큐~ 라니!) 다운로드 한 파일 2개를 확인 후 복사하기 Tibero DB의 Linux 버전 tar.gz 파일과 License.xml 파일이 정상적으로 다운로드 되었는 지 확인한다. 이 두 파일을 사용자의 Window 폴더로 이동한다. 예를 들어, 사용자의 Windows Login 아이디가 “JamesBond”라면 C:\\Users\\JamesBond 라는 폴더가 있을 것이다. 그 위치에 파일들을 복사한다. WSL로 돌아가 list 명령을 실행해 보면 해당 파일 2개가 보여야 한다. 이 파일 2개를 생성한 tiberodb01 컨테이너 내로 복사해야 한다. 아래의 명령을 실행한다. 12docker cp ./license.xml tiberodb01:/usr/local/docker cp ./tibero6-bin-FS07_CS_2005-linux64-186930-opt-tested.tar.gz tiberodb01:/usr/local/ 다시 tiberodb01 컨테이너로 진입하여 &#x2F;usr&#x2F;local&#x2F; 디렉토리를 살펴보면 아래와 같이 파일 2개가 복사되어 있어야 한다. 자, 이제 설치 준비가 끝났다. 본격적으로 Tibero DB를 설치하기 Tibero DB 설치 및 실행 작업은 모두 root 계정으로 실행해야 한다. 먼저 root 권한을 획득한다. 1su - 다운로드한 tar.gz 파일의 압축을 해제한다. &#x2F;usr&#x2F;local&#x2F; 디렉토리에서 아래의 명령을 실행하여 압축을 해제한다. 12cd /usr/local/ tar -xzvf tibero6-bin-FS07_CS_2005-linux64-186930-opt-tested.tar.gz 압축 해제 후 가장 먼저 할 일은 License.xml 파일을 라이선스 폴더에 이동하는 것이다. &#x2F;usr&#x2F;local&#x2F; 디렉토리에서 License.xml 파일을 이동한다. 12cd /usr/local/ mv ./License.xml ./tibero6/license/ 다음은 실행 시 사용할 환경 파일을 설정해야 한다. &#x2F;usr&#x2F;local&#x2F;tibero6&#x2F;config로 이동하여 gen_tip.sh 를 실행한다. 이 명령을 실행하면 tibero.tip, psm_commands, tbdsn.tbr 등의 환경 설정 파일들을 자동으로 생성한다. 12cd /usr/local/tibero6/config./gen_tip.sh 다음은 필자가 삽질(?)하여 찾은 의존성 패키지 모듈을 설치한다. 필자가 왜 이 패키지들을 설치했는지 궁금하신 분들은 아래를 건너 뛰고 진행하면 아시게 될 거다. 일단 모두의 안녕과 평화를 위해 설치하고 진행하기로 한다. 12cd /usr/local/tibero6/binapt install libaio1 libncurses5 이제 Tibero6 DB의 기본 설치가 완료되었다. Tibero DB를 실행하기 다음은 &#x2F;usr&#x2F;local&#x2F;tibero6&#x2F;bin 디렉토리로 이동하여 실제 실행 및 기본 Schema 설정을 해주어야 한다. 아래의 명령을 실행하여 Tibero DB를 실행시킨다. (이 경우에도 su -로 root 권한을 획득하여 진행해야 한다.) 12cd /usr/local/tibero6/bintbboot nomount 여기에서 다양한 종류의 오류가 발생할 수 있다. 필자의 Step을 그대로 따라왔다면 오류가 발생하지 않아야 한다. (필자는 이미 5번 넘게 컨테이너 통째로 설치&#x2F;삭제를 한 후 본 글을 정리하기 때문이다.) 오류가 발생하는 경우 굉장히 난감할 것이다. TMaxSoft의 문서나 게시판에서 오류를 해결할 마땅한 방안들 혹은 정보들을 찾을 수 없기 때문이다. TMaxSoft의 사업 모델이 그러하니, 이해해야 한다. 그러므로, 일단 필자가 쓴 본 포스팅 대로 진행하는게 좋다. 이후 회사에서 Tibero DB 구입 결정이 나면 이후에 기술지원을 마음껏 이용할 수 있으니 그런 부분들(오류 메시지 해결이 어려운 부분)은 미리 양지하시기 바란다. 여러 종류의 에러가 발생할 수 있지만, 필자가 모두 경험해 보지는 못했을 테니 필자가 경험한 내용 중 하나를 공유한다. ※참고 : Mismatch host id 오류가 발생하는 경우 License 파일의 정보가 뭔가 문제가 있다는 소리다. 라이선스 파일을 다시 신청하여 다운로드해야 한다. 이때 꼭 host name을 확인하여 정확히 입력해야 한다. tbboot를 nomount 모드로 실행에 성공했다면, 다음은 Database를 구동해야 한다. 아래의 명령을 수행한다. 12cd /usr/local/tibero6/bintbsql sys/tibero tbsql이 성공적으로 실행되면 다음은 기본 Schema를 설정해줘야 한다. Tibero는 왜 이 작업을 사용자들이 수동으로 하도록 했는 지 잘 모르겠지만, 아무튼… 해야 한다. 필자가 웹을 뒤져 얻은 정보는 아래와 같다. 12345678910111213141516171819SQL &gt; create database &quot;tibero&quot; user sys identified by tibero maxinstances 8 maxdatafiles 100 character set MSWIN949 national character set UTF16 logfile group 1 &#x27;log001.log&#x27; size 100M, group 2 &#x27;log002.log&#x27; size 100M, group 3 &#x27;log003.log&#x27; size 100M maxloggroups 255 maxlogmembers 8 noarchivelog datafile &#x27;system001.dtf&#x27; size 100M autoextend on next 100M maxsize unlimited default temporary tablespace TEMP tempfile &#x27;temp001.dtf&#x27; size 100M autoextend on next 100M maxsize unlimited extent management local autoallocate undo tablespace UNDO datafile &#x27;undo001.dtf&#x27; size 100M autoextend on next 100M maxsize unlimited extent management local autoallocate; 모두 한 줄 씩 입력해야 하는 고단한 여정이지만, 잘 수행하면 아래 그림과 같이 성공적으로 database를 생성할 수 있다. 아래는 실제로 필자가 진행한 create database 및 schema 설정이다. Database created가 출력되면 성공이다. ※참고 : Tiebro DB의 Demo 라이선스에서는 Database 이름을 tibero만 허용하는 듯하다. 다른 이름으로 생성 시도 시 에러가 발생한다. Schema 설정을 하고 나면 quit 명령으로 Database에서 일단 나와야 한다. 1SQL &gt; quit; 다음은 Tibero에 기본 탑재된 SQL을 실행하여 Role, User, View 등을 생성해야 한다. 123su -/usr/local/tibero6/scripts./system.sh system.sh를 실행하면 두 번의 암호를 입력하라는 프롬프트가 나타난다. 아래를 참고하여 진행한다. sys의 기본 암호 : tibero syscat의 기본 암호 : syscat 위 패스워드들을 입력하고 나면, 3 ~ 4 차례 선택이 나타나는데 모두 Y를 입력하고 실행을 완료하면 된다. Tibero Database에 테이블을 생성하고, 데이터를 입력&#x2F;조회하기 Tibero DB에서 tbboot의 nomount 모드는 database를 설정할 때 사용하는 듯 하다. 테이블을 생성하고, 데이터를 다룰 때는 nomount 모드가 아니라 normal 모드를 사용해야 한다. 필자도 자세한 세부 내용은 숙지하지 못하였으므로, 자세한 내용은 Tibero DB 사용자 매뉴얼을 참고한다. 이제 tbboot의 normal mode로 Tibero DB에 진입해야 한다. 위에서 진행했던 내용이므로 이번엔 한 번에 진행한다. 일단 tbboot시 nomount를 사용하지 않고 실행한다. 이후 tbsql을 실행한다. 123cd /usr/local/tibero6/bintbboottbsql sys/tibero 먼저 CREATE TABLE로 데이터테이블을 생성한다. 12SQL &gt; CREATE TABLE TiberoTableTest 2 (ID NUMBER, NAME VARCHAR(20)); TiberoTableTest 데이터테이블에 테스트 데이터를 추가한다. 12SQL &gt; INSERT INTO TiberoTableTest(ID, NAME) VALUES(1, &#x27;name1&#x27;);SQL &gt; INSERT INTO TiberoTableTest(ID, NAME) VALUES(2, &#x27;name2&#x27;); 데이터 테이블을 조회한다. 1SQL &gt; select * from TiberoTableTest; 필자가 입력한 결과는 아래와 같다. 데이터테이블 조회가 잘 된다면 Tibero DB가 정상작동하고 있음을 알 수 있다. Tibero Studio로 GUI를 만끽해보기다른 Database들과 마찬가지로 Tibero 역시 GUI 관리 도구를 지원한다. GUI 관리도구를 이용해서 시스템의 세부 내용을 잘 모르는 사람이라도 Data Query를 할 줄 알면 내용을 볼 수 있다. 먼저 TMaxSoft의 공식 웹사이트(https://technet.tmaxsoft.com)로 이동하여, 다운로드 &gt; 데이터베이스 &gt; Tibero 페이지로 이동한다. 아래와 같이 페이지 하단에 Tibero Studio가 표시된다. 티베로 스튜디오는 Windows용 Application이다. WSL과 Docker, 그리고 tiberodb01 컨테이너가 실행되고 있는 상태에서, 아래와 같이 해당 컨테이너에 접속하는 정보들을 입력한다. 정상적으로 접속되면 아래와 같이 DB의 세부 내용이 표시된다. SQL 구문들도 잘 작동한다. 이후 필자도 해봐야 아는 것들 Tibero의 기본 구문들은 Oracle과 같다는데… 음… 필자 입장에선 낯설었다. 조금 익숙해질 시간이 필요하다. 어쨌든 이제 아무때나 Docker를 켜서 Tibero를 구동시킬 수 있게 되었으니 일단 만족한다. TiberoDB 사용자 매뉴얼의 양이 너무 방대해서 찾아 보기가 어려웠다. Web App 개발을 위해 Data Connection을 사용하여 연동하는 방법, ODBC 연결하는 방법 등은 필자도 조금 더 멘땅에 헤딩을 해보고 확인하겠다. 참고자료 https://sm987.blogspot.com/2019/10/centos7-tibero.html https://webobj.tistory.com/22 https://unluckyjung.github.io/cloud/2020/04/23/Docker_install/","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"Database","slug":"Database","permalink":"https://xeppetto.github.io/tags/Database/"},{"name":"Tibero","slug":"Tibero","permalink":"https://xeppetto.github.io/tags/Tibero/"}]},{"title":"매일 글쓰기를 위한 스스로의 다짐","slug":"Xeppetto/ThisBlog/20210502-grit-for-every-day","date":"2021-05-01T22:00:00.000Z","updated":"2021-05-01T22:00:00.000Z","comments":false,"path":"Xeppetto/ThisBlog/20210502-grit-for-every-day/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20210502-grit-for-every-day/","excerpt":"","text":"블로그를 멈춘건 2014년 말, 그리고 다시 블로그를 시작하기로 마음 먹은 건 2018년이었으나, 마음 먹은 대로 즉시 글쓰기가 되지는 않았다. 이후 써 나아갈 블로그의 형태와 앞으로 지속적으로 글쓰기를 하기 위한 방안을 모색하고 기획을 분리하고, 합치기를 몇 번. 그리고 나 혼자 쓸 글과 ‘인생의 친구들’과 함께 쓸 글들을 합치고, 분리하고, 분류하기를 몇 번. 또, 앞으로 내가 하고 싶은 일과 정리하고 뒤에 두고 가야 할 일들에 대해 정리하기를 몇 번. 그렇게 오랜 기획을 하고 2020년에야 겨우 다시 글쓰기를 시작했다. 블로그의 글쓰기를 다시 시작하면서 쓴 글에서 표현한 바와 같이, 나 같은 경우는 블로그의 글쓰기가 어렵지는 않았다. 어려웠던 건, 가슴 속 깊이 자리 잡았던 열정과 간절함 같은 부분이 많이 사라져 ‘스스로의 마음 가짐’이 많이 없어져 그 느긋함이 늘 내 손목을 잡았다. 사람에겐 누구나 가장 강한 동기부여가 ‘결핍’으로부터 발생할 텐데… 남은 인생 대비해 보았을때 지금 내가 갖춘 어느 정도의 지식과 굶어 죽지 않을 만한 밥벌이와 몸 뉘일만한 따뜻한 공간, 그리고 남은 인생 여정을 함께 할 사람이 생기면서 그 ‘결핍’이 ‘느긋함’으로 변하고, 강한 ‘간절함’이 희석되어 느긋한 마음 가짐으로 변해버렸음을 깨달았다. 블로그를 다시 시작하는 이유를 써 내려가고, 퇴고를 해 가면서 ‘원래 글쓰기가 이렇게 어려웠나?’ 싶은 마음에 옛 글들을 보니, 꽤나 잘 쓴 글들이다. 물론 어린 마음에 욕 먹기 싫어 여러 주제를 함축적으로 다루거나 직설해야 하는 부분을 감추어 둔게 보이는건 부끄럽지만, 그 글들을 어느 정도의 퇴고를 거쳐 탈고 했는 지 기억나지 않다보니 꽤나 잘 쓴 글로 보였다. 인정해야 한다. 난 예전처럼 결핍할 수 없기에, 다시 활화산처럼 열정이 불타오를 수 없다. 하지만 마그마가 흐른 자국 위에 서서 그 온기를 느끼고 있기에 매일 글쓰기를 위한 스스로의 다짐을 적어본다. 난 앞으로 매일 최소 30분, 가능한 1시간 이상, 아침 업무 전에 글쓰기를 하고, 퇴고를 하려한다. 가능한 매일. 과거의 결핍에서 발생한 여러 관심사와 호기심은 지금 돌아보면 쓸모 없는 여러 취미생활들을 만들어 냈고, 그 과정에서 나름 즐겨왔으나 내가 인생에서 지속하고 싶은 과제들을 이루어내기 힘들도록 시간을 뺐고 있음을 인정했고, 그 시간들을 줄여 다시 내 인생의 기쁨인 글쓰기, 특히 소프트웨어 관련 글쓰기에 투자하려 한다. 내가 정리하고, 내려놓고 두고 떠나야 하는 이야기들과, 누가 읽을 지 모르겠는 나의 이야기들을 남겨두려 함은 남은 인생의 여정에서 내가 하고 싶은 일들에 집중하며 즐겁게 살기 위함이며, 마지막 순간 허무하지 않기 위함이므로. 이 글에는 댓글을 남기실 수 없습니다. 이 글의 내용으로 이야기를 하고 싶으시면 제 개인 Social Media로 와주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"},{"name":"매일 글쓰기","slug":"매일-글쓰기","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EC%9D%BC-%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"열정","slug":"열정","permalink":"https://xeppetto.github.io/tags/%EC%97%B4%EC%A0%95/"}]},{"title":"[Docker] Docker에 PostgreSQL 설치하기","slug":"소프트웨어/WSL-and-Docker/15-Docker-PostGreSQL","date":"2021-04-30T23:08:08.000Z","updated":"2021-06-09T03:55:55.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/15-Docker-PostGreSQL/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/15-Docker-PostGreSQL/","excerpt":"","text":"목차 PostgreSQL이란? PostgreSQL을 Docker에 설치하기 PostgreSQL을 실행하고 데이터 만들어보기 Microsoft SQLServer Management Studio로 접속하기 PostgreSQL이란?PostgreSQL이란 무엇인가?에 대해서 자세한 내용이 필요하신 분들은 PostgreSQL 공식 사이트의 내용과 PostgreSQL 위키백과를 참고하시기 바란다. 본 포스팅에서는 WSL2 - Docker에 설치하는 데에 집중하여 기술하려 한다. PostgreSQL을 Docker에 설치하기 Docker Hub에서 PostgreSQL을 검색하면 아래와 같이 PostgreSQL의 공식 이미지가 검색된다. 해당 PostgreSQL을 Docker로 데려오자. 1docker pull postgres 이미지가 잘 생성되었는 지 확인하자. postgres 이미지가 생성되어 있으면 성공이다. 1docker images Postgres 컨테이너를 생성하고 진입하기 PostgreSQL을 위한 컨테이너를 생성하기 위해서는 아래와 같이 입력한다. 이 중 &lt;YourStrong@Passw0rd&gt; 부분은 자신이 사용할 DB 암호를 입력하면 된다. 1docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=&quot;&lt;YourStrong@Passw0rd&gt;&quot; --name PostgreSQL01 postgres 위의 각 항목은 다음과 같다. (1) docker run : docker image에서 container를 생성한다. (2) –name PostgreSQL01 : container의 이름은 PostgreSQL01로 한다. (3) -p 5432:5432 : 해당 container의 port forwarding에 대해 inbound&#x2F;outbound port 모두 5432으로 설정한다. (4) -e : container 내 변수를 설정한다. (5) POSTGRES_PASSWORD&#x3D;”암호” : ROOT 암호를 설정 따옴표 내의 내용은 암호이다. (6) -d postgres : postgres이라는 이미지에서 분리하여 container를 생성한다. 컨테이너의 상태를 확인한다. PostgreSQL01 컨테이너의 상태가 현재 Up 상태이면 생성 및 실행 성공이다. 1docker ps -a 컨테이너가 실행 중인 상태일 때 컨테이너로 진입 시 아래 명령을 사용한다. 1sudo docker exec --user=&quot;root&quot; -it PostgreSQL01 &quot;bash&quot; PostgreSQL을 실행하고 데이터 만들어보기 PostgreSQL01 컨테이너로 진입하였으면, 아래와 같은 명령을 이용하여 DB를 실행할 수 있다. 1psql -U postgres 서버 내 생성되어 있는 모든 데이터베이스 이름을 확인해보자. 12SELECT datname FROM pg_database; -- 전체 데이터베이스 이름 출력SELECT datname FROM pg_database WHERE datistemplate = false; -- 사용자가 생성한 데이터베이스 이름만 출력 PostgreSQL 내에 사용자 Database를 하나 생성해 보자. 사용 방법은 **CREATE DATABASE 데이터베이스이름;**으로 하면 된다. 1CREATE DATABASE postgresTestDB; 생성된 Database의 Schema를 보려면 아래와 같이 입력한다. 1SELECT nspname FROM pg_catalog.pg_namespace; ![위 1~4까지를 실행한 결과](/images/WSLnDocker/20210501-Docker-PostgreSQL/postgres-docker-hub07.png) 생성한 데이터베이스들 중 하나를 사용하기 위해서는 \\c 데이터베이스이름을 실행하면 된다. 12\\c postgresql\\c postgrestestdb 아래와 같이 사용하는 데이터베이스가 변경된다. postgrestestdb를 선택한 후 특정 DB 내 모든 Table을 확인해 본다. 123SELECT * FROM PG_TABLES; -- PostgreSQL 내 모든 테이블 이름 조회SELECT * FROM PG_TABLES WHERE schemaname=&#x27;public&#x27;; -- 사용자가 생성한 테이블 이름 조회SELECT table_name FROM information_schema.tables WHERE table_schema = &#x27;public&#x27; ORDER BY table_name; -- 사용자가 생성한 테이블의 이름 정보만 조회 아래와 같은 SQL 구문을 사용하여 간단히 데이터테이블을 하나 생성, 데이터 입력 후 조회해 본다. Line 1부터 한 줄 씩 입력하여 실행한다. 1234CREATE TABLE TestTable (ID INT, TestString VARCHAR(20));INSERT INTO TestTable VALUES(1, &#x27;number one&#x27;);INSERT INTO TestTable VALUES(2, &#x27;number two&#x27;);SELECT * FROM TestTable; 참고 : PostgreSQL에서 문자열 입력 시 single quote를 사용해야 한다. PostgreSQL에서 빠져나올 때는 아래와 같이 입력하면 된다. 1\\q 그 외 PostgreSQL에서 사용할 수 있는 여러 구문과 명령에 대한 자세한 내용은 PostgreSQL Tutorial 페이지를 참고한다. GUI 도구 pgAdmin 설치하기PostgreSQL은 pgAdmin이라는 GUI 도구를 지원한다. 먼저 pgAdmin 설치를 위해서 pgAdmin 공식 홈페이지로 이동한다. 필자는 Download &gt; Windows를 선택하여 Windows용 클라이언트를 다운로드 하였다. 필자가 작성하는 시점에는 pgAdmin4 v5.2가 최신이었다. 최신 버전을 다운로드하여 설치한다. 다운로드한 파일을 클릭하면 설치가 시작된다. 설치하는 방법에 대해서는 따로 안내하지 않겠다. 설치가 완료되면 윈도우 시작 화면에 pgAdmin이 나타난다. pgAdmin을 실행하면 짧은 로딩이 진행되는 동안 아래와 같은 로고 화면이 나타난다. pgAdmin 실행 시 암호를 입력하라고 나오면, 위쪽에 컨테이너를 생성할 때 입력했던 **&lt;YourStrong@Passw0rd&gt;**에 지정했던 암호를 입력하면 된다. 성공적으로 로그인 되었다면 Quick Link의 Add New Server를 클릭하여 생성한 PostgreSQL01 컨테이너에 연결해 보자. 새 창이 나타나면 General 탭과 Connection 탭에 아래와 같이 정보를 입력한다. 주소 : 127.0.0.1 - 내부 Docker의 컨테이너 주소 ID : postgres PW : 위에서 설정한 &lt;YourStrong@Passw0rd&gt; 암호 입력 잘 연결되면 아래와 같이 아까 생성한 데이터베이스들이 나타난다. 테이블을 생성했었던 데이터베이스 위에 마우스 오른쪽 클릭하여 메뉴 중 Query Tool을 선택한다. Query Tool에서 SQL 구문을 입력하면 정상적으로 결과가 출력된다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"Database","slug":"Database","permalink":"https://xeppetto.github.io/tags/Database/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://xeppetto.github.io/tags/PostgreSQL/"}]},{"title":"[책과 생각] 국어를 즐겁게","slug":"배움/독서/국어를 즐겁게","date":"2021-04-29T10:25:00.000Z","updated":"2021-04-29T10:25:00.000Z","comments":true,"path":"배움/독서/국어를 즐겁게/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/%EA%B5%AD%EC%96%B4%EB%A5%BC%20%EC%A6%90%EA%B2%81%EA%B2%8C/","excerpt":"","text":"어른들을 위한 국어책, 국어를 즐겁게이 책은 내 입장에서 보기엔 한 마디로 「어른을 위한 국어책」이라 생각했다. 아이들에게 이 책의 이야기를 해 주면 아마 “자기만 재미있어하는 이상한 이야기를 하는 어른” 정도로 취급받지 않을까 생각이 든다. 왜냐하면 아이들에게는 ‘말에 담긴 의미’를 유추하는 재미를 찾기보다 ‘의미 전달하는 도구로서의 말’에 더 집중하는 시기일 거 같아서 그렇다. 그러니 재미있는 단축어들도 많이 만들어내고. 하지만 대부분의 사람들이 어른이 되어가며 「말」을 이용해서 의사소통하며 의도를 전달하려 애쓰게 된다. 모든 사람들은 내 의도와 다르게 남에게 의미가 전달될 때도 있고, 그로 인해 오해하기도 혹은 본의와 다르게 받아들이는 사람이 내 말을 선의로 받아들이는 경험을 한다. 그러면서 ‘내가 과연 한국말을 하고 있지만, 정말 한국말을 「잘」하고 있는 게 맞는 걸까?’ 하는 의문이 들게 되고, 그런 의문을 가진 어른들은 스스로 글쓰기, 말하기 같은 여러 표현 방법으로서의 국어에서부터 본인의 ‘자아정체성’을 찾아가는 언어로 공부가 확장되는 게 아닐까 싶다. 이 책이 나에겐 그랬다. ‘아니 이렇게나 많은 재미있는 언어의 어원과 유래에 대한 이야기라니…’ 저자가 너무 쉽고 재밌게 이야기들을 풀어 주셔서 마치 선생님이 수업 시간에 진도 안 나가고 해 주시는 삼천포로 빠져버린… 그렇게 실제 수업 진도보다 재미있는 옛 이야기들을 듣는 기분이었다. 「국어를 즐겁게」는 어느 누군가에게는 쉽게 읽힐 소재들이 들어 있는 책일 수도 있겠다. 내겐 꽤 여러 생각이 들게 하는 책이었다. 국어를 어떻게 공부할지, 어떻게 살아가야 할지에 대한 생각들, 그리고 우리가 매일 쓰는 단어들을 활용한 언어들을 왜 그렇게 사용하는지 등에 대한 생각을 하게 해 주었다. 우리가 일상생활에서 사용하는 언어들이나, 아무 생각 없이 부르는 어떤 대명사들에 대한 기원과 유래는 나 자신의 언어습관을 돌아보고, 좋은 말을 하는 습관과 함께 일상을 바꾸고 인생을 바꿀 수 있는 영양분이 되지 않을까 생각한다. 세상 모든 어떤 곳에서부터 시작되었을지를 질문하고 고민하는 건 결국 모든 것이 공수래공수거임을 깨닫는 기반이 될 것이기에. 저자가 책의 서문에 얼굴, 말의 습관으로 글의 포문을 열어 좋은 언어의 습관과 언어 공부에 대한 마음가짐을 다 잡아주는 부분이 참 좋았다. 무분별하게 유행어를 따라 사용하다가 나쁜 언어 습관이 있음을 깨닫고 개선하고 있는 나로서는 더욱 크게 와닿았던 부분이었다. 이후의 책의 여러 작은 이야기들을 읽으며 전체 이야기가 흔들리지 않게 잘 잡아주는 역할을 한거 같다. 사실 이 책을 펼치면서 제일 먼저 눈을 잡아끌었던 건 다름 아닌 저자의 이름 앞 수식어였다. “민속연구가 박호순”. “내게 ‘민속연구가’라는 게 느닷없이 왜 눈길을 사로잡았을까?” 생각해봤다. 그렇게 생각이 길어지다가 “나는 나 자신을 표현할 어떤 문구가 있을까?” 하고 잠시 고민이 들더라. 그러다가 “지금부터 쌓아가면 되지 뭐” 하고 그냥 털어버렸다. 10년 뒤 내가 나 자신의 이름 앞에 붙일 수 있는 수식어는 ‘소프트웨어 품질 연구가’ 혹은 ‘소프트웨어 관련 블로그 작가’ 정도면 좋지 않을까 싶었다. 대부분 이름 앞에 붙는 수식어라는데 ‘대표’, ‘이사’, ‘부장’ 같은 직급의 정체성을 표시하는 것이기에 누군가의 이름 앞에 붙은 수식어란 건 ‘난 이거에 관심이 있어요.’라는 의미도 있겠지만, ‘이걸로 생산적 활동을 하고 있어요.’라는 의미도 되기에 남이 정해주지 않은, 나 자신의 호칭은 쉽게 결정하기 어려운 거 같다. 내 직업이 ‘요새 핫한’ 컴퓨터장이이다 보니 평소에 자기계발 서적이나 전공 서적만 들이 파게 되는 게 일반적인데, 오랜만에 여러 생각을 하게 해 주는 고마운 책이었다. 아름다운 우리 말에 대한 재미있는 이야기를 듣고 싶은 어른들에게 이 책을 추천한다.","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"배움/독서","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/"}],"tags":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"독서","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%EC%84%9C/"},{"name":"독후감","slug":"독후감","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"},{"name":"책과 내 생각","slug":"책과-내-생각","permalink":"https://xeppetto.github.io/tags/%EC%B1%85%EA%B3%BC-%EB%82%B4-%EC%83%9D%EA%B0%81/"},{"name":"국내도서","slug":"국내도서","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EB%82%B4%EB%8F%84%EC%84%9C/"},{"name":"국어를 즐겁게","slug":"국어를-즐겁게","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EC%96%B4%EB%A5%BC-%EC%A6%90%EA%B2%81%EA%B2%8C/"}]},{"title":"[책과 생각] 국어를 즐겁게","slug":"배움/독서/국어를-즐겁게","date":"2021-04-29T10:25:00.000Z","updated":"2021-04-29T10:25:00.000Z","comments":true,"path":"배움/독서/국어를-즐겁게/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/%EA%B5%AD%EC%96%B4%EB%A5%BC-%EC%A6%90%EA%B2%81%EA%B2%8C/","excerpt":"","text":"어른들을 위한 국어책, 국어를 즐겁게이 책은 내 입장에서 보기엔 한 마디로 「어른을 위한 국어책」이라 생각했다. 아이들에게 이 책의 이야기를 해 주면 아마 “자기만 재미있어하는 이상한 이야기를 하는 어른” 정도로 취급받지 않을까 생각이 든다. 왜냐하면 아이들에게는 ‘말에 담긴 의미’를 유추하는 재미를 찾기보다 ‘의미 전달하는 도구로서의 말’에 더 집중하는 시기일 거 같아서 그렇다. 그러니 재미있는 단축어들도 많이 만들어내고. 하지만 대부분의 사람들이 어른이 되어가며 「말」을 이용해서 의사소통하며 의도를 전달하려 애쓰게 된다. 모든 사람들은 내 의도와 다르게 남에게 의미가 전달될 때도 있고, 그로 인해 오해하기도 혹은 본의와 다르게 받아들이는 사람이 내 말을 선의로 받아들이는 경험을 한다. 그러면서 ‘내가 과연 한국말을 하고 있지만, 정말 한국말을 「잘」하고 있는 게 맞는 걸까?’ 하는 의문이 들게 되고, 그런 의문을 가진 어른들은 스스로 글쓰기, 말하기 같은 여러 표현 방법으로서의 국어에서부터 본인의 ‘자아정체성’을 찾아가는 언어로 공부가 확장되는 게 아닐까 싶다. 이 책이 나에겐 그랬다. ‘아니 이렇게나 많은 재미있는 언어의 어원과 유래에 대한 이야기라니…’ 저자가 너무 쉽고 재밌게 이야기들을 풀어 주셔서 마치 선생님이 수업 시간에 진도 안 나가고 해 주시는 삼천포로 빠져버린… 그렇게 실제 수업 진도보다 재미있는 옛 이야기들을 듣는 기분이었다. 「국어를 즐겁게」는 어느 누군가에게는 쉽게 읽힐 소재들이 들어 있는 책일 수도 있겠다. 내겐 꽤 여러 생각이 들게 하는 책이었다. 국어를 어떻게 공부할지, 어떻게 살아가야 할지에 대한 생각들, 그리고 우리가 매일 쓰는 단어들을 활용한 언어들을 왜 그렇게 사용하는지 등에 대한 생각을 하게 해 주었다. 우리가 일상생활에서 사용하는 언어들이나, 아무 생각 없이 부르는 어떤 대명사들에 대한 기원과 유래는 나 자신의 언어습관을 돌아보고, 좋은 말을 하는 습관과 함께 일상을 바꾸고 인생을 바꿀 수 있는 영양분이 되지 않을까 생각한다. 세상 모든 어떤 곳에서부터 시작되었을지를 질문하고 고민하는 건 결국 모든 것이 공수래공수거임을 깨닫는 기반이 될 것이기에. 저자가 책의 서문에 얼굴, 말의 습관으로 글의 포문을 열어 좋은 언어의 습관과 언어 공부에 대한 마음가짐을 다 잡아주는 부분이 참 좋았다. 무분별하게 유행어를 따라 사용하다가 나쁜 언어 습관이 있음을 깨닫고 개선하고 있는 나로서는 더욱 크게 와닿았던 부분이었다. 이후의 책의 여러 작은 이야기들을 읽으며 전체 이야기가 흔들리지 않게 잘 잡아주는 역할을 한거 같다. 사실 이 책을 펼치면서 제일 먼저 눈을 잡아끌었던 건 다름 아닌 저자의 이름 앞 수식어였다. “민속연구가 박호순”. “내게 ‘민속연구가’라는 게 느닷없이 왜 눈길을 사로잡았을까?” 생각해봤다. 그렇게 생각이 길어지다가 “나는 나 자신을 표현할 어떤 문구가 있을까?” 하고 잠시 고민이 들더라. 그러다가 “지금부터 쌓아가면 되지 뭐” 하고 그냥 털어버렸다. 10년 뒤 내가 나 자신의 이름 앞에 붙일 수 있는 수식어는 ‘소프트웨어 품질 연구가’ 혹은 ‘소프트웨어 관련 블로그 작가’ 정도면 좋지 않을까 싶었다. 대부분 이름 앞에 붙는 수식어라는데 ‘대표’, ‘이사’, ‘부장’ 같은 직급의 정체성을 표시하는 것이기에 누군가의 이름 앞에 붙은 수식어란 건 ‘난 이거에 관심이 있어요.’라는 의미도 있겠지만, ‘이걸로 생산적 활동을 하고 있어요.’라는 의미도 되기에 남이 정해주지 않은, 나 자신의 호칭은 쉽게 결정하기 어려운 거 같다. 내 직업이 ‘요새 핫한’ 컴퓨터장이이다 보니 평소에 자기계발 서적이나 전공 서적만 들이 파게 되는 게 일반적인데, 오랜만에 여러 생각을 하게 해 주는 고마운 책이었다. 아름다운 우리 말에 대한 재미있는 이야기를 듣고 싶은 어른들에게 이 책을 추천한다. ※ 알림 : 이 포스팅은 링크프라이스의 제휴마케팅이 포함된 광고로 일정 커미션을 지급 받을 수 있습니다. 1~2%의 커미션이지만 혹시라도 어느 정도 금액이 모인다면 필요한 곳에 기부할 예정입니다.","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"배움/독서","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/"}],"tags":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"독서","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%EC%84%9C/"},{"name":"독후감","slug":"독후감","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"},{"name":"책과 내 생각","slug":"책과-내-생각","permalink":"https://xeppetto.github.io/tags/%EC%B1%85%EA%B3%BC-%EB%82%B4-%EC%83%9D%EA%B0%81/"},{"name":"국내도서","slug":"국내도서","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EB%82%B4%EB%8F%84%EC%84%9C/"},{"name":"국어를 즐겁게","slug":"국어를-즐겁게","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EC%96%B4%EB%A5%BC-%EC%A6%90%EA%B2%81%EA%B2%8C/"}]},{"title":"[Docker] Docker System Update하기","slug":"소프트웨어/WSL-and-Docker/10-Docker-System-Update","date":"2021-04-27T07:27:00.000Z","updated":"2021-04-27T07:27:00.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/10-Docker-System-Update/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/10-Docker-System-Update/","excerpt":"","text":"기본 Ubuntu 이미지에 필요한 기본 패키지 설치Docker에서 Ubuntu 이미지를 불러와서 사용하려 하면 버릇처럼 사용하던 sudo와 vi&#x2F;vim editor가 작동하지 않아 당황스러울 수 있다. 게다가 Docker에서 이미지를 데려올 때 –lastest 옵션을 줘도 가끔 update되는 경우가 있으므로, 필자는 이를 한 번에 해결하는 방법으로 버릇처럼 시스템 업데이트를 하곤 한다. 막상 sudo와 vim을 설치하기 위해 apt install sudo를 입력해도 작동하지 않을 텐데, 이는 apt update를 해주지 않아서 나타나는 현상이다. 그러므로 apt update를 최신 상태로 만들어 주어야 하는데, 기왕 하는 김에 upgrade와 dist-upgrade까지 진행하자. Docker Hub 에서 Fresh한 Ubuntu 공식 이미지를 데려온다. 1docker pull ubuntu Ubuntu 이미지로 컨테이너를 생성하는 작업은 본 글과 관련이 없으므로 생략하겠다. Docker Image를 이용하여 컨테이너 생성 시 쉘이 나타나면 아래와 같이 입력하여 시스템을 최신 상태로 업데이트해준다. 1apt update &amp;&amp; apt upgrade &amp;&amp; apt dist-upgrade apt update가 완료된 시점부터는 sudo와 vim을 설치할 수 있다. 아래를 실행하여 두 패키지를 설치한다. 1apt install sudo vim 이제 Docker의 바다에서 막 잡아온 싱싱한 Image로 만든 컨테이너에서 sudo와 vi&#x2F;vim을 사용할 수 있게 되었다. apt와 apt-get의 차이APT는 Advancecd Package Tool의 줄임말이다. 리눅스 패키지를 관리하는 도구를 활용할 수 있는 명령이다. Ubuntu 관련 문서들을 보면 어떤 경우는 apt를 사용하라고 하고, 어떤 경우는 apt-get을 사용하라고 하는데, 사실 둘 중 어느 것을 사용해도 큰 차이는 없다. apt는 apt-get의 기능이 복잡해 지면서 지나치게 많은 옵션들이 생겨났다보니 가장 널리 사용되는 기능 중 일부만 빼내어 만들었다. 자주 사용하지 않거나 모호한 기능들은 제외되어 있다. 그래서 어떤 경우는 apt만으로 작동하지 않아 apt-get을 사용해야 하는 경우가 있으나, 일반적인 경우는 apt만으로 충분하다고 생각하면 된다. (apt-get이 더 많은 기능을 제공한다.) apt는 apt.conf.d에서 세부 내용을 관리할 수 있다. apt-get이나 apt-cache보다 늦게 나온 sub-set인 apt에는 apt만이 가지고 있는 기능도 있다. apt로 패키지를 설치&#x2F;제거 시 진행률을 시각적으로 보여주며, 특정 패키지 설치 후 해당 패키지와 관련 있는 패키지 중 업데이트가 필요한 내역을 보여준다. 그러므로 일반 사용자들은 apt-get보다는 apt를 사용하는게 더 낫다. apt update, upgrade, dist-upgrade필자는 위에서 apt update &amp;&amp; apt upgrade &amp;&amp; apt dist-upgrade를 하라고 3개의 명령을 합쳐 제공했다. 이 명령들은 아래와 같이 다르다. 명령 설명 apt update 업데이트할 패키지들을 확인하고 최신 버전이 무엇인지 정보를 갱신한다. 실제 업그레이드를 하지는 않는다. apt upgrade update로 확인&#x2F;갱신한 최신 버전 정보를 기반으로 서버에 올라와 있는 패키지 정보들을 확인하여 최신 버전으로 업데이트 한다. (버전 업그레이드) apt dist-upgrade 의존성 검사를 진행하면서 패키지 내의 변경이 있다면 (upgrade 시 수행하지 못한) 의존성 패키지의 설치&#x2F;제거를 수행한다. 패키지 간 의존성의 문제로 작동하지 않는 부분을 예방할 수 있다. 일반 사용자들은 사실 upgrade를 빼고, 대신 dist-upgrade만 사용해도 된다. 그냥 upgrade만 사용하면 설치된 패키지의 ‘버전만’ 업그레이드하며 의존성 관련 해서는 무시한다. dist-upgrade를 사용하면 특정 패키지의 의존성을 검사하여 필요한 의존성 패키지들을 ‘설치&#x2F;제거; 하기 때문에 여러 종류의 의존성 패키지들의 버전이 다양하게 사용될 때 강제로 의존성을 변경시켜버릴 수 있다. 그 때문에 시스템을 복잡하게 사용하는 경우에는 사용을 지양하는게 좋다. 참고 자료 https://itsfoss.com/apt-vs-apt-get-difference/ https://en.wikipedia.org/wiki/APT_(software) https://askubuntu.com/questions/445384/what-is-the-difference-between-apt-and-apt-get https://ksbgenius.github.io/linux/2021/01/13/apt-apt-get-difference.html https://www.techrepublic.com/article/how-to-tell-the-difference-between-apt-get-upgrade-apt-get-dist-upgrade-and-do-release-upgrade/ https://askubuntu.com/questions/194651/why-use-apt-get-upgrade-instead-of-apt-get-dist-upgrade https://blog.naver.com/roboholic84/221024297783","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"Update","slug":"Update","permalink":"https://xeppetto.github.io/tags/Update/"},{"name":"Apt","slug":"Apt","permalink":"https://xeppetto.github.io/tags/Apt/"},{"name":"Install","slug":"Install","permalink":"https://xeppetto.github.io/tags/Install/"},{"name":"Upgrade","slug":"Upgrade","permalink":"https://xeppetto.github.io/tags/Upgrade/"}]},{"title":"인생의 취미들","slug":"Xeppetto/About-Me-and-My-thought/20210426-about-me_My-hobbies","date":"2021-04-26T13:22:22.000Z","updated":"2021-06-21T04:13:13.000Z","comments":false,"path":"Xeppetto/About-Me-and-My-thought/20210426-about-me_My-hobbies/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20210426-about-me_My-hobbies/","excerpt":"","text":"취미 친구를 구함필자의 다른 글인 “나의 배움”에서 언급한 바와 같이, 필자의 취미 생활은 그냥 필자의 배움의 확장일 뿐이다. 그중에 좋아라 하는 일은 ‘술과 수다’이니, 필자와 함께 이야기는 나누고 싶은 분들은 친구가 되어 필자에게 배움을 베풀어 주시기를 바라고, 또 바란다. 취미어릴 때는 “넌 취미가 뭐니?” 하면 그냥 남 듣기 좋은 소리를 했었더랬다. “독서요, 등산이요.” 그랬었는데, 살다보니 하면「진짜 행복하고 좋은 일」이라는 것들이 생겨서 반복적으로 하게 되더라. 필자에게 행복한 일들을 모아 놓으면 아래와 같다. 취미 괜한 TMI 배움 무언가 재미있는 것들에 흥미를 가지고 배우는 걸 선호합니다. 업무 중에도 늘 배우고 있습니다. 와인&#x2F;샴페인 최근 와인에 입문해서 이런 저런 비싼 와인과 샴페인을 먹어보고 있습니다. 운동 걷기&#x2F;뛰기&#x2F;자전거 타기&#x2F;산 오르기 등 자연을 즐길 수 있는 운동을 좋아합니다. (공놀이는 못합니다.) 인생 공부 ‘어떻게 하면 즐겁게 살 수 있는가’ 같은 개똥철학 삶에 대한 사유를 멈추지 않습니다. 새로운 분야 배우기 인공지능, 경영, 프로젝트 관리, 코딩 등 여러 분야를 공부하는게 취미입니다. 공부해서 남주기 프로젝트 블로그 + 이 블로그가 증거겠네요. 블로그나 발표 같은 걸로 나눠주는걸 좋아라 합니다. 글쓰기와 정리하기 전생에 사관(史官)이었는지, 아님 조상 중에 그런 이가 있는지 끊임 없이 계속 정리합니다. 취미 코딩 업무이자 취미로 코딩 합니다. 이 블로그와 개인 블로그 등도 취미 생활로 만들었습니다. 사업 구상 ‘재밋겠다’ 싶은 사업이나 프로젝트를 끊임 없이 구상하고 시도해 봅니다. 이 블로그도 그랬습니다. 독서 책 읽는 것도 좋아하지만, 사 놓고 안 읽는 책들이 많은걸 보니 진짜 취미는 ‘도서 구입’인듯 합니다. 컴퓨터 게임 푹 빠져서 하지는 않고, 적당히 즐기고 있습니다. 술과 수다 좋아하는 사람들과 술 마시며 수다 떨기를 참 좋아합니다. 이 취미들은 조만간 필자 블로그의 메뉴로 변경하려 여러가지 글들을 써볼 예정이다. 필자는 배움을 취미로 삼고, 취미를 배우며 삶을 영위하는게 즐겁기 때문에. 이 페이지는 누군가에게 답변을 받고 싶어 쓴 글이 아니므로 댓글을 남기실 수 없도록 조정했습니다. 함께 이야기를 나누고 싶으시면 제 Social Media로 오셔서 친구 추가 해 주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"Learning","slug":"Learning","permalink":"https://xeppetto.github.io/tags/Learning/"},{"name":"학습","slug":"학습","permalink":"https://xeppetto.github.io/tags/%ED%95%99%EC%8A%B5/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"취미","slug":"취미","permalink":"https://xeppetto.github.io/tags/%EC%B7%A8%EB%AF%B8/"},{"name":"인간답게 살기","slug":"인간답게-살기","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EA%B0%84%EB%8B%B5%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"}]},{"title":"[Docker] Docker에 SQLServer 설치하기","slug":"소프트웨어/WSL-and-Docker/14-Docker-SQLServer","date":"2021-04-26T08:17:30.000Z","updated":"2021-06-07T12:45:00.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/14-Docker-SQLServer/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/14-Docker-SQLServer/","excerpt":"","text":"목차 SQLServer란? SQLServer를 Docker에 설치하기 SQLServer 기본 테이블 생성하기 Microsoft SQLServer Management Studio로 접속하기 SQLServer란?SQLServer는 Microsoft에서 제작하여 제공하는 상용 데이터베이스이다. SQLServer와 관련된 모든 정보는 Microsoft의 SQLServer 공식 웹사이트에서 얻을 수 있다. 시간이 지나면 버전이 변경되었을 수 있으니 최신 버전의 문서를 보시면 된다. SQLServer를 Docker에 설치하기SQLServer를 WSL2-Docker에 연동하는 과정은 Microsoft SQLServer - Docker 설치 공식 매뉴얼 페이지에 나와 있으며, 해당 페이지의 내용을 그대로 따라가면 된다. 해당 페이지는 SQLServer on Linux의 내용을 다룬다. 이번 페이지에서는 위 문서를 활용하여 Docker에 설치하는 방법을 설명하려 한다. 먼저 Microsoft SQLServer - Docker 설치 공식 매뉴얼 페이지로 이동한다. 페이지 상단에 아래와 같은 선택지가 나타난다. Shell 선택기를 바꾸면 페이지 내의 예제 구문들이 변경된다. 필자는 WSL2에 설치하는 방법을 설명하려 하므로 PowerShell을 선택한다. Shell 선택기 아래에 보면 여러가지 고지사항들이 있다. 지금은 관심이 없더라도 한 번은 알아야 하는 내용들이니 무슨 내용인지 대충 읽어보시기를 권장한다. Microsoft SQLServer - Docker 설치 공식 매뉴얼 페이지에는 아래와 같이 ‘설명 - 커맨드’의 형식으로 되어 있다. 사용자들이 할 일은 「복사」 버튼을 눌러 클립보드에 명령줄을 복사한 후 PowerShell에 붙여 넣는 방식으로 진행하면 된다. 설치와 관련된 명령은 시간이 지나 버전이 변경되면 업데이트 될 수 있으니, 공식 사이트를 참고하여 복사하자. (본 페이지에서 제공하지 않는다.) 이미지를 데려온 결과는 아래와 같다. 다음은 데려온 이미지를 컨테이너로 변경해야 한다. 공식 사이트에는 명령줄을 여러 줄로 나누어 쓰는 방법으로 안내하고 있으나, 이를 복사하여 Powershell에 붙여 넣으면 여러 줄을 이어주는 특수 Escape인 &#96;(back-tik)가 작동하지 않는다. 아래의 내용을 참고하되, 시간이 지나 버전이 변경될 수 있으므로 공식 사이트의 내용을 반드시 확인 후 진행하시기 바란다. 1docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=&lt;YourStrong@Passw0rd&gt;&quot; -p 1433:1433 --name sqlserver01 -h sqlserver01 -d mcr.microsoft.com/mssql/server:2019-latest 생성한 컨테이너를 확인한다. 1docker ps -a SQLServer의 컨테이너 내로 진입한다. 1docker exec -it sqlserver01 &quot;bash&quot; SQLServer 컨테이너에서 sqlcmd를 실행시키는 구문은 아래와 같다. 1/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P &quot;&lt;YourNewStrong@Passw0rd&gt;&quot; 위 7번과 8번을 실행한 결과는 아래와 같다. SQLServer 기본 테이블 생성하기Microsoft SQLServer - Docker 설치 공식 매뉴얼 페이지에서는 기본 DB 생성 및 테이블 생성하여 조회하는 쿼리까지 제공하고 있다. 공식 사이트의 내용을 참고하여 새로운 TestDB를 생성하고, Test Table 생성 및 데이터 입력, 그리고 조회까지 진행해 보자. 단순히 공식 사이트에서 제공하는 명령줄을 「복사 - 붙여넣기」하면 된다. 결과는 아래와 같다. Microsoft SQLServer Management Studio로 접속하기다음은 Microsoft의 SQLServer GUI 도구를 설치한다. 이 도구는 SSMS라고 불리우며, SQL Server Management Studio의 약자이다. SSMS는 Microsoft 공식 홈페이지인 SQL Server Management Studio에서 다운로드할 수 있다. SSMS를 다운로드 하자. 다운로드한 파일을 실행하여 설치를 진행하면 된다. 설치는 일반적인 내용이므로 그냥 ‘다음’을 클릭하면서 진행하면 된다. 설치가 완료되면 윈도우 시작 메뉴에 나타나는 SSMS를 실행한다. 아래와 같은 로그인 화면이 나타나면 정보를 입력하여 로그인한다. (1) 서버 주소 : localhost 혹은 127.0.0.1 (2) ID : sa (3) PW : &lt;YourStrong@Passw0rd&gt; 정상적으로 SSMS에 진입했으면 이제 GUI 도구에서 아까 생성한 데이터 테이블을 조회해 볼 수 있다. 본 페이지에서는 SSMS의 세부 기능들에 대한 설명은 하지 않는다. 해당 내용은 SSMS 공식 페이지에서 확인 및 학습할 수 있다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"Database","slug":"Database","permalink":"https://xeppetto.github.io/tags/Database/"},{"name":"SQLServer","slug":"SQLServer","permalink":"https://xeppetto.github.io/tags/SQLServer/"}]},{"title":"나의 배움","slug":"Xeppetto/About-Me-and-My-thought/20210425-about-me_Learning-is-my-life","date":"2021-04-25T13:35:00.000Z","updated":"2021-05-23T14:23:23.000Z","comments":false,"path":"Xeppetto/About-Me-and-My-thought/20210425-about-me_Learning-is-my-life/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20210425-about-me_Learning-is-my-life/","excerpt":"","text":"이번 포스팅은 “배움” 카테고리를 런칭하며 떠오른 감상을 기록했습니다. 나의 배움배움에 대한 글들을 써 내려가다가 문득 그 모든 글들에 공통되게 어필해야 하는 점이 있다고 느껴져서 글을 정리해야겠다고 생각했다. 이 글을 써 내려가다보니 막상 필자의 개똥(개인적인 똥통) 철학 이야기라 ‘배움’ 카테고리에 남겨 놓기도 적절치 않았다. 그래서 필자 소개 쪽으로 카테고리를 변경했다. 이번 페이지에서는 너무나도 개인적이고 쓸데 없는 이야기를 해볼까 한다. 공부가 취미“공부가 취미입니다.” 이런 이야기를 하고나면 놀라는 사람, 놀리는 사람, 신기해 하는 사람, 안 믿는 사람 등 여러 종류의 반응을 보곤한다. 가끔은 어이 없다는 듯, 누군가의 새어나온 웃음이 귀에 들리기도 한다. 뭐, 남들이야 어떻게 반응하던 상관 없다. 필자는 공부가 취미다. 어느 정도 나이가 들고나서부터 계속 공부가 취미였다. 다른 취미가 없어서 그런 건 아니다. 취미 자체를 공부로 한다. 필자의 취미에 대해서는 인생의 취미들에 따로 적어두었다. ‘나의 공부함’을 재정의함알상적으로 공부라는 건 지루하고 하기 싫은 일이 되어야 정상인데 필자에게는 그렇지 않다. 「’공부’라는 행위에 대한 정의」를 스스로 다시 내렸기 때문이다. 정확히는 이미 다른 훌륭한 분들이 정의해 두었는데 이제서야 깨달은 거다. ‘공부함’을 재정의하기 전까지는 필자도 공부를 정말 하기 싫었다. 공부라는 건 누군가 내 지적 능력과 노력을 평가하기 위해 강요하는 수단으로써 어릴적부터 늘 ‘어쩔 수 없이’ 해야 하는 행위였고, 그런 기분들이 나 스스로를 ‘공부하기 싫어하는 사람’으로 만들어온 거 같다. 20대의 어느 무료한 저녁에 필자는 ‘왜 인간은 공부라는 걸 하고 평가를 받는가’에 대해 곰곰히 생각해봤다. 딱히 이런 것에 대한 기록은 존재하지 않기에 상상력만으로 제법 그럴듯한 유추를 해보았다. 아마도 시작은 먼 옛날 지식 체계를 요약하고 다음 세대로 전달하는 과정에서 다음 세대의 아이가 얼마나 빨리, 그리고 훌륭한 수준으로 생존에 필요한 지식을 습득했는 지를 ‘가르치는 사람 입장에서 평가’하기 위해 시작되지 않았을까싶다. 더 효율적으로 지식을 전달하기 위한 방법과 더 효율적으로 평가하기 위한 방법이 동시에 발전했을 거고, 현명한 누군가가 만든 방법들이 덜 현명하거나 관심이 적은 사람들에게 전달되는 과정에서 그 ‘공부’라는 것은 지루하고 강제적인 평가 수단이 되었지 싶다. 필자는 원론적으로 돌아가 고민하고 싶었다. 다른 행성에서는 어떤 지 모르겠으나, 지구에서 발현한 움직이는 단백질들은 자신의 개체를 복제하여 널리 퍼뜨리려는 습성이 가장 기본적인 작용이며, 이런 작용이 되물림되어 유전체 내에 지식으로 전달된다. 전달된 내용은 각 개체의 습성으로 나타나고, 또 발전&#x2F;퇴보 하더나 돌연변이가 되어 각 유기체의 유전정보 안에 프로그래밍 되어 다음 세대로 전달된다. 이런 유전 정보들은 대부분 생존에 반드시 필요한 필수 정보들을 위주로 한다. 그런데 인간으로 진화한 생명체는 자신의 생존 본능을 넘어선 효율성을 지식 체계로 전달하기 시작했다. 언어와 문자를 이용한 지식의 전달은 다른 생물은 따라 올 수 없을 만큼 고등한 지식 체계를 널리 전파하는데 사용되었다. 그러니, 공부라는 건 결국 ‘생존하기 위한 수준을 효율적으로 개선한 지식 체계’ 정도로 표현하면 가장 원론적인 표현이 아닐까 싶었다. 몇 주에 걸친 이런 종류의 상상력을 발휘하고 나서 이제 본격적으로 ‘필자에게 필요한 공부’에 대해 고민했다. 공부가 결국 생존하기 위한 도구라면 ‘생존함’에 대해 고민해야 했다. 인간으로 이 시간 안에 존재하면서 생존함의 이유를 찾으려면 수 많은 과거 사상적 천재들의 철학들을 데려와 이야기해야 옳겠다. 인간이 왜 인간인가?에 대한 대답은 우리가 우주로 나아가 우리와 닮은 초기 진화-생명체를 찾기 전까지는 연구할 수 없겠지만, 예전 훌륭한 생각의 정리자들 덕에 한 가지 힌트는 얻을 수 있었다. 바로 그 결론은 ‘인간답게 존재하기, 인간으로 살아가기’가 아닐까 싶다. 종교의 성인들 혹은 동서양의 철학자들 모두 그런 이야기들을 했다고 지금까지 전해지기 때문에 그렇게 생각하면 얼추 맞지 않을까 싶다. ‘성인’과 ‘철학자’들은 ‘너 별로 인간 아니다, 먼저 인간이 되라.’ 그런게 공부였다. 그래서 필자는 ‘제대로된 인간이 되기 위해, 제대로된 사람으로 살기 위해 공부하고 정리’ 함을 인생의 화두로 삼았다. 그리고 이에 익숙해지기 위해 평가받지 않겠다는 태도로 지식을 탐구했다. 잘 할 수 있으면 좋고, 아니면 그도 그렇게 두어도 된다. 평가 받을 일이 아니기 때문이다. (물론 업무 관련된 내용은 끊임 없이 평가 받는 다는 걸 알아서 평가 받을 수 있도록 노력했다.) 그냥 ‘호기심’에서부터 시작되는 순수한 지적인 탐구. 평가 받지 않는 공부는 인생의 여러가지를 받아들일 수 있는 열린 사고를 가질 수 있게 해주었다. 공부가 점점 더 재밋어졌다. 그제서야 확실히 알았다. 어릴때부터도 호기심은 꽤 많은 편이었지만, 평가 받는 걸 싫어해서 공부가 하기 싫었던 거다. 이런 긴 고민을 마치고 나니 나만 평가 받기 싫어하는게 아니고 누구나 그런게 아닐까 생각한다. 남에게 제품이나 서비스를 제공하고 돈 버는 일이 아니라면 평가 받을 필요가 없는 것이고, 누군가 돈을 내고 어떤 가치를 구매하는 상황이 아니라면 누군가를 평가하는 행위 자체가 불필요함을 깨달았다. 아니, 정확히는 불필요하게 남을 쉽게 평가하는게 굉장한 폭력이란걸 깨달았다고 하는게 더 맞는 표현이겠다. (이에 대한 이야기를 풀어 내면 또 한 바닥이므로 다음 기회에…) 공부를 하지 않으면 자신이 무엇을 모르는 지 모르게된다. 필자는 이런 상태를 ‘무지에 대한 무지’라 표현한다. 그리고 공부를 하다보면 자신이 무엇을 모르는 지를 어렴풋이 깨닫기 시작한다. 자신이 모르는 것들을 부정하거나, 자신이 안다고 생각하는 것들을 정리하다보면 어느 새인가 자신이 아는 범위와 모르는 범위가 조금씩 명확해진다. 그 과정에서 자기 스스로 평가를 하는 경우도 있지만, 타인에 의한 평가에 영향을 받는 경우가 더 많다. 어쨌든 필자 입장에서는 타인에 의한 평가는 왠지 싫다. 그래서 스스로 평가하되, 남에게 평가 받지 않는 공부를 하려고 애써왔다. 필자는 제대로된 사람이 되기 위한 공부를 하는 것이지, 평가 받는 공부를 하는 것이 아니라고 믿으며… 그래서 왜 배움을 하는 것인가?2018년 초 즈음… 어느 순간 “근데 나 왜 이렇게 공부하는거지?”라는 물음표가 필자의 생각을 스쳐갔다. 그냥 하다보니까 계속 하게 된건데 어느 순간 그걸 왜 했는지 기억이 안나는거다. 그래서 놀기 시작했다. 늘 공부하던 사람이 놀기 시작하려니 노는 것도 잘 안되더라. 약 2주간 실패를 거듭했다. TV를 켜고도 TV에 나오는 내용들을 스마트폰에서 찾아 공부하고 있는 자신을 발견하고선, 퇴근과 함께 전화기를 방에 두고 TV를 보거나 나가서 운동을 하며 정보, 책, 검색과 차단된 삶을 살아 보려 했다. 그렇게 3주 정도 지나니 정말 즐거운 마음으로 놀 수 있게 되는거 같더라. 그렇게 1년 정도를 놀다가 보니 몸이 아프기 시작했다. 그 동안 아팠는데 못 느끼고 있었던 것일까? 아니면 너무 격하게 놀아제꼈나? 이런 저런 고민들을 해보고, 또 이런 저런 방편들을 모두 시도해봤으나 계속 아팠다. 필자의 결론은 “사람이 생긴대로 살아야 하는데, 생긴대로 안 살아서 아픈 것”이라고 결론을 내리고 다시 공부를 하며 살아야 겠다 싶었다. 근데 이게… 또 한 참 놀다가 다시 공부를 시작하려니 잘 되지 않았다. 노력을 해도 딴 짓하는게 너무 또 버릇이 되어 버렸다. 처음에 놀기 시작할 때도 잘 안되더니, 이제 또 공부하려니 잘 되지 않았다. 그렇게 1년을 “해야지, 해야지”만 다짐하면서 시간을 보냈다. 작심삼일을 몇 번, 책을 읽다 멈추다를 몇 번, 그렇게 여러 시도들을 실패했다. 그 2년여 되는 시간 동안 만나야만 하는 사람들도 너무 많아졌고, 스스로 무언가를 쌓아 올리기 보다 남이 쌓아 올리는거에 평가질이나 띡띡 해 대는, 남들에게서 배운 행동들이 훨씬 쉽고 편안했기 때문이다. 그리고 나서 문득 한국의 교육헌장 내용이 새삼스레 다가왔다. 홍익인간(弘益人間)의 정신, 널리 사람을 이롭게 하라. 그래, 필자가 공부를 취미 생활로 가졌던 이유 중 하나는 필자가 이 업을 시작할 때 그 누구도 “QA란 무엇인가? Testing이란 무엇인가?”에 대해 알려주지 않았기 때문이다. 당시에는 인터넷에 지금처럼 수 많은 자료들이 올라와 있지도 않았다. 그렇게 외국에서 책을 조달하고 스터디를 하는 과정에서 QA와 Tester들을 위한 커뮤니티도 설립하고 운영했다. 그 모든게 널리 사람을 이롭게 하라는 정신을 받들어 배움을 행하는 과정이었다. 필자는 공부가 취미인게 맞다. 필자는 공부하고 나서 아주 작은 지식이라도 사람들과 함께 나누는 걸 즐겨했다. 하지만 그렇게 공부한 내용을 스터디 그룹이나 발표할 기회를 잡아 나누는 수준이었지, 지금까지는 평가 받는 걸 싫어해서 딱히 어딘가에 사람들이 보도록 글을 남기거나 필자가 아는 것들을 증명하려 하지 않았다. 그랬더니 ‘지금 내가 무엇을 알고, 무엇을 모르는 지’를 모르는 이상한 상태가 되었다. 그래서 블로그에 필자가 무엇을 알고, 어디까지 알고 있는 지를 정리하기 시작했다. 글을 쓰면서 생각한다. 어쩌면 지금 필자가 블로그에 공부한 이 내용들을 써 내려가는 것이 누군가에게는 필자를 평가하는 도구, 잣대로 쓰일 지도 모를 일이다. 누군가의 블로그에 와서 긴 시간 공들여 쓴 글을 읽으며 남을 평가하기 좋아하는 사람도 있을거라, 그런 이들에게 부탁컨데… 필자를 평가했으면 표현하지 마시고 그냥 본인의 마음 속에 잘 간직하시길 바란다. 칭찬이라면 듣기 좋겠지만, 아직 덜 자란 마음은 그런 표현에 반응 하느라 조금씩 게을러 질거고, 악평이라면 별로 궁금하지 않기 때문이다. 그냥 좋은 평가를 했다면 필자와 술이나 한 잔 하며 인생을 논하자. 필자에게는 이런 공부란 인생을 배우는 과정일 뿐이니. 그런게 필자의 배움이다. 마지막 순간이 올 때까지 열심히 필자의 여러가지 지식들에 대해 정리하고, 다듬어 공부한 내용들을 적어 보려 블로그도 다시 시작했으니, 지금부터는 꾸준히, 천천히, 차분히 진행하면 될 일이다. 이 페이지는 누군가에게 답변을 받고 싶어 쓴 글이 아니므로 댓글을 남기실 수 없도록 조정했습니다. 함께 이야기를 나누고 싶으시면 제 Social Media로 오셔서 친구 추가해 주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"Learning","slug":"Learning","permalink":"https://xeppetto.github.io/tags/Learning/"},{"name":"학습","slug":"학습","permalink":"https://xeppetto.github.io/tags/%ED%95%99%EC%8A%B5/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"인간답게 살기","slug":"인간답게-살기","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EA%B0%84%EB%8B%B5%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"모르는 것","slug":"모르는-것","permalink":"https://xeppetto.github.io/tags/%EB%AA%A8%EB%A5%B4%EB%8A%94-%EA%B2%83/"},{"name":"아는 것","slug":"아는-것","permalink":"https://xeppetto.github.io/tags/%EC%95%84%EB%8A%94-%EA%B2%83/"},{"name":"깨닫는 것","slug":"깨닫는-것","permalink":"https://xeppetto.github.io/tags/%EA%B9%A8%EB%8B%AB%EB%8A%94-%EA%B2%83/"}]},{"title":"[Docker] Docker에 MariaDB 설치하기","slug":"소프트웨어/WSL-and-Docker/13-Docker-MariaDB","date":"2021-04-20T01:10:00.000Z","updated":"2021-05-31T11:20:20.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/13-Docker-MariaDB/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/13-Docker-MariaDB/","excerpt":"","text":"목차 MariaDB란? MariaDB를 Docker에 설치하기 MariaDB에 기본 테이블 생성하기 HeidiSQL로 접속하기 MariaDB란?이번 MariaDB 포스팅은 mySQL 환경 설정 포스팅과 상당히 유사하다. 왜냐하면 이 둘은 자매이기 때문이다. 원래 오픈소스였던 mySQL이 대기업으로 흡수된 후 mySQL을 만든 사람이 다시 만든 DB이기 때문에 그렇다. 이 둘은 동일한 소스코드를 사용하며, 구조도 동일하고, 심지어 사용하는 port도 같다. MariaDB란 무엇인가?는 위키피디아 링크를 참고하시기를 바란다. 본 포스팅에서는 WSL2 - Docker에 설치하는 데에 집중하여 기술하려 한다. MariaDB을 Docker에 설치하기 먼저 hub.docker.com로 이동하여 검색창에 ‘mariadb’를 입력하자. 화면의 내용을 쭉 읽어봐도 좋지만 아래를 입력하여 MariaDB image를 본인의 컴퓨터로 데려오면 된다. 1docker pull mariadb 데려온 docker image를 먼저 확인하여 정상적으로 MariaDB image가 표시되는지 확인한다. 1docker images Container를 생성한다. 1docker run --name mariadb01 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=&quot;&lt;YourStrong@Passw0rd&gt;&quot; -d mariadb 위의 각 항목은 다음과 같다. (1) docker run : docker image에서 container를 생성한다. (2) –name mariadb01 : container의 이름은 mariadb01로 한다. (3) -e : container 내 변수를 설정한다. (4) MYSQL_ROOT_PASSWORD&#x3D;”암호” : ROOT 암호를 설정 따옴표 내의 내용은 암호이다. (5) -d mariadb : mariadb이라는 이미지에서 분리하여 container를 생성한다. (6) -p 3307:3306 : 해당 container의 port forwarding에 대해 inbound는 3307로 하고, outbound는 3306으로 설정한다. 이것은 Docker의 port forwarding 기능이다. 외부에서 접속 시 3307 포트를 사용하여 container에 정보를 전달하면, container는 내부적으로 3306 포트를 사용하여 처리하고 정보를 외부로 보낸다.이렇게 설정하는 이유는 mySQL의 port도 MariaDB와 동일하게 3306 포트를 사용하기 때문이며, 필자는 이 두개를 모두 설정해 두고 테스트하기 때문이다. 동시에 동일한 포트에 신호를 주면 오류가 발생한다. 이를 실행하면 다음과 같이 나타난다. 생성한 컨테이너가 정상적으로 실행 중인 지 확인한다. 1sudo docker ps -a 이제 생성한 Container를 이용하여 MariaDB 서버를 실행해본다. 1sudo docker exec --user=&quot;root&quot; -it mariadb01 bash 다음은 MariaDB Database를 실행시킨다. MariaDB는 mysql 콘솔로 실행한다. 1mysql --user=root --password=&quot;&lt;YourStrong@Passw0rd&gt;&quot; 아래와 같이 mysql 프롬프트가 나타나면 성공적으로 접속한 것이다. MariaDB에 기본 테이블 생성하기아래는 기본적인 MariaDB의 명령어이자, GUI를 사용하기 전에 새로운 Database와 Data Table을 생성하는 과정이다. 명령어도 볼 겸 한 번 따라해 보자. MariaDB Database 접속 후 서버 내 모든 데이터베이스 이름 확인하는 방법 1MariaDB&gt; SHOW DATABASES; DATABASE 생성하기 1MariaDB&gt; CREATE DATABASE 데이터베이스이름; 데이터베이스 사용 1MariaDB&gt; USE 데이터베이스이름; 특정 DB 내 모든 Table 보기 1MariaDB&gt; SHOW TABLES; Data Table을 생성하기 1MariaDB&gt; CREATE TABLE 데이터테이블이름 (데이터명 데이터유형); Data Table에 데이터 입력하기 1MariaDB&gt; INSERT INTO 데이터테이블이름 (데이터명) VALUES(데이터값); Data Table의 데이터 보기 1MariaDB&gt; SELECT * FROM 데이터테이블이름; 결과는 아래와 같다. HeidiSQL로 접속하기HeidiSQL이 MariaDB의 공식 GUI도구는 아니다. 그냥 필자의 Database 환경 설정 포스팅의 구성상 DB 설치 후 GUI 도구를 하나 소개해야 해서 고민하다가 HeidiSQL로 정했다. 국산 도구들은 나중에 따로 떼서 설명할까 싶어서. 앞서 언급한 바와 같이 MariaDB는 mySQL과 동일한 소스코드, 동일한 구조, 동일한 포트를 사용하므로 mySQL 환경 설정 포스팅에서 설명한 Workbench를 사용해서 접속해도 무방하다. 이번에 소개할 HeidiSQL도 GUI 도구이며, 오픈소스이다. 먼저 HeidiSQL 설치를 위해 공식 홈페이지로 이동하자. 다운로드 페이지 상단의 링크를 클릭하여 다운로드하자. HeidiSQL Installer를 실행하면 아래와 같은 화면이 나타난다. 아쉽게도 설치 과정에서는 한글을 지원하지 않는다. 설치 과정은 그냥 무심히 다음, 다음, 종료하면 된다. 우리가 일상적으로 진행하는 설치과정이므로 자세한 설명은 생략한다. HeidiSQL 실행 시 한글 OS에서는 한글로 실행된다. 하단의 ‘신규’ 버튼을 클릭하자. 좌측 패널의 세션 이름을 알기 쉽게 변경한다. 우측 패널의 암호는 우리가 위에서 MariaDB 서버를 만들 때 사용한 암호를 입력하면 된다. (위에서는 &lt;YourStrong@Passw0rd&gt;를 사용했었다.) 포트는 반드시 3307로 설정해야 한다. 주소 : 127.0.0.1 ID : root PW : 위에서 설정한 root 암호 입력 Port : 3307 정상적으로 접속되면 데이터베이스를 선택한 후 데이터테이블을 조회해 보자. 아래와 같이 출력되면 정상이다. HeidiSQL 자세한 사용방법은 본 포스팅과 크게 관련이 없으므로 설명하지 않는다. 자세한 내용은 인터넷을 검색해서 사용하기를 권장한다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"Database","slug":"Database","permalink":"https://xeppetto.github.io/tags/Database/"},{"name":"MariaDB","slug":"MariaDB","permalink":"https://xeppetto.github.io/tags/MariaDB/"}]},{"title":"[Docker] Docker에 mySQL 설치하기","slug":"소프트웨어/WSL-and-Docker/12-Docker-mySQL","date":"2021-04-19T22:07:30.000Z","updated":"2021-05-31T10:19:19.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/12-Docker-mySQL/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/12-Docker-mySQL/","excerpt":"","text":"목차 mySQL이란? mySQL을 Docker에 설치하기 mySQL에 기본 테이블 생성하기 Workbench로 접속하기 mySQL이란?mySQL이란 무엇인가?는 위키피디아 링크와 서버 구축이야기 - mySQL 링크를 참고하시기를 바란다. 본 포스팅에서는 WSL2 - Docker에 설치하는 데에 집중하여 기술하려 한다. 기술하기에 앞서 이번 mySQL 환경 설정 포스팅은 MariaDB 환경 설정 포스팅의 내용과 거의 유사하다. 이 둘은 같은 아버지에게서 나온 자매이기 때문이다. 심지어 사용하는 소스코드, DB명령 구조, 통신 port도 같다. 이 두개의 DB를 동시 사용 시 port를 조정하는 방법은 MariaDB 포스팅을 참고하자. mySQL을 Docker에 설치하기 먼저 hub.docker.com로 이동하여 검색창에 ‘mysql’을 입력하자. 화면의 내용을 쭉 읽어봐도 좋지만 아래를 입력하여 mySQL image를 본인의 컴퓨터로 데려오면 된다. 1docker pull mysql 데려온 docker image를 먼저 확인하여 정상적으로 mysql image가 표시되는지 확인한다. 1docker images Container를 생성한다. 1docker run --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=&quot;&lt;YourStrong@Passw0rd&gt;&quot; -d mysql 위의 각 항목은 다음과 같다. (1) docker run : docker image에서 container를 생성한다. (2) –name mysql01 : container의 이름은 mysql01로 한다. (3) -p 3306:3306 : 해당 container의 port forwarding에 대해 inbound&#x2F;outbound port 모두 3306으로 설정한다. (4) -e : container 내 변수를 설정한다. (5) MYSQL_ROOT_PASSWORD&#x3D;”암호” : ROOT 암호를 설정 따옴표 내의 내용은 암호이다. (6) -d mysql : mysql이라는 이미지에서 분리하여 container를 생성한다. 이를 실행하면 다음과 같이 나타난다. 생성한 컨테이너가 정상적으로 실행 중인 지 확인한다. 1sudo docker ps -a 이제 생성한 Container를 이용하여 mySQL 서버를 실행해본다. 1sudo docker exec --user=&quot;root&quot; -it mysql01 bash 다음은 mySQL Database를 실행시킨다. 1mysql --user=root --password=&quot;&lt;YourStrong@Passw0rd&gt;&quot; 아래와 같이 mysql 콘솔이 나타나면 성공적으로 접속한 것이다. mysql 콘솔에서 빠져나오는 방법은 quit을 입력하자. 1quit mySQL에 기본 테이블 생성하기아래는 기본적인 mySQL의 명령어이자, GUI를 사용하기 전에 새로운 Database와 Data Table을 생성하는 과정이다. 명령어도 볼 겸 한 번 따라해 보자. mysql Database 접속 후 서버 내 모든 데이터베이스 이름 확인하는 방법 1mysql&gt; SHOW DATABASES; DATABASE 생성하기 1mysql&gt; CREATE DATABASE 데이터베이스이름; 데이터베이스 사용 1mysql&gt; USE 데이터베이스이름; 특정 DB 내 모든 Table 보기 1mysql&gt; SHOW TABLES; Data Table을 생성하기 1mysql&gt; CREATE TABLE 데이터테이블이름 (데이터명 데이터유형); Data Table에 데이터 입력하기 1mysql&gt; INSERT INTO 데이터테이블이름 (데이터명) VALUES(데이터값); Data Table의 데이터 보기 1mysql&gt; SELECT * FROM 데이터테이블이름; 결과는 아래와 같다. quit을 입력하여 빠져나오자. 1quit Workbench로 접속하기mySQL을 GUI로 활용하는 도구는 Workbench이다. GUI를 활용하여 조금 더 편리하게 데이터베이스를 사용할 수 있다. 먼저 mySQL Workbench 설치를 위해 공식 홈페이지로 이동하자. 다운로드 페이지에서 내용을 잘 확인 후 다운로드하자. 설치하려고 했더니 Visual C++ 2019 재배포패키지가 없어서 설치할 수 없다는 에러가 나타난다. 일단 확인 &gt; Finish를 눌러 종료한다. 재배포 패키지를 먼저 설치하자. Microsoft 공식 재배포 패키지 페이지로 이동하여 Visual C++ 2019 재배포 패키지를 다운로드 한다. 다운로드 받은 재배포 패키지를 ‘동의함’, ‘설치’를 클릭하여 설치한다. 다시 다운로드한 Workbench를 실행하면 아래와 같은 화면이 나타난다. 설치 과정은 그냥 무심히 다음, 다음, 종료하면 된다. 우리가 일상적으로 진행하는 설치과정이므로 자세한 설명은 생략한다. Workbench를 실행한 후 상단의 Database &gt; Connect to Database를 선택한다. 새 창이 나타나면 Store in Vault를 클릭하여, 암호를 입력한다. 우리가 위에서 mySQL 서버를 만들 때 사용한 암호를 입력하면 된다. (위에서는 &lt;YourStrong@Passw0rd&gt;를 사용했었다.) 주소 : 127.0.0.1 ID : root PW : 위에서 설정한 root 암호 입력 정상적으로 접속되면 데이터베이스를 선택한 후 데이터테이블을 조회해 보자. 아래와 같이 출력되면 정상이다. Workbench 자세한 사용방법은 본 포스팅과 크게 관련이 없으므로 설명하지 않는다. 자세한 내용은 인터넷을 검색해서 사용하기를 권장한다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"Database","slug":"Database","permalink":"https://xeppetto.github.io/tags/Database/"},{"name":"mySQL","slug":"mySQL","permalink":"https://xeppetto.github.io/tags/mySQL/"}]},{"title":"내 블로그에 음악을 넣어보자 - SCM Music Player","slug":"Xeppetto/ThisBlog/20210419-SCM-Music-Player","date":"2021-04-19T11:48:00.000Z","updated":"2021-04-19T11:48:00.000Z","comments":true,"path":"Xeppetto/ThisBlog/20210419-SCM-Music-Player/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20210419-SCM-Music-Player/","excerpt":"","text":"블로그에 음악을 넣어볼까?본 블로그의 하단에는 SCM Music Player라는 음원 서비스가 탑재되어 있다. 대략 이렇게 생긴게 브라우저 하단에 위치해 있다. (아래는 캡쳐한 그림이다.) 처음엔 단순히 블로그에서 “싸이월드 때처럼 내가 듣고 싶은 음악들을 플레이해볼까?” 정도로 시작했는데, 검색해보니 SCM Music Player라는 오픈소스가 존재했다. ▶ SCM Music Player의 공식 홈페이지 - https://www.scmplayer.net/▶ SCM Music Player의 Github 페이지 - https://github.com/cshum/scm-music-player Github에 가면 제작자가 API를 공개해 두었으니 변형해서 쓰실 분들은 변경해서 사용하시면 된다. SCM Music Player는 Youtube, SoundCloud 혹은 어딘가에 업로드되어 있는 MP3의 링크를 이용해서 블로그에서 스트리밍할 수 있도록 해 주는 JavaScript로 만든 도구다. 누구든지 본인이 블로그의 소스코드를 수정할 수 있다면 자신의 블로그에 스트리밍 음원 목록을 만들어 둘 수 있다. (필자의 경우는 Youtube로 구성했다.) 참고로 PC용 웹브라우저에서만 사용할 수 있으며 모바일 디바이스에서는 제공되지 않는다. SCM Music Player의 UI는 아래와 같이 구성되어 있다. 구분 설명 플레이 컨트롤 음원의 실행, 중단, 이전 곡으로 가기, 다음 곡으로 가기 등을 할 수 있다. 음원 제목 표시 현재 진행 중인 음원의 제목이 표시되며, 제목을 클릭하면 Youtube의 해당 음원 페이지로 이동한다. 플레이 진행 표시 음원이 진행 중인 상태를 바(bar) 형태로 표시하며, 바의 위치를 옮기면 음원의 플레이 위치를 변경할 수 있다. SCM Music Player 링크 이 음원 실행기의 이름을 표시함과 동시에 클릭 시 홈페이지로 이동하는 링크를 제공한다. 음원 진행 상태 표시 숫자로 음원의 진행 상태를 표시한다. 볼륨 조정기 음원 실행기의 볼륨을 조정할 수 있다. 목록 표시 토글 버튼 음원 전체 목록을 표시하거나, 표시를 끌 수 있다. 나만의 음원 실행기를 만들어보자 먼저 SCM Music Player의 공식 웹사이트로 이동한다. 2021년 기준 공식 홈페이지에 들어가면 아래와 같은 ‘선택 화면’이 나타나는데, 구성은 아래와 같다. 먼저 ①스킨 선택은 그냥 색상과 모양의 선택일 뿐, 사용할 때 기능에는 아무런 차이가 없으니 아무거나 선택하시면 된다. 다음은 ②음원 편집이다. 음원 편집은 플레이할 목록을 구성하는 곳으로, 「제목」을 표시하는 란과 「실제 플레이될 음원의 URI」를 입력하는 란이 있다. 실제 플레이될 음원의 URI 중 대표적인 예는 바로 유투브의 ‘공유’ 버튼을 누르면 나오는 ‘줄인 주소’가 될 수 있다. 실제 필자의 블로그에 적용된 SCM Music Player 음원은 모두 이런 식으로 만들어 졌다. 일단 음원 하나만 입력하고 다음으로 넘어가자. 다음은 ③플레이어 속성 설정 화면이다. 여기에서는 음원 플레이어의 세부 설정을 할 수 있다. 구분 설명 Auto Play 페이지가 켜지면서 자동으로 재생할 것인지 여부.체크 시 자동 실행된다. Suffle Playback 음원을 차례 대로 실행할 지, Random으로 섞어 재생할 지 여부.체크 시 무작위로 재생된다. Default Volumn 기본 볼륨(음악 소리 크기) 설정. Repeat Mode 음원을 반복적으로 재생할 지, 각 음원을 1회만 재생할 지 설정. Placement of Player Bar 음원 플레이어의 위치를 결정한다.페이지 상단과 하단을 선택할 수 있다. Show Playlist by Default 음원 목록의 숨김&#x2F;보임 처리 여부를 설정.숨김 상태로 두어도 사용자가 오른쪽 하단 버튼을 클릭하면 나타난다. 세부 설정을 완료하면 아래의 ‘DONE’ 버튼을 클릭하자. 아래와 같이 HTML 문서 내에 삽입할 수 있는 JavaScript 코드를 준다. 내용은 위에서 설정한 내용 그대로 보여준다. 이 코드를 원하는 위치에 삽입하면 블로그에 SCM Music Player가 나타난다. 음원 실행기의 소스코드는 대략 아래처럼 생겼다.필자가 사용하고 있는 음원 실행기의 설정은 이렇다. 12345678&lt;!-- SCM Music Player https://www.scmplayer.net --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.scmplayer.net/script.js&quot; data-config=&quot;&#123;&#x27;skin&#x27;:&#x27;skins/scmGreen/skin.css&#x27;,&#x27;volume&#x27;:50,&#x27;autoplay&#x27;:false,&#x27;shuffle&#x27;:true,&#x27;repeat&#x27;:1,&#x27;placement&#x27;:&#x27;bottom&#x27;,&#x27;showplaylist&#x27;:false,&#x27;playlist&#x27;:[&#123;&#x27;title&#x27;:&#x27;Imagine - Johnlennon&#x27;,&#x27;url&#x27;:&#x27;https://youtu.be/YkgkThdzX-8&#x27;&#125;,&#123;&#x27;title&#x27;:&#x27;Eric Clapton - Autumn Leaves&#x27;,&#x27;url&#x27;:&#x27;https://youtu.be/UQlFOX0YKlQ&#x27;&#125;,&#123;&#x27;title&#x27;:&#x27;The Beatles - Yesyerday&#x27;,&#x27;url&#x27;:&#x27;https://youtu.be/NrgmdOz227I&#x27;&#125;,]&#125;&quot; &gt;&lt;/script&gt;&lt;!-- SCM Music Player script end --&gt; https://www.scmplayer.net/script.js 는 음원 실행기의 API가 들어 있는 실제 js 파일인데 자세한 내용의 설명은 생략하겠다. 일반 사용자가 알아야 할 내용은 없다. data-config의 설정은 아래와 같다. 구분 설명 skin 맨 처럼 SCM Music Player의 스킨 색상을 표시한다. volume 기본 볼륨을 표시 0 ~ 99까지 조정하면 된다. autoplay 자동 실행할 것인지 여부이며 true면 자동 실행, false면 수동 실행이다. shuffle 실행 중 음원을 무작위로 건너 뛸 것인지 결정한다. true면 무작위로 건너뛰고, false면 순차적으로 실행한다. repeat 음원 실행을 전체 몇 번 할 것이냐를 설정한다. 만약 1로 설정했다면 모든 음원을 1번씩 실행 후 종료한다. placement 음원 실행기를 어디에 위치시킬 것이냐를 결정한다. top으로 하면 화면 상단, bottom으로 하면 화면 하단에 나타난다. showplaylist 음원 목록을 기본적으로 표시할 것이냐를 설정한다. false일 경우 숨긴 상태로 실행하고, true일 경우 보여지는 상태로 실행한다. 필자의 경우는 현재 사용하고 있는 Hexo라는 프레임워크에 위젯(Widget) 형태로 SCM Music Player를 넣어뒀다. 본 블로그 페이지의 소스코드 보기를 하면 소스코드 제일 하단에 전체 음원 목록이 나타난다. 아래와 같은 방식이므로 Youtube 등을 돌아다니다가 좋은 노래가 있다 싶으면 ‘제목’과 ‘주소’를 변경해서 생성된 코드에 추가하면 된다. 1&#123;&#x27;title&#x27;:&#x27;제목&#x27;,&#x27;url&#x27;:&#x27;주소&#x27;&#125;, 필자의 블로그의 하단에는 SCM Music player가 설치되어 있다. 브라우저 하단에 나타나므로 필자 취향의 음원들을 들으실 수 있다. 필자의 경우 Hexo에 Widget으로 넣었는데, Hexo에 Widget으로 설정하여 블로그 전체에 넣는 방법은 향후 본 블로그에서 Hexo를 설명할 때 추가하기로 하겠다. 광고 차단 프로그램은 해제하자모든 음원은 사실 유투브에서 화면을 제거하고 음원만 가져오는 방식이기 때문에 그냥 유투브를 영상을 보이지 않는 상태에서 음원만 사용한다고 생각하면 된다. 그래서 광고 차단 프로그램을 사용하면 음원이 플레이되지 않는다. SCM Music Player를 본인의 블로그에 설치하려 한다면, 본인 블로그에는 광고차단을 해제해야 음원을 들을 수 있다. 자동 실행은 왠만하면 꺼두자많은 사용자들이 웹 서핑 시 유투브나 기타 서비스로 음악을 틀어두는 경우가 많으므로, 굳이 SCM Music Player의 자동 실행을 켜두지 않아도 되지 않을까 싶어 필자는 바로는 이를 꺼두기를 제안한다. 본인의 음악적 취향을 알리는 정도로 충분하지 않을까? 필자는 기본 autoplay를 false로 설정해놨다. 필자의 가요&#x2F;팝 취향이 궁금하신 분들은 아래쪽에서 플레이 리스트를 선택해서 시작하시면 된다. (가요&#x2F;팝 외 장르들을 넣기는 좀 애매했다. 클래식이나 재즈 같은 것들.) 참고 : 실제 script.js 내용 (2021년 4월 19일 기준)아래를 클릭하면 필자가 본 글을 쓰는 시점에서의 SCM player의 js script를 볼 수 있다. 그냥 한 번 설정해 두면 알아서 반영되므로, 업데이트 주기 등을 신경 쓸 필요가 없다. SCM Music Player의 script.js 보기/닫기 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167(function() &#123; var hasFrame = window.parent != window, scripts = document.getElementsByTagName(&#x27;script&#x27;), current = scripts[scripts.length - 1], config = current.getAttribute(&#x27;data-config&#x27;), head = document.getElementsByTagName(&quot;head&quot;)[0], dest = location.href.replace(/scmplayer\\=true/g, &#x27;scmplayer=false&#x27;), destHost = dest.substr(0, dest.indexOf(&#x27;/&#x27;, 10)), scm = current.getAttribute(&#x27;src&#x27;).replace(/(www.)?(scmplayer.co|scmplayer.net)/, &#x27;scmplayer.net&#x27;).replace(&#x27;https:&#x27;, location.protocol).replace(&#x27;http:&#x27;, location.protocol).replace(/script\\.js.*/g, &#x27;scm.html&#x27;) + &#x27;#&#x27; + dest, scmHost = scm.substr(0, scm.indexOf(&#x27;/&#x27;, 10)), isOutside = !hasFrame || location.href.indexOf(&quot;scmplayer=true&quot;) &gt; 0, postMessage = function(msg) &#123; return window.top.document.getElementById(&#x27;scmframe&#x27;).contentWindow.postMessage(msg, scmHost); &#125;, postFactory = function(obj, keys) &#123; var keys = keys.split(&#x27;,&#x27;), post = function(key) &#123; return function(arg) &#123; var argStr = &#x27;&#x27;; if (typeof(arg) != &#x27;undefined&#x27;) argStr = (key.match(/(play|queue)/) ? &#x27;new Song(&#x27; : &#x27;(&#x27;) + JSON.stringify(arg) + &#x27;)&#x27;; postMessage(&#x27;SCM.&#x27; + key + &#x27;(&#x27; + argStr + &#x27;)&#x27;); &#125; &#125;; for (var i = 0; i &lt; keys.length; i++) &#123; var key = keys[i]; obj[key] = post(key); &#125; &#125;, postConfig = function(config) &#123; if (!isOutside) postMessage(&#x27;SCM.config(&#x27; + config + &#x27;)&#x27;); &#125;, addEvent = function(elm, evType, fn) &#123; if (elm.addEventListener) elm.addEventListener(evType, fn); else if (elm.attachEvent) elm.attachEvent(&#x27;on&#x27; + evType, fn); else elm[&#x27;on&#x27; + evType] = fn; &#125;, isIE = (function() &#123; var undef, v = 3, div = document.createElement(&#x27;div&#x27;), all = div.getElementsByTagName(&#x27;i&#x27;); while (div.innerHTML = &#x27;&lt;!--[if gt IE &#x27; + (++v) + &#x27;]&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;&#x27;, all[0]); return v &gt; 4 ? v : undef; &#125;)(), isMobile = navigator.userAgent.match(/iPad|iPhone|Android|Blackberry/i), isIPad = navigator.userAgent.match(/iPad/i), init = function() &#123; if (!document.body) &#123; setTimeout(init, 10); return; &#125; if (isOutside) outside(); else inside(); &#125;, outside = function() &#123; var css = &#x27;html,body&#123;overflow:hidden;&#125; body&#123;margin:0;padding:0;border:0;&#125; img,a,embed,object,div,address,table,iframe,p,span,form,header,section,footer&#123; display:none;border:0;margin:0;padding:0; &#125; #tumblr_controls&#123;display:none;&#125; #scmframe&#123;display:block; background-color:transparent; position:fixed; top:0px; left:0px; width:100%; height:100%; z-index:1667;&#125; &#x27;; var style = document.createElement(&#x27;style&#x27;); style.type = &#x27;text/css&#x27;; style.id = &#x27;scmcss&#x27;; if (style.styleSheet) style.styleSheet.cssText = css; else style.appendChild(document.createTextNode(css)); head.appendChild(style); var scmframe = document.createElement(&#x27;iframe&#x27;); scmframe.frameBorder = 0; scmframe.id = &quot;scmframe&quot;; scmframe.allowTransparency = true; scmframe.src = scm; document.body.insertBefore(scmframe, document.body.firstChild); var resize = function() &#123; scmframe.style.height = (function() &#123; if (typeof(window.innerHeight) == &#x27;number&#x27;) return window.innerHeight; else if (document.documentElement &amp;&amp; document.documentElement.clientHeight) return document.documentElement.clientHeight; else if (document.body &amp;&amp; document.body.clientHeight) return document.body.clientHeight; &#125;)(); &#125;; addEvent(window, &#x27;load&#x27;, function() &#123; setTimeout(function() &#123; while (document.body.firstChild != scmframe) document.body.removeChild(document.body.firstChild); while (document.body.lastChild != scmframe) document.body.removeChild(document.body.lastChild); resize(); &#125;, 0); &#125;); addEvent(window, &#x27;resize&#x27;, resize); var getPath = function() &#123; return location.href.replace(/#.*/, &#x27;&#x27;); &#125;, path = getPath(), hash = location.hash; setInterval(function() &#123; if (getPath() != path) &#123; path = getPath(); window.scminside.location.replace(path); &#125; if (location.hash != hash) &#123; hash = location.hash; window.scminside.location.hash = hash; &#125; &#125;, 100); &#125;, inside = function() &#123; window.top.document.title = document.title; var filter = function(host) &#123; host = host.replace(/blogspot.[a-z.]*/i, &#x27;blogspot.com&#x27;); host = host.replace(/^(http(s)?:\\/\\/)?(www.)?/i, &#x27;&#x27;); return host; &#125;; addEvent(document.body, &#x27;click&#x27;, function(e) &#123; var tar = e.target; while (!tar.tagName.match(/^(a|area)$/i) &amp;&amp; tar != document.body) tar = tar.parentNode; if (tar.tagName.match(/^(a|area)$/i) &amp;&amp; !tar.href.match(/.(jpg|png)$/i) &amp;&amp; !tar.href.match(/^javascript:/)) &#123; if (tar.href.indexOf(&#x27;#&#x27;) == 0) &#123; if (tar.href != &quot;#&quot;) &#123; window.top.scminside = window; window.top.location.hash = location.hash; e.preventDefault(); &#125; &#125; else if (tar.title.match(/^(SCM:|\\[SCM\\])/i)) &#123; var title = tar.title.replace(/^(SCM:|\\[SCM\\])( )?/i, &#x27;&#x27;); var url = tar.href; SCM.play(&#123; title: title, url: url &#125;); e.preventDefault(); &#125; else if (tar.href.match(/\\.css$/)) &#123; window.open(&#x27;http://scmplayer.net/#skin=&#x27; + tar.href, &#x27;_blank&#x27;); window.focus(); e.preventDefault(); &#125; else if (filter(tar.href).indexOf(filter(location.host)) == -1) &#123; if (tar.href.match(/^http(s)?/)) &#123; window.open(tar.href, &#x27;_blank&#x27;); window.focus(); e.preventDefault(); &#125; &#125; else if (history.pushState) &#123; var url = filter(tar.href).replace(filter(destHost), &#x27;&#x27;); window.top.scminside = window; window.top.history.pushState(null, null, url); e.preventDefault(); &#125; &#125; &#125;); &#125;; var SCM = &#123;&#125;; postFactory(SCM, &#x27;queue,play,pause,next,previous,volume,skin,placement,&#x27; + &#x27;loadPlaylist,repeatMode,isShuffle,showPlaylist,&#x27; + &#x27;togglePlaylist,toggleShuffle,changeRepeatMode&#x27;); if (window.SCM &amp;&amp; window.SCMMusicPlayer) return; if (!isMobile) &#123; init(); &#125; if (config) postConfig(config); SCM.init = postConfig; window.SCMMusicPlayer = window.SCMMusicPlayer || SCM; window.SCM = window.SCM || SCM;&#125;)();","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"SCM Music Player","slug":"SCM-Music-Player","permalink":"https://xeppetto.github.io/tags/SCM-Music-Player/"},{"name":"배경음악","slug":"배경음악","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EA%B2%BD%EC%9D%8C%EC%95%85/"},{"name":"음악","slug":"음악","permalink":"https://xeppetto.github.io/tags/%EC%9D%8C%EC%95%85/"},{"name":"인생 노래","slug":"인생-노래","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D-%EB%85%B8%EB%9E%98/"},{"name":"Music","slug":"Music","permalink":"https://xeppetto.github.io/tags/Music/"},{"name":"Youtube","slug":"Youtube","permalink":"https://xeppetto.github.io/tags/Youtube/"}]},{"title":"내가 블로그를 다시 시작한 이유에 대한 재미없는 긴 이야기","slug":"Xeppetto/ThisBlog/20210430-The-Reason-I-Started-Blogging-Again","date":"2021-04-09T15:00:01.000Z","updated":"2021-05-21T15:00:01.000Z","comments":false,"path":"Xeppetto/ThisBlog/20210430-The-Reason-I-Started-Blogging-Again/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20210430-The-Reason-I-Started-Blogging-Again/","excerpt":"","text":"그저 그런 이야기사실 “블로그를 다시 정리하자” 마음먹은 건 2017년이었다. 필자의 현재 블로그 아래쪽 CopyRight 부분에 1997년부터라고 쓰여 있는 바와 같이 필자는 HTML 3.0 시대에 웹개발을 공부하기 시작했고, 때는 1996년 가을이었다. 이후 Dynamic HTML이라는 HTML 기술이 흥할 때 처음 개인 홈페이지를 만들었고, 1997년에 HTML 4.0 스펙이 발표되었을 때 개인 홈페이지를 개설하였다. 처음 웹개발을 시작하고 신나서 개발했던 방명록 게시판은 이런 모양이었다. 당시에 유행하던 「제로보드」를 사용해서 게시판의 겉모양을 모두 숨겨버리고, 이런 식의 레이아웃을 개발해서 사용했었다. 아래쪽 네모네모한 부분이 사람들이 남긴 방명록 글이 보이는 장소. 당시에는 인터넷을 사용하는 인구도 많지 않고 하다 보니 블로그라는 건 그냥 필자의 개인적인 이야기, 20대의 감수성 젖은 감상, 그냥 평이한 일기 같은 이야기들, 투덜거림, 짝사랑이나 그리움 같은 것들이나 남기는 곳이었다. 그리고 지인들 중에 찾아와 글을 남겨주면 함께 수다 떠는 장소였고. 현재는 ‘카카오’인 ‘다음’이 「태터툴즈」를 인수했을 때 제로보드를 버리고 모든 데이터를 마이그레이션 해서 티스토리로 옮기기도 했고, 그렇게 여러 차례 모양을 바꿔가며 개인 데이터를 쌓아갔다. 특히 Testing과 QA에 관련한 이야기들은 필자 경력 초반의 시작부터 기록해갔다. 필자가 그 업을 대하며 무엇을 어디에서부터 고민했는지를 잘 정리해두면, 나중에 누군가 비슷한 고민을 시작할 때 도움이 되리라 믿었기 때문에. 글쓰기를 멈추게 된 과거의 변곡점 1번그리고 거기에서 첫 번째 변곡점이 생겼다. 지금도 남의 블로그 글을 베끼거나, 훔치는 게 흔하지만 당시에는 필자도 젊은 혈기에 열정만 넘쳐나던 시기라 특별해지고 싶고, 인정받고 싶은 욕망이 굉장히 컸다. 그런데 필자의 경험을, 그 글들을 훔쳐다가 강의를 하고 자기가 쓴 글처럼 변경해서 게시하는 걸 몇 번 목격하게 됐다. 그러고 나서 변화되어 버린 글쓰기 패턴은 지금 보면 좀 부끄럽다. 일부러 잘 못 알아듣게 쓴 글, 일부러 어렵게 쓴 글, 일부러 고고한 철학을 가진 척하면서 쓴 글들이 이후 몇 년간 썼던 글들이다. 그런 식으로 뭔가를 감추면서 글을 쓰니까 글 쓰는게 재미가 없어져버렸었다. 그래… 그게 있었구나. 말 터진 김에 그 이야기 하나 하고 가야겠다. 그때… 흐흐… 지금 생각해보면 웃긴 건데… 애자일 개발이 한국에 본격적으로 등장하고 필자가 관심을 가지고 들이 파기 시작했던 게 2006년 즈음인데, 필자 역시 당시에는 종교처럼 빠져서 무지막지하게 공부하면서 기존의 방식과 접목하여 뭔가 새로운 방식을 창조해 내려 애썼다. 그리고 그 이야기들을 블로그에 담기 시작했는데, 어느 날 애자일 개발 관련한 세미나 같은 곳에서 필자의 방식과 비슷한 이야기들을 한다는 걸 알게 됐다. 그래서 그 발표자의 블로그에 들어가 보니, 마치 무슨 누구의 논문이라도 참고하고선 주석을 안 달아 놓은 것 같은 느낌의 글들… 필자 관점에서 보기엔 필자가 했던 이야기 중에 특정 부분을 잡아서 마치 자기 이야기인 거처럼 소프트웨어 품질관리 이야기들을 자신의 애자일 개발 철학과 접목해서 이야기하고 있었다. 마치 자신이 해본 거처럼, 자신의 아이디어인 거처럼. 당연히 필자의 이야기는 언급조차 없었다. 당연히 기분이 나빴다. 그래서 필자는 그 이후로 애자일 개발과 품질관리 관련 이야기들을 필자의 메모장에만 기록하고, 단 한 번도 온라인 상에 꺼내놓지 않았다. (지금도 쓸모없는 이야깃거리들이 노트 속에 잔뜩 쌓여있다.) 그런데 말입니다, 너무나도 우연이겠지만, 그냥 필자의 기분이겠지만 말입니다… 필자가 블로그에 글 게재를 멈춘 시점부터 그 애자일 전문가의 블로그에서 품질관리 관련된 글들이 보이지 않더라. 푸하. 필자 스스로도 그냥 혼자만의 착각이겠지 하면서도 그게 되게 웃기다. 왜 갑자기 몇 달간 쓰던 애자일 개발에서의 품질관리 이야기가 쏙 들어간 걸까? 아마 그 사람 스스로만 알겠지. 필자의 착각이겠지. < \"애자일 선언문 내가 만든건데?\" 라고 하신 데이브 토마스의 강연 > 글쓰기를 멈추게 된 과거의 변곡점 2번다시 본론으로 돌아와서… 블로그 글을 본격적으로 쓰지 않게 되었던 두 번째 변곡점은 2015년 어느 날 찬 바람이 불고, 갑자기 기온차가 많이 나서 집에 가서 샤워하고 바로 따뜻한 옷을 입어야 했던 환절기 즈음 언젠가였다. 필자의 20대와 30대 초중반까지는 지나치게 오버해서 열정적으로 살았다. 누가 시키지도 않았는데 스스로의 콤플렉스 때문인지, 아니면 어릴 적 가져보지 못해 아쉬웠던 짝사랑의 빈 공간을 충족시키고 싶었던 것인지, 아니면 무슨 대단한 능력자라는 소리라도 듣고 싶었던 것인지 모르겠으나… 그렇게 죽어라고 책을 읽고, 강의에 찾아다니며 공부하고, 스스로 연구하고, 사람들을 만나 토론을 했었는데… 전혀 그렇게 살지 않고 있는 사람들이 모인 회사에 가서 1년 반 정도를 겪고 나니 ‘내가 지금 왜 이러고 있는 거지?’ 하는 생각이 들었다. 그렇게 열정적으로 살지 않아도 잘 살 수 있음을 어느 날 불현듯 갑자기 깨달아 버렸다. 그래서 ‘나도 한 번 놀아 보자’ 싶었다. 단순히 블로그에 글쓰기만 멈춘 게 아니었다. 집에 도착하면 무조건 TV 앞으로 가서 일단 TV를 켰다. 이불을 하나 꺼내 들고 거실에 앉아 TV를 보기 시작했다. 한 2주쯤 지났을 때 또 깨달았다. 지난 2주간 디스커버리 같은 다큐멘터리만 보고 있었음을. 필자는 결국 또 그런 것에만 재미를 느끼고 있었음을. 그리고 TV를 보던 중 의식하지도 못한 어느새 전화기를 들고 다큐멘터리에 나오는 내용을 찾아 또 공부를 하고 있음을. ‘아, 안 되겠다’ 싶어 그다음부터는 TV를 볼 때 핸드폰도 방에 던져버리고 TV에 집중하기로 했고, 오락 프로그램들이나 드라마를 찾아보기 시작했다. (드라마는 도저히 안 되겠어서 포기했다.) 두 달 정도를 그렇게 하고 났더니 그제야 온전히 TV에 집중하며 꺄르륵 댈 수 있었다. 그렇게 좀 가볍게 살아보기로 했다. 다른 사람들처럼. 다시 글을 쓰기로 하다그렇게 일 년 정도를 살아봤더니 몸이 불편했다. 이유를 알 수가 없었다. 그냥 먹으면 체한 거 같고, 감정도 들쑥날쑥하고, 재밌게 놀다가도 갑자기 휙 식어버리기 일수였다. 사랑도 일도 그냥 하루하루 지나가는 이벤트로 느껴졌다. 그러다가 알파고와 이세돌의 세기의 대결이 펼쳐지고, 인공지능이라는 화두가 유행이 되었다. 지금도 같이 만나 술 마시는 형님들 중 두 분이 인공지능 전공 박사신데, 그렇게 우리는 자연스럽게 술 마시다가 스터디 그룹을 만들게 되어 Machine Learning과 Deep Learning부터 시작해서 인공지능에 대해 공부하기 시작했다. 그리고, 그랬더니 몸이 다시 나아지더라. 매일 아침에 일어날 때 즐겁고, 오늘 하루의 업무가 즐겁고, 업무 끝나고 공부할 생각에 즐거워졌다. 그런 과정을 거치며 확신했다. 사람은 생긴 대로 살아야 함을. 누군가는 공부하지 않고 업에 익숙해지는 방식으로 살아야 편한 것이고, 필자 같은 사람은 공부하고 열정 쏟으면서 사는 게 자신에게 맞는 방식이라는 점을 굳이 큰 변곡점들을 거치며, 빙빙 돌아 깨닫게 되었다. ‘나는 나 생긴 대로 살아야지’ 다짐했고, 그렇게 살면 행복해질 거라 확신했다. 달라진 부분이 있다면 ‘이제 좀 적당히 하자, 살살하자’로 스탠스가 바뀐 정도였다. 예전처럼 필자가 편한 방식대로 살되 너무 지치지 않게 천천히 하자로 바뀌었다. “생긴 대로 살아라”는 사실 한의학의 기조 철학인데, 세상 모든 사람들이 장기의 크기나 피의 체질이 다르니 생긴 대로 살아야 건강하다는 의미로 필자는 이해하고 있다. 그리고 나이가 들수록 한의학의 이런 철학들이 더 깊이 마음에 와닿고 동의가 된다. 글쓰기를 다시 시작하려는 시도와 방향 설정그래서 “블로그를 다시 정리하자” 라고 마음먹은 건 2017년이었다. 그런데 쉽사리 몸이 움직이지 않았다. 뭐든 결정을 내렸으면 일단 행동부터 하고 보던 필자였는데, 몸이 잘 움직이지 않았다. ‘내가 그동안 너무 놀았나’ 싶은 마음에 마음을 다잡고 행동 패턴을 고쳐보기도 했지만 예전처럼 잘 되지 않았다. 굳이 천천히 살려고 마음을 먹어서 그 다짐이 행동으로 투영된 것일지 알 수 없었지만, 명백히 확신한 것은 머릿속에 아직 해결했으면 하는 부분들이 필자가 인식하지 못한 채 남아 있음이었다. 그리고 그 껄적지근한 게 무엇인지 찾기 시작했다. 수많은 생각과 고민을 해 봤다. 그러고 나서 깨달은 것. 필자는 블로그를 다시 시작하려는 목적이 불분명했었다. 그저 ‘예전에 했던 일이니 다시 시작해보자’ 정도로는 스스로에게 명확한 명분과 동기부여를 제공하지 못했다. 나이가 들어서일 수도 있고, 열정의 불길이 조금 사그라들어서일 수도 있다. 또다시 오랜 시간 동안 자신에게 시간을 주고 고민했다. 그리고 마침내 내린 결론. 필자가 블로그를 다시 하게 된다면 “나는 과연 무엇인가, 나는 누구이고, 무엇에 관심을 가지며, 무엇을 하고 싶은가”에 대한 정체성을 규정하는 방식으로 글을 써내고 싶었다. 그게, 필자가 설정한 방향이었다. 그렇게 긴 고민 끝에 2020년이 되어서야 블로그의 형태를 결정했고, 2021년이 되어서야 다시 글을 쓰기 시작했다. 행복해지기 위한 글쓰기청년의 시기에 “난 누군가, 또 여긴 어딘가” 하는 고민의 방식은 인생이라는 이름의 테이블 위를 정신없이 뛰어다니게 했다. 존재하지 않는 그 어딘가를 계속 찾았던 게 아닌가 싶다. 안전하고, 젖과 꿀이 흐르는 정착지를 찾으면 반드시 내가 차지하리라는 듯이 공격적으로 인생을 살아왔다. 당연히 그런 건 없다. 중년이 된 후, 그런 건 없다는 걸 잘 알기에 조금 더 느긋해진 몸과 마음으로, 덜 공격적으로, 아니, 무척 평화로운 방식으로 자아 속의 또 다른 자아들과 이야기를 나누어 무던하게 필자 스스로의 인생을 위한 결론을 끄집어내었다. 인생은 누구나 행복하려고 사는 것이다. 인생은 나를 찾아 떠나는 여행이며, 그 또한 행복을 찾아 떠나는 길이기도 하다. 어디로 가야 무엇을 찾을 수 있는지 아는 사람은 없다. 그 여행에 방향은 정해져 있지 않다. 어디로 흐를지 모르는 구름처럼, 방향도 정하지 않고, 발길이 닿는 대로 걸어가는 나그네처럼, 어디에서 와서 어디로 가는지도 모른 채 걷고 또 걷는 것이 옳다. 세상 모든 일은 우연히 일어나고 우연히 나와 조우하게 된다. 그 과정에서 만나는 좋은 사람들도, 나쁜 사람들도, 모두 흘러가는 강물처럼 빠르게 지나가버려 잡아보려 해도 잡히지 않는다. 그런 과정들을 보고 겪으면서 자기 스스로와 친해지고, 자기를 잘 알아가는 것이 바로 행복을 찾는 인생의 여정이라 생각한다. 필자는 앞으로 필자에게 주어질 시간과 남은 인생에서 필자가 가치 있게 할 수 있는 일이 무엇일까 고민해봤다. 생각해보니 청년 시절 불타오르던 열망은 언제나 스스로 행동하게 하고, 공부하게 했다. 이게 필자에게 남겨진 유산이었다. 남들은 중년이 되면 머리도 나빠진다는데, 머리가 나빠지기는커녕 필자의 열정은 아직 잘만 타오르고 있다. 돌아보면 그렇게 스스로를 괴롭히던 열망으로 해온 일들이 참 재미있었다. 사람들을 만나고, 공부하고, 도전하고, 부딪히고, 실패와 성공도 경험하면서 살아온 날들을 떠올리니 문득 입술 사이로 피식하는 웃음이 새어 나왔다. 그땐 괴롭고 힘들었는데, 돌아보니 재밌던 기억이었다. 무척. 그래서, 아무도 보지 않더라도, 아니, 누군가에게는 또 간절히 필요할지 모르는 필자의 경험들을 정리해보자 싶었다. 그리고 나이가 들며 천천히 잊혀져갈 필자 인생의 필모그래피를 정리하면서 스스로를 정돈하고 다잡아 너무 못난 어른이 되지 말자는 생각이 들었다. 글을 쓰고, 내가 해온 일들을 정리하는 것. 내가 이루었던 일들과 공부했던 것들을 정리하는 것. 그렇게 다시 블로그에 글쓰기를 시작하게 되었다. References 이미지 출처 : 교보문고 - 생긴대로 살아야 건강하다 이 글에는 댓글을 남기실 수 없습니다. 이 글의 내용으로 이야기를 하고 싶으시면 제 개인 Social Media로 와주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"블로그","slug":"블로그","permalink":"https://xeppetto.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"고민","slug":"고민","permalink":"https://xeppetto.github.io/tags/%EA%B3%A0%EB%AF%BC/"},{"name":"생각","slug":"생각","permalink":"https://xeppetto.github.io/tags/%EC%83%9D%EA%B0%81/"},{"name":"정체성","slug":"정체성","permalink":"https://xeppetto.github.io/tags/%EC%A0%95%EC%B2%B4%EC%84%B1/"}]},{"title":"[Docker] 자주 사용하는 Docker 명령어 정리","slug":"소프트웨어/WSL-and-Docker/07-자주-사용하는-docker-명령어-정리","date":"2021-03-24T18:25:30.000Z","updated":"2022-09-10T12:41:00.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/07-자주-사용하는-docker-명령어-정리/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/07-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-docker-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC/","excerpt":"","text":"목차 Docker 이미지 관련 명령 이미지 내려받기 이미지 삭제하기 Docker 모든 이미지 latest로 자동 업데이트 Docker 컨테이너 관련 명령 컨테이너 생성하기 컨테이너 조회하기 컨테이너 수정하기 컨테이너 삭제하기 컨테이너 중지하기 &#x2F; 시작하기 컨테이너 접속하기 &#x2F; 접속끊기 WSL2에서 실행 중인 Docker에 명령 보내기 컨테이너로부터, 컨테이너로 파일 복사 참고 자료 Docker 이미지 관련 명령본 페이지는 외우는 걸 워낙 못하는 필자의 성격상 자주 사용하는 Docker 명령어들을 정리해서 저장해두고 필요할 때 참고하기 위해 작성하는 포스팅이다. 1. 이미지 내려받기Docker 이미지를 내려받는 방법은 https://hub.docker.com 에서 검색 후 화면에 나타나는 방법대로 진행하면 된다. 2. 이미지 삭제하기Docker 이미지 삭제 시 rmi를 사용한다. 1docker rmi &#123;이미지ID&#125; 실제 사용 예는 아래와 같다. 이미지가 업데이트된 후 동일한 이름의 이미지가 2개 이상 존재하는 경우 ID를 지정하여 불필요한 이미지를 삭제할 수 있다. 3. Docker 모든 이미지 latest로 자동 업데이트 Docker의 이미지들을 lastest 버전으로 다시 pulling하기 위해서는 각 이미지를 한 개씩 업데이트하는 방법도 있겠으나, 아래를 사용하면 Docker 전체의 이미지들을 한 번에 업데이트할 수 있다. 1docker images | grep -v REPOSITORY | awk &#x27;&#123;print $1&#125;&#x27; | xargs -L1 docker pull 위 명령을 실행하면 아래처럼 현재 Docker로 가져온 모든 이미지를 latest로 업데이트하는 화면을 볼 수 있다. Docker 컨테이너 관련 명령1. 컨테이너 생성하기Docker를 공부하다보면 컨테이너 생성 명령이 거의다 run으로 되어 있는데, 컨테이너를 생성하는 방법은 원래 create이다. create : 새로운 컨테이너를 생성, 실행은 안됨 run : 새로운 컨테이너를 생성 후 실행 원래대로라면 create 후 start 명령으로 실행하여 컨테이너로 진입해야 하지만, run 명령은 이 두 가지 행동을 한 번에 실행해주는 명령이다. 두 명령 모두 세부 옵션을 가지고 있다. 예를 들어, Ubuntu에 React 환경을 구성하는 컨테이너를 추가한다면 아래와 같이 –name 옵션으로 컨테이너의 이름을 지정할 수 있다. 아래는 ‘ubuntu’라는 이미지에서 ‘ubuntu-react’라는 컨테이너를 만들으라는 명령의 예다. 1docker create -i --name ubuntu-react ubuntu run을 사용할 때는 기본적으로 -it 옵션을 사용한다. -i는 standard input&#x2F;output이며, -t는 터미널 연결을 의미한다. run을 사용하면 create 후 start 하고 attach하여 접속하므로, -it 옵션으로 생성하면 된다. 1docker run -it --name ubuntu-react ubuntu 2. 컨테이너 조회하기Docker 컨테이너를 조정하는 방법은 현재 작동 중인 컨테이너만 조회하는 방법과 작동을 멈춘 컨테이너까지 모든 내용을 조회하는 방법 두 개가 있다. 모든 내용 조회 시 -a를 사용한다. 12docker psdocker ps -a 3. 컨테이너 수정하기Docker의 컨테이너를 수정하는 방법은 여러 가지가 있다. 그 중 필자가 자주 쓰는 것들을 모아보았다. (1) Docker 컨테이너의 이름을 변경하는 방법은 ‘docker rename {예전 이름} {새로운 이름}’으로 사용한다. 1docker rename ubuntu-react ubuntu-react-test (2) Docker 컨테이너에 특정 포트를 추가해야 하는 경우 아래와 같이 진행한다. 123docker stop &#123;컨테이너 이름&#125;docker commit &#123;컨테이너 이름&#125; &#123;이미지이름&#125;docker run -p 3000:3000 -d &#123;이미지이름&#125; 위에서 1번 라인은 현재 실행 중인 컨테이너를 중지하는 명령이다. 2번 라인은 중지한 컨테이너를 이미지로 저장하는 명령이다. 3번 라인은 저장한 이미지로 새로운 컨테이너를 생성하면서 port를 지정하는 명령이다. 이 방식으로 현재 컨테이너의 내용을 잃지 않으면서 포트 포워딩을 추가하여 사용할 수 있다. 3번 라인에서 포트 지정 시 첫 번째 숫자는 외부에서 들어가는 inbound port, 두 번째 숫자는 컨테이너 내부에서 처리하는 forwarding port이다. 예를 들어, react 서비스를 실행하는 각기 다른 컨테이너 2개를 동시에 사용한다면, 2개 모두 3000번 포트를 테스트 포트로 사용하므로 둘 중 하나는 작동하지 않는다. 이 때 아래와 같이 지정하면 컨테이너 2개 모두 사용할 수 있게 된다. 12docker run -p 3000:3000 -d react-test1docker run -p 3001:3000 -d react-test2 웹브라우저에서 localhost:3000과 localhost:3001로 호출하면 모두 react를 표시할 수 있다. 서로 다른 컨테이너에서 각각 포트 번호 별로 따로 신호를 처리할 수 있기 때문이다. (3) 그 외, 환경 변수를 추가하거나 bash를 추가하는 방법 등이 있으나, 도구와 상황에 따라 다르므로 ‘그런게 있다’ 정도로 기억하고 검색해서 사용하는 걸로 한다. 4. 컨테이너 삭제하기Docker 컨테이너 삭제는 rm 명령을 사용한다. 컨테이너 이름이나 ID를 입력하여 삭제할 수 있다. 12docker rm &#123;컨테이너 이름&#125;docker rm &#123;컨테이너 ID&#125; 5. 컨테이너 중지하기 &#x2F; 시작하기실행 중인 Docker 컨테이너를 중지할 때는 stop, 다시 시작할 때는 start를 사용한다. 또, 다시 시작할 때는 restart를 사용한다. 123docker stop &#123;컨테이너 이름&#125;docker start &#123;컨테이너 이름&#125;docker restart &#123;컨테이너 이름&#125; 6. 컨테이너 접속하기 &#x2F; 접속끊기컨테이너에 접속은 attach를 사용한다. 1docker attach &#123;컨테이너 이름&#125; 컨테이너 사용 후 접속을 끊는 방법은 해당 컨테이너의 bash에서 exit을 입력하면 된다. 1root@container : exit 7. WSL2에서 실행 중인 Docker에 명령 보내기Docker 컨테이너들 여러 개를 동시에 다루어야 하는 경우 컨테이너들을 들락날락하면서 필요한 내용들을 실행하기는 번거로울 수 있다. 이런 경우 exec 명령을 사용하여 컨테이너에 명령을 보내고 결과를 얻을 수 있다. WLS2에서 Docker로 명령을 보내 실행하는 문법은 아래와 같다. 12docker exec &#123;컨테이너 ID&#125; &#123;명령&#125;docker exec &#123;컨테이너 이름&#125; &#123;명령&#125; exec 명령은 작동 중인 컨테이너에서만 실행 가능하므로, 먼저 컨테이너가 실행 중인지 확인해야 한다. 이후에 작동 중인 컨테이너에 대해서 명령을 실행한다. 위와 같이 컨테이너가 작동 중임을 확인하고, 컨테이너 내에서 실행할 수 있는 명령을 보내 실행할 수 있다. 1docker exec -t react-test ls /root/react-test1 8. 컨테이너로부터, 컨테이너로 파일 복사Docker 컨테이너에서 파일을 복사하여 WSL2 시스템으로 복사하거나, WSL2에 있는 파일을 컨테이너로 파일을 복사하는 방법이 있다. 이를 이용하여 특정 컨테이너에 있는 파일이나 디렉토리를 다른 컨테이너로 복사할 수 있다. 먼저 컨테이너로부터 WSL2로 복사하는 문법은 아래와 같다. 1docker cp &#123;container name&#125;:&#123;container 내부 경로&#125; &#123;host 파일경로&#125; 컨테이너가 작동하고 있음을 확인 후 컨테이너 내부에 있는 파일을 WSL2로 복사하는 과정은 아래와 같다. 다음으로는 WLS2에서 특정 컨테이너로 복사하는 문법은 아래와 같다. 1docker cp &#123;host 파일경로&#125; &#123;container name&#125;:&#123;container 내부 경로&#125; 컨테이너가 작동하고 있음을 확인 후, WSL2로에 있는 파일을 컨테이너 내부로 옮기는 과정은 아래와 같다. 아래 예제에서는 위 예제에서 복사한 파일의 이름을 변경한 후 다시 원래 위치로 복사해보았다. docker exec 명령으로 복사한 파일이 컨테이너 내부에 정상적으로 복사되었음을 확인할 수 있다. 참고 자료 Docker official page : https://docs.docker.com/engine/reference/commandline/docker/ 모든 이미지 latest로 자동 업데이트 : https://dev.to/goffity/update-all-docker-images-already-pulled-o3l https://fliedcat.tistory.com/111 https://bio-info.tistory.com/136 https://www.leafcats.com/163","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"WSL2","slug":"WSL2","permalink":"https://xeppetto.github.io/tags/WSL2/"},{"name":"WSL1","slug":"WSL1","permalink":"https://xeppetto.github.io/tags/WSL1/"}]},{"title":"[WSL] WSL1과 WSL2 환경 분리하기","slug":"소프트웨어/WSL-and-Docker/05-Dividing-WSL1-and-WSL2","date":"2021-03-19T20:05:30.000Z","updated":"2021-05-31T10:19:19.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/05-Dividing-WSL1-and-WSL2/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/05-Dividing-WSL1-and-WSL2/","excerpt":"","text":"목차 다시 한 번 WSL의 중요성 WSL1과 WSL2 분리하기 NTFS와 WSL의 연동 현재 진입한 WSL의 버전을 쉽게 알아 보는 방법 다시 한 번 WSL의 중요성Microsoft는 Windows10을 발표하며 회사의 여러 가지 전략을 수정하였는데, 그 중 하나로 Windows10에서 Linux를 지원하는 방법이었다. Linux와 Mac의 개발환경을 Windows10에서도 거의 비슷하게 가져갈 수 있다는 점은 분명히 강력한 장점이다. 특히 Visual Studio가 Windows Kernel에 특화된 기능들 몇 개가 있어 MacOS에서 정상적으로 작동하지 않기 때문에 VS로 개발해야 하는 개발자들에게는 특히나 희소식일거다. 또한, WSL을 사용하면 Windows 사용자가 Linux용 실행 파일을 실행하기 위해 가상 환경을 설치&#x2F;운영할 필요가 없고, 또 반대로 Linux용 실행 파일을 윈도우 환경에서 구동하기 위해 복잡하고 어려운 설치&#x2F;포팅 환경을 제공하지 않아도 된다. WSL1과 WSL2 분리하기필자는 개인적인 취향(?)으로 WSL1과 WSL2를 모두 사용하고 있다. WSL1을 사용하다가 WSL2로 넘어왔는데 어떤 문제가 있었기 때문이다. WSL1과 WSL2의 차이 중 아키텍터 부분에 대한 이야기는 「WSL은 무엇인가?」에서 아키텍처 관점의 내용을 살짝 다루었으니 참고하시기 바란다. 이런 차이가 나타나는 이유는 WSL1은 가상화에 의존하지 않고 시스템 콜 번역을 위한 드라이버를 배치하여 Linux를 Windows10에 올려 사용하려 했으며, NTFS를 Linux용으로 확장해서 Linux 파일 시스템을 직접적으로 연결했었다. 그러나 WSL2는 조금 더 가상화 기술을 도입하여 보다 안정적으로 시스템을 운영할 수 있게 되었다. Microsoft의 「WSL1과 WSL2 비교」 페이지에 보면 아래와 같은 표가 있다. 이 표에 따르면 WSL1에서는 가상 환경이 아닌 실제 Linux Driver를 제공하려 했었고, 관리VM을 사용하지 않았다. 그 결과 전체 Linux System Call을 사용할 수 없어 전체 Linux 기능을 사용할 수는 없었다. WSL2에서는 이를 가상환경으로 변경하여 전체 Linux 커널을 사용할 수 있도록 변경하였으며, 그 결과 전체 Linux System Call을 사용할 수 있게 되었다. 그러나 가상 환경을 거쳐 Bash shell 명령을 번역하는 구조로 되어 있어 Windows 시스템의 파일과 Linux 시스템의 파일간 연결은 약간 느려진다. 실제로 필자는 2종류의 JAM(JavaScript, APIs, Markup) Stack을 사용하고 있는데, 본 블로그를 생성하는 Hexo와 다른 블로그의 Jekyll이다. WSL2로 변경하고 난 뒤 JAM Stack으로 Static file genreate 명령 실행 시 약간 끊어진다는 느낌을 받게 되는데, 이 과정이 최소 하루에 한 번씩은 있다보니 그냥 WSL1을 사용하는게 정신건강에 이롭겠다는 생각이 들었다. (의사도 보지 않고 싶고, 퇴사도 하지 못하는) 개인의 취미 생활의 정신건강 보존을 위해 WSL1과 WSL2를 분리하기로 했다. 인터넷을 검색해서 아래의 진행 방식을 만들었다. 아래를 이용하여 WSL을 복사하여 WSL1에서 Hexo를 사용하고, WSL2에서 Docker를 사용하여 여러 시스템들 개발 시 사용하고 있으며, 회사와 개인 컴퓨터 총 3개에서 WSL1와 WSL2 환경을 완전히 분리해서 사용하고 있다. 그리고 지금 이 글을 쓰는 순간까지 몇 달 동안 이게 문제를 일으킨 경우는 한 번도 없다. WSL1과 WSL2를 분리하기 필자의 경우 wsl -l 실행 시 아래와 같이 Ubuntu 1개가 표시된다. (docker는 WSL2용 docker를 표시하는 부분이므로 일단 이번 글에서는 무시하자.) 아래의 명령을 실행하면 현재 사용중인 Default WSL을 파일로 저장할 수 있다. 1wsl.exe --export Ubuntu $env:USERPROFILE\\UbuntuWSL1.tar 다음 사용자 폴더 내에 UbuntuWSL2라는 폴더를 새로 생성하자. (사용자 폴더 &#x3D; c:\\Users\\사용자 로그인명) tar 압축 파일과 폴더를 생성했음을 확인 후 아래의 명령을 실행한다. 1wsl.exe --import UbuntuWSL2 $env:USERPROFILE\\UbuntuWSL2 $env:USERPROFILE\\UbuntuWSL1.tar --version 2 위 명령어의 사용 설명은 아래와 같다. 1wsl.exe --import [WSL에서 보일 목록 이름] $env:USERPROFILE\\[폴더 위치] $env:USERPROFILE\\[압축파일 위치] --version 2 –import는 WSL의 명령어로 WSL 이미지를 불러오는 데에 사용한다. $env는 윈도우 사용자 폴더를 의미한다. USERPROFILE은 해당 윈도우에 로그인해 있는 사용자의 프로필 아이디를 의미한다. –version 2는 새로 생성하는 이미지를 WSL2로 설정하라는 의미이다. –version 1로 하면 WSL1으로 생성한다. 명령이 실행되면 default WSL 이미지를 복제한 UbuntuWSL2라는 WSL 이미지가 생성되어 있어야 한다. 이를 확인해 본다. 12wsl --list --verbosewsl -l -v 위 1~5번까지의 실행 결과는 아래와 같다. 새로 생성한 UbuntuWSL2를 「기본 WSL」로 설정하자.「기본 WSL」이란, Windows Terminal을 실행 후 PowerShell에서 ‘wsl’만 입력 했을 때 들어가지는 이미지를 말한다. 1wsl --set-default UbuntuWSL2 그 후 wsl -l -v 해서 WSL의 세부 목록을 확인하면, UbuntuWSL2가 Version 2로 되어 있고, * 표시로 Default 표시된다. Ubuntu는 Version 1으로 되어 있고 * 표시가 없다. 원래 Ubuntu의 WSL version을 1로 설정한다. 필자의 경우와 다르게 default WSL의 버전이 2로 설정되어 있었던 경우, WSL1으로 변경하여 사용할 수 있다. 1wsl --set-version Ubuntu 1 위와 같이 조치하고 나면 WSL1과 WSL2를 동시에 사용할 수 있다. ① Windows Terminal을 이용하여 ‘wsl’을 입력하면 UbuntuWSL2가 실행되고, ② Windows10에서 Ubuntu 앱을 실행하면 WSL1이 실행된다. 단, 이렇게 분리한 경우 환경이 2개가 생기는 것이므로 시스템 update 및 upgrade도 각각 따로 관리해줘야 한다. 작업 끝났으면 tar 파일은 삭제해도 된다. (혹은 향후 필요에 의해 별도 WSL을 추가할 경우를 위해 보존해도 된다.) NTFS와 WSL의 연동 WSL에서 드라이브 마운트 윈도우즈에서 사용하는 파일 시스템은 NTFS(New Technology File System)라는 이름으로 불린다. WSL이 등장하기 전에는 Windows의 파일 시스템인 NTFS는 Linux 계열의 파일 시스템과 기본적으로 호환되지 않았다. 그래서 Linux와 Windows의 파일을 상호 공유하기 위해서는 별도의 호환 모듈, 프로그램을 설치해서 사용해야 했다. WSL에서는 Linux Bash Shell에서 「&#x2F;mnt&#x2F;드라이브문자&#x2F;경로」의 방식으로 접근할 수 있다. 예를 들면 아래와 같다. 1/mnt/c/workspace/projectname 이를 쉽게 생각하면, 원래 사용자의 Windows10 시스템에 있는 파일을 Linux 시스템을 이용하여 접속할 수 있다는 의미이다. 윈도우에 환경을 설정하기엔 너무 거추장스럽고, 그렇다고 Linux VM을 쓰기엔 불편하고, 그렇다고 Docker에 올리기에도 애매했던 걸 해결해줄 수 있다. (적어도 필자에게는 그런 느낌이었다.) Windows Explorer에서 파일 보기 Windows의 File Explorer에서 네트워크 드라이브를 보면 WSL이 들어와 있다. WSL을 분리한 경우 분리한 모든 WSL이 나타난다. 물론 WSL1과 WSL2를 분리한 경우, 두 시스템의 home 디렉토리 내용은 완전히 다를 수 있다. 현재 진입한 WSL의 버전을 쉽게 알아 보는 방법WSL을 분리해서 사용하다보면 WSL 진입 후 한참 사용하다가 보면 현재 사용하고 있는 버전이 WSL1인지 WSL2인지 헷갈릴 때가 있다. 갑자기 이거 때문에 exit 하고 다시 들어오기도 껄쩍지근하다. 간단히 알아 보려면 Linux Bash Shell에서 Docker를 실행하면 된다. WSL1에서는 docker가 실행되지 않는다. WSL2에서는 Docker가 실행된다. 그래서 Docker 실행 여부로 현재 사용 중인 WSL이 1인지, 2인지 쉽게 알 수 있다. 하지만 귀찮지만 가장 가시적으로 알아 볼 수 있는 방법은 Windows Terminal의 ‘탭이름 변경’이다. 참고 자료 https://docs.microsoft.com/ko-kr/windows/wsl/compare-versions https://webdir.tistory.com/540 https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux http://melonicedlatte.com/2020/07/05/200400.html https://mulmandu17.tistory.com/53 https://wslhub.com/wsl-firststep/advanced/copy-distro/ https://www.lesstif.com/software-architect/wsl-2-windows-subsystem-for-linux-2-89555812.html https://zdnet.co.kr/view/?no=20190508070053","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"WSL2","slug":"WSL2","permalink":"https://xeppetto.github.io/tags/WSL2/"},{"name":"WSL1","slug":"WSL1","permalink":"https://xeppetto.github.io/tags/WSL1/"}]},{"title":"괜히 적어보는 내 프로젝트 이야기","slug":"Xeppetto/My-Projects/01-괜히 적어보는 내 프로젝트 이야기","date":"2021-03-16T07:16:16.000Z","updated":"2021-04-10T05:10:00.000Z","comments":true,"path":"Xeppetto/My-Projects/01-괜히 적어보는 내 프로젝트 이야기/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/My-Projects/01-%EA%B4%9C%ED%9E%88%20%EC%A0%81%EC%96%B4%EB%B3%B4%EB%8A%94%20%EB%82%B4%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EC%9D%B4%EC%95%BC%EA%B8%B0/","excerpt":"","text":"필자의 개인 프로젝트 이야기를 하기에 앞서… 정리해야 했던 필자의 생각들을 부끄럽지만 먼저 남겨본다. 어느 날 문득, 마음 가짐 日新又日新(일신우일신), 날이 갈 수록 새로워진다. 이 고사성어는 대학(大學)이라는 책에 기록된 상(商)나라의 탕왕(湯王)이 스스로가 나태해지거나, 부패할 수 있음을 경계하기 위해 자신이 매일 사용하던 세수대야에 새겨둔 글에서 유래된 고사성어라고 한다. 탕왕은 이런 글귀를 적어 매일 자신을 씻어내듯이 마음도 새로이 했다고 한다. 글귀의 원문은 아래와 같다. 苟日新 日日新 又日新(구일신 일일신 우일신), 진실로 매일 새로워 진다면, 또한 나날이 새로워질 것이다. 이 고사성어는 크게 4가지의 글자로 구성되어 있다. 苟 - 진실로 구日 - 날 일新 - 새로울 신又 - 또 우 이 글귀는 후대에 「日新又日新」으로 전해지고 있다. 어느 날, 문득 어떤 블로그들을 지나가다가 본 아주 오래 전 어떤 왕이 썼다고 전해 내려오는 글귀에 마음이 동해 마음 가짐으로 삼아 가끔 꺼내 보곤한다. 괜히 적어 보는 내 프로젝트 이야기모든 사람이 그렇겠지만 필자에게도 꽤나 많은 상념들이 매일의 일상에 스쳐간다. 그에 대한 이야기들을 좀 내려놓고 싶어서 작성하는 포스팅이다. 그래, 모든 사람에게 언제나 그렇듯이 필자에게도 꽤나 많은 생각들이 일상에 스쳐간다. 언제나 누구에게나 그렇듯, 어떤 생각이 떠오르면 그 생각을 떨쳐버리지 못하고, 또 다른 생각, 또 다른 생각으로 이어진다. 그래서 개인적으로 하루 중에 가장 좋아하는 시간 중 하나가 마음 잡고 한 이삼십분 정도 ‘멍 때리기’ 하는 시간이다. 어떤 생각을 하려고 노력하는 것이 아니라, 생각들을 좀 비우기 위해서 지금 흐르고 있는 생각들을 흘러가게 두는 것이 필자 방식의 ‘멍 때리기’다. 생각을 더 하려고 노력하지도, 그 생각을 떨치려는 시도도 하지 않은채 그냥 갈길 가라고 흐르게 둔다. 일종의 명상인 거다. 그렇게 하다보면 정신이 비워지는 느낌을 받곤 한다. 그렇게 속을 비우다보면, 문득 어느 날 어떤 영감이 무심히 다가와 ‘툭~’ 하고 머리 한 구석에 내려 앉을 때가 있다. 어떤 상황이 있는게 아니고, 정말 문득 그렇게 툭. 길거리를 걷다가, 밥을 먹다가, 친구와 이야기를 하다가, 인터넷에서 쓸데 없는 것들을 뒤적거리다가, 혹은 가끔은 꿈 속에서 누군가 이야기해 줄 때도 있다. 영감이란 건 언제나 그렇게 불현듯 찾아오더라. 필자는 그런 아이디어들을 모두 기록해서 모아 놓는 편이다. 기록하지 못한 아이디어들이 있으면 굳이 찾아와준 그 아이들에게 굉장히 미안해하기도 하고, 스스로 답답함에 스트레스를 받도 한다. 기억력이 그렇게 좋은 편은 아니기 때문에 그냥 기록해 두고 잊어버린다고 표현하는게 더 맞는 표현인거 같기도 하다. 아이디어가 떠오른 상태에서 기록할 때는 굳이 자료를 찾아보거나, 멋지게 정리하려 들지 않는다. 남에게 물어 더 발전시키려고 들지도 않고, 그냥 드롭박스(Dropbox)의 개인 공간에 날짜 별로 떠오른 그 상태 그대로의 날것을 기록해서 모아둔다. 여러 아이디어들이 있다. 업무와 관련된 내용들도 있고, 한 번 해 보고 싶은 프로젝트나 사업 관련 아이들도 있다. 아이디어 종류에 따라 필자의 행동 패턴도 다양해진다. 고민만 하다가 끝나는 경우도 있고, 구체적으로 기획을 만들어본 경우도 있고, 기획을 만들기 보단 일단 실행에 옮기는 경우도 있고, 사업하시는 분들을 만나 가능성에 대해 묻는 경우도 있고, 필자 혼자 할 수 없는 일이라고 생각해서 사람을 모으다가 실패한 경우도 있고, 프로젝트를 해 보겠다고 사람을 모았으나 참여도가 저조하여 서로를 향한 비난으로 비극적 결말을 맺은 경우도 있다. 업무와 관련된 내용들은 회사에서 이루어 낸 경우도 있고, 개인적으로 혼자 수행해서 이룬 적도 있고, 팀으로 움직이는 경우도 많았고, 필자 개인의 아이덴티티를 숨기고 인터넷 상에서 특정 「부캐(또 다른 자아, Second identity, Alternate Character)」를 생성하여 활동하는 등 다양한 경우가 있었다. 수 많은 아이디어들을 내놓고, 수 많은 실패와 작은 성공들을 경험하며 깨달은 건 하나다. 결론은 “매일 매일, 스스로 정진하는 것”. 내가 대기업 회장이 아닌 이상은 남들에게 해 보라고 시킬 수는 없는 노릇이니, 그렇게 스스로 정진하는 행위 외 자신의 아이디어들을 구체화해 볼 방법은 없더라. 어쩌면 그래서 「일신우일신(日新又日新)」이라는 글귀를 그냥 지나치지 못하고 내 마음이 그 글귀에 사로잡혀 버린게 아닐까 싶다. 앞으로 개재할 “내 프로젝트들”에 대한 이야기는 「日新又日新」이라는 분류로 기록하려 한다. 어찌보면 읽는 사람 입장에서는 배움(링크 예정)과도 비슷한 성격이지만, 「日新又日新」에서는 필자가 실제로 수행 이상까지 갔던, 그래서 성공과 실패의 결과가 있는 내용들 위주로 기록하려 한다. 아직 아이디어 단계인 녀석 그냥 그 상태로 끝나게 되더라도, 그냥 그대로 잊혀지는 걸로… 괜히 시간을 허비했던 관심거리괜히 시간을 허비했던 재밋는 점은 인터넷에 올라와 있는 위 고사성어에 대해 검색하다보니 블로그들에는 “구”라는 글자를 「茍」라고 해 두었는데, 이는 “극”이라는 의미의 글자로 검색되며 「苟(진실로 구)」와 다른 글자였다. 실제 자료를 쓰면서 맞는지 확인하는 과정에서 발견했다. 인터넷상에 있는 어떤 사전에는 두 개가 같은 글자라고 하고, 어떤 사전에는 「茍」은 검색이 안되고 「苟」만 검색이 된다. 어릴 때 한자를 좀 배웠지만, 이런 경우는 뭐가 문제인지 전혀 모르겠다. “두 개가 대체 뭐가 다른건가?” 싶어서 한참을 고민하다가 글자 크기를 조금 키워 보았다. 茍&nbsp;&nbsp; &nbsp;&nbsp;苟 빠를 극&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;진실로 구 오오… 이런… 다르다! 왜지? 왜 다른거지? 음… 하지만 획수를 유추해보건데 두 개는 같은 글자인거 같다. 아마 같은 의미인데, 브라우저에서 표현하는 문자-인코딩이 다른게 아닐까 싶다. 그래서 다른 폰트가 적용되다보니 다르게 표시되는게 아닌가 싶다. 하지만, 한자를 굳이 심각히 다룰 이유는 없으므로 여기까지만 고민해 보는 걸로. 끝. 참고 자료1. 이야기 참고https://m.blog.naver.com/greatkbs52/220984862846https://brunch.co.kr/@trizdoctor/115https://dailyevent.tistory.com/205http://www.doctorstimes.com/news/articleView.html?idxno=196405https://www.sedaily.com/NewsVIew/1RUHMGU4SQhttps://77spal.tistory.com/140 2. 그림 출처https://m.blog.naver.com/bjgim21/220651076194https://language.chinadaily.com.cn/2017xuexi/2017-06/23/content_29861954.htmhttps://pixabay.com/images/id-2214532/https://pixabay.com/images/id-2009484/카카오톡 무지 - 카카오톡 기본 이모티콘","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"日新又日新","slug":"X의話/日新又日新","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%E6%97%A5%E6%96%B0%E5%8F%88%E6%97%A5%E6%96%B0/"}],"tags":[{"name":"자기계발","slug":"자기계발","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C/"},{"name":"프로젝트","slug":"프로젝트","permalink":"https://xeppetto.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/"},{"name":"사업","slug":"사업","permalink":"https://xeppetto.github.io/tags/%EC%82%AC%EC%97%85/"}]},{"title":"[Docker] WSL2와 Docker 설치하기","slug":"소프트웨어/WSL-and-Docker/11-Docker-installation-on-WSL2","date":"2021-03-14T22:07:30.000Z","updated":"2021-04-08T04:13:30.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/11-Docker-installation-on-WSL2/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/11-Docker-installation-on-WSL2/","excerpt":"","text":"목차 가정사항 알림 Docker 설치하기 Docker 설정 확인하기 Docker 실행 시 WSL2 커널 오류가 발생하는 경우법 WSL에 진입하여 Docker를 실행 시 WSL1 Distro 관련 오류가 나타나는 경우 참고 자료 가정사항 알림이번 포스팅에서는 이전에 포스팅한 내용인 WSL 설치 및 관련한 여러가지 설정을 모두 완료했다는 가정하에 설명한다. Docker 설치하기 Docker를 WSL2에 설치하는 방법에 대해서는 Docker 공식 매뉴얼에서 볼 수 있다. 해당 페이지로 이동하여 먼저 ① 구동을 위한 최소 사양을 확인하고, ② 파일을 다운로드 받자. 다운로드한 파일을 설치하면 아래와 같은 화면이 나타난다. 설치가 완료되면 Windows를 Logout해야 한다고 나온다. 일단 작업 중이던 모든 내용들은 먼저 모두 저장해 두자. 로그아웃 후 다시 로그인하면 이제 Docker가 실행된다. Docker가 완전히 실행될 때까지 로딩을 기다리자. Windows Terminal을 실행 후 WSL을 입력하여 진입 후 Docker를 실행해 보자. Docker 실행 시 start를 누르면 tutorial이 나타나는데, 따라 해보고 싶으면 해봐도 되고 그냥 next 눌러서 쭉 스킵해도 된다. Docker 설정 확인하기 필자의 취미 생활 컴퓨터에서는 매번 개발만 하지는 않는다. 그러니, 개발하려고 마음을 먹었을 시에만 docker가 필요할 뿐 매번 kubernetes 환경 사용하는게 아니므로, 설정 &gt; Start Docker Desktop when you log in의 체크를 해제했다. 이러면 시스템 시작 시 Docker가 자동실행되지 않는다. 설정에서 Use the WSL 2 based engine 옵션에 체크되어 있는 지 반드시 확인한다. 하단의 Apply &amp; Restart를 눌러 적용한다. Docker 실행 시 WSL2 커널 오류가 발생하는 경우필자는 필자 자신이 WSL 설치 매뉴얼을 작성해 놓고도 거의 매번 빼먹는 Step이 한 단계있어 이 화면을 자주 본다. 이 경우 WSL 설치 시 아래의 Windows10용 Linux Kernel Update Package를 설치를 빼먹고 건너 뛰어서 그렇다. Windows 10에 Linux용 Windows 하위 시스템 설치 가이드로 가서 Linux Kernel Update Package를 다운로드 후 설치하자. Linux Kernel 지원 패키지 설치 후 다시 진행하면 WSL과 Docker가 정상작동한다. WSL에 진입하여 Docker를 실행 시 WSL1 Distro 관련 오류가 나타나는 경우WSL에 진입하여 Docker 실행 시 아래와 같이 WSL 1 Distro에서는 지원하지 않는다는 오류메시지가 나타나는 경우가 있다. WSL1은 정식으로 Docker를 지원하지 않기 때문이다. 이런 경우 WSL 설치 시 뭔가를 빼먹어서 WSL2로 업그레이드 되지 않았거나, 혹은 WSL1과 WSL2 분리 중에 실수로 Default WSL이 WSL 1으로 되어 있는 경우다. 아래와 같이 wsl -l -v로 verbose 모드로 보면 Default WSL이 1으로 설정되어 있어 나타나는 현상이다. 이런 경우 wsl -d {WSL2이름}으로 WSL2를 실행시켜주거나, default WSL을 WSL2로 변경해 주면 된다. ※ 참고 : WSL1에서 Docker를 실행시켜야 하는 경우는 Jung-Hyun Nam님이 작성하신「WSL v1에서 Native Docker 실행하기」 포스팅의 내용을 확인하자. 참고 자료 https://docs.docker.com/docker-for-windows/install/ https://www.44bits.io/ko/post/wsl2-install-and-basic-usage https://hub.docker.com/editions/community/docker-ce-desktop-windows https://blog.wslhub.com/wsl%EC%97%90%EC%84%9C-native-docker-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0-ff75b1627a87","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"}]},{"title":"[WSL] WSL 설치하기","slug":"소프트웨어/WSL-and-Docker/04-WSL-Installation","date":"2021-03-13T13:00:00.000Z","updated":"2021-05-25T06:15:15.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/04-WSL-Installation/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/04-WSL-Installation/","excerpt":"","text":"목차 조금 긴 WSL2 개요와 필자의 소회 WSL 설치 WSL 진입 및 진출 명령 설치한 Linux의 버전 알아보기 WSL 실행 시 Zombie Process가 있다고 나타나는 경우 WSL1과 WSL2에는 다소 차이점이 존재한다. 본 블로그의 글들 대부분에서는 WSL2을 기반으로 설명하고 있다. WSL 설치의 공식 문서이 글은 2021년 2월~5월 기준으로 작성하고 있으며, 2021년 5월에 퇴고작업을 마쳤다. 그러므로, 기간이 오래 지나면 본 글과 다른 방식으로 설치 과정이 변경되었을 수 있으므로, 시간이 지나 이 글의 효력이 없어지는 경우 새로이 정보를 찾아보실 수 있도록 공식 사이트 위주로 작성하려 노력하였다. WSL 설치의 공식 문서는 Microsoft에서 제공하는 Windows 10에 Linux용 Windows 하위 시스템 설치 가이드를 따라하면 된다. 위 문서가 항상 공식문서이며 회신 버전의 내용을 담고 있을 가능성이 높으므로, 아래 내용 중 잘 되지 않는 부분이 있다면 해당 링크를 참고하시기 바란다. 본 글의 내용은 참고만 하고, 모든 WSL 관련 기술문서는 Microsoft 공식 문서를 직접 확인하자. WSL 설치 먼저 Windows10 실행란에 ‘winver’라고 입력하여 윈도우 버전을 확인하자. (1) WSL2는 Windows10에서만 실행되며, 아래 업데이트 이상을 보유하고 있어야만 사용할 수 있다. x64 시스템의 경우: 버전 1903 이상, 빌드 18362 이상 ARM64 시스템의 경우: 버전 2004 이상, 빌드 19041 이상 (2) winver로 확인한 업데이트가 위 업데이트보다 낮다면, 먼저 윈도우 업데이트부터 진행하자. Terminal 설치 (1) WSL을 사용하기 위해서는 새로운 버전의 Windows Terminal을 설치해야 한다. (2) Windows Store에서 “Windows Terminal”을 검색하고, 설치한다. WSL 설치 (1) 관리자 권한으로 Terminal을 실행해야 하며, Power Shell에서 실행해야 한다. (2) 관리자 권한으로 실행된 PowerShell에서 아래 두 줄을 차례대로 실행한다. 12dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestartdism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart (3) 실행한 결과는 대충 아래와 같이 표시되면 된다. WSL 설치가 완료되면 Windows를 다시 시작하기 하여 시스템을 재-시작해야 한다. Windows10용 Linux Kernel Update Package를 설치한다. Windows 10에 Linux용 Windows 하위 시스템 설치 가이드로 가서 Linux Kernel Update Package를 다운로드 후 설치하자. Ubuntu 설치 및 실행 (1) 다시 Windows Store로 가서 “Ubuntu”를 검색한다. 검색 결과는 여러개가 표시될 수 있는데, 버전이 붙지 않은 앱을 선택하자. (사실 아무거나 선택해도 상관 없지만, WSL 사용에 익숙해 질 때까지는 버전이 붙은 앱은 일단 무시하자.) (2) Ubuntu를 다운로드하고 실행하자. Ubuntu 초기 설정 (1) Ubuntu 앱을 최초 실행 시 아래와 같이 계정 이름과 암호를 설정하라고 표시된다. (2) 계정과 암호를 설정한 후, Ubuntu의 Bash Shell이 실행되면 제일 처음 할 일은 아래의 내용이다. 1sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt dist-upgrade Ubuntu 시스템 업데이트 명령을 실행하여 시스템 업데이트가 종료될때까지 기다린다. (시스템을 다시 시작하지는 않아도 된다.) Ubuntu 앱에서 빠져 나오고, WSL로 진입하기 (1) 시스템 업데이트가 완료되면 ‘exit’를 입력 해서 Ubuntu 앱에서 빠져나온다. 1exit (2) Windows Terminal을 실행 한 후 ‘wsl’ 이라고 입력한다. (3) Bash shell 상태에서 ‘exit’를 입력해서 wsl에서 빠져나온다. (4) 이후 PowerShell 상태에서 ‘wsl -l’ 그리고 ‘wsl -l -v’를 입력한다. 필자와 동일한 List가 출력되지는 않을 것이다. 필자는 필요에 의해 WSL1과 WSL2를 동시에 사용하고 있고, 이미 Docker도 설치했기 때문에 위와 같이 출력된다. WSL 진입 및 진출 명령WSL로 진입하는 명령은 PowerShell 상태에서 wsl을 입력하는 것이고, wsl에서 나오는 방법은 Bash Shell 상태에서 exit을 입력하면 된다. 12wslexit 설치한 Linux의 버전 알아보기설치한 리눅스의 버전을 알아 보는 방법은 아래와 같다. WSL을 실행한 후 Bash에서 아래와 같이 입력하면 현재 실행 중인 WSL Linux의 버전을 확인할 수 있다. 1lsb_release -a 아래는 2021년 4월 17일 기준, 이 글의 퇴고 작업을 진행하며 실제로 실행해본 필자의 WSL 버전이다. ※참고 : Ubuntu를 사용한다면 시스템 켜고 항상 업데이트 현황을 잘 보자. apt update를 생활화하자. WSL 실행 시 Zombie Process가 있다고 나타나는 경우WSL 실행 시 아래와 같이 Zombie Process가 있다고 나타나는 경우가 있다. 이런 경우 아래의 명령어를 입력하여 Zombie Process들을 죽일 수 있다. 필자는 아예 runKillZombieProcess.sh 파일을 실행 가능하게 만들어서 저장해 버렸다. 1sudo kill -HUP $(ps -A -ostat, ppid | grep -e &#x27;[zZ]&#x27; | awk &#x27;&#123; print #2 &#125;&#x27;) Zombie Process에 대해서는 굳이 이 포스팅에서 다루어야할 내용이 아니므로 인터넷 검색을 활용하자. 참고 자료 https://docs.microsoft.com/ko-kr/windows/wsl/install-win10 https://docs.microsoft.com/ko-kr/windows/wsl/faq https://www.infoworld.com/article/3052563/why-did-microsoft-make-windows-10-run-linux.html https://webdir.tistory.com/540 https://www.44bits.io/ko/post/wsl2-install-and-basic-usage","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"}]},{"title":"[WSL] WSL은 무엇인가?","slug":"소프트웨어/WSL-and-Docker/03-What-is-WSL","date":"2021-03-12T13:00:00.000Z","updated":"2021-05-22T05:14:14.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/03-What-is-WSL/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/03-What-is-WSL/","excerpt":"","text":"WSL은 무엇인가? - WSL2 개요와 필자의 소회일반 사용자들은 WSL이 뭔가 싶기도 할 거다. WSL은 Windows Sub-system for Linux의 약자이다. 한글로는 ‘윈도우의 하위 시스템으로 리눅스 사용’ 정도로 표기할 수 있겠다. WSL을 사용하면 기존의 VM(Virtual Machine)을 실행하며 발생하는 CPU와 Memory의 문제나 복잡한 네트워크 설정 없이도 Windows10 혹은 Windows Server 환경에서 Linux를 사용할 수 있다. WSL은 Windows에서 GNU&#x2F;Linux 계열의 실행 파일 표준인 ELF(Executable and Linkable Format) binary 파일들을 실행할 수 있게 해 준다. 즉, Windows 운영 체제에서 Linux 실행파일들을 함께 사용할 수 있도록 호환성을 추가하는 아키텍처라 할 수 있다. 지난 번 글에서 필자의 OS 경험담에서 살짝 언급한 바와 같이 Microsoft는 2020년 5월 Windows10의 업데이트에서 WSL(Windows Subsystem for Linux)의 2번째 버전을 발표하였다. WSL의 첫 번 째 버전은 고급 개발자들용으로만 공개되었던 점에 비해 이번에는 범용 개발에 쓰일 수 있도록 발표되었다는 점이 조금 다르다. Microsoft 공식 문서 : Linux용 Windows 하위 시스템이란? Microsoft의 Windows는 오랫동안 전 세계 일반 사용자들의 운영체제로 오랫동안 사랑 받아 왔다. 컴퓨터를 잘 알지 못해도 쉽게 사용할 수 있는 사용자 환경은 컴퓨터 사용자의 저변을 넓히는데 일조해왔다. 1990년 즈음 Microsoft가 Windows3 버전을 공개해 필자가 처음 이 기술을 접했을 때는 MS-DOS라는 운영체제 위에서 작동되었다. 그리고, 이 MS-DOS라는 운영체제는 Unix의 한 게열이다. (Unix가 무엇인가에 대해서는 인터넷 검색을 바란다.) MS-DOS는 그 발전 과정에서 실행-파일(binary)의 실행 방식, 파일 시스템 관리 등 또 다른 Unix 시스템의 파생 운영체제인 Linux와 다른 별개의 사용환경을 제공해서 상호 호환성이 낮았다. 그 외 자세한 내용은 MS-DOS의 기능과 역사에 대해서는 무척 잘 정리된 블로그를 찾았으므로 링크의 내용을 참고하자. 과거, 네트워크가 발전하지 못하여 사용자의 PC에서 작동하던 프로그램이 강세이던 시절에는 윈도우가 강세였다. 이후 모바일의 시대가 되고 네트워크 기술이 고도화되면서 분산환경이 당연시 되었다. 특히 서버 환경이 중요해진 시대에는 값비싼 윈도우 서버로 서비스를 운영하는 것은 무리였고, 무료이거나 혹은 무료에 가까운 Linux 운영체제로 서비스를 운영해야만 한다. 서비스를 운영하는 쪽의 환경이 그렇다면 당연히 그 쪽의 개발 도구들이 발전하는 것이고, 수 많은 웹서비스를 제공하는 WAS(Web Application Server)와 Framework들은 Linux에서 작동하고 있다. 대부분의 컴퓨터 사용자들은 업무를 수행하거나 게임을 플레이하기 위해 사용하고 있으며, 여전히 게임은 클라이언트 기반이기 때문에 윈도우 게임 시장은 모바일 그리고 콘솔시장과 더불어 꽤나 크다. The image’s original author : Copyright © oneearthrising.com 서비스를 이용만 하는 사용자와 서비스를 제작하는 개발자는 따로 공존할 수 밖에 없다. 자본주의 산업 체계에서 수요와 공급은 동일 선상에서 이루어지기 매우 어렵기 때문이다. 그리고 그렇다보니 2021년에는 서비스를 사용하는 일반 사용자와 개발자 간의 이해의 깊이 차이는 점점 벌어지고 있고, 이는 그냥 학교에서 코딩 수업한다고 메워질 건 아니라 생각이 든다. 실제 예로, 필자는 2021년 현재 Low Coding 도구의 Product Manager이자, Programmer이자, 교육 컨설팅 등 여러 직무를 수행하고 있다. Low Coding 도구의 주요 타겟층은 ‘소프트웨어는 어느 정도 알지만 개발은 못 하는 사람’들을 위주로 하는데, 그런 고객들에게 소프트웨어와 네트워크 관련 설명을 할 때마다 ‘PC에서 작동하는 클라이언트와 네트워크에서 작동하는 서비스의 차이’에 대해 일반 사람들도 알아듣기 쉽게 설명해야 하는 중대한 미션을 짊어지곤한다. 아무리 경험이 많아도 ‘소프트웨어를 사용만 해 본 사람’과 ‘소프트웨어를 만들어본 사람’의 이해 차이가 너무 극단적으로 벌어지고 있다고 느껴진다. WSL2는 어쩌면 그런 어려운 웹-어플리케이션으로의 진입 장벽을 조금 더 낮춰주는 역할이 되지 않을까 싶다. Shell 기반으로 작동하는 프로그램들은 내부의 기술을 어느 정도 이해하는 사람들은 금방 알아차릴 수 있으나, 내부 동작을 이해하지 못하는 사람들은 소위 ‘외워 쓴다’ 정도의 수준 이상으로 발전하기 어렵다. 그런 의미에서 WSL 기술력의 등장과 GUI를 제공하는 Docker 지원 등은 일반 사용자들에게 서버 서비스의 작동 방식을 조금 더 쉽게 접할 수 있도록 해주지 않을까 (하고 필자는) 기대해 본다. WSL이 뭐가 그리 좋은가?“WSL이 뭐가 그리 좋은가?”라고 누군가 필자에게 묻는다면 당연히 “Windows10에서 Linux 파일들이 잘 작동해서요~”가 답이 되겠다. Microsoft에서 발표한 WSL은 Windows 운영체제에서 경량화된 가상화 기술을 사용하여 Linux 운영 체제를 구동할 수 있도록 해 주는 기술이다. 커널(Kernel)이라 부르는 Windows의 내부 시스템 기술을 이용하여 Linux을 구동시킬 수 있으며, 경량화 되었기 때문에 심지어 Windows10 Home Edition에서도 작동한다. 과거에 VM을 사용하기 위한 여러가지 기술 제약이 있었던 점을 떠올리면 이런 경량화 기술은 (프로그래머 입장에서는) 대단한 발전이라 말할 수 있다. 아마 위 질문에 대한 정상적인 답변은 「WSL은 윈도우 10에서 Linux의 ELF 64를 실행할 수 있는 덕분에 속도는 Virtual Machine 보다 훨씬 빠르고, 재부팅을 해야 할 필요가 없다. 또한 WSL을 사용할 Windows 컴퓨터의 CPU와 Memory 속도만 확보하면 되며, 별도의 서버를 구성하기 위해 비싼 HW 가격을 고려하거나, 속도가 느린 시스템을 사용하느라 고통 받을 필요가 없다.」 정도로 하면 될 듯 하다. 조금 더 기술적으로 들어가자면… WSL의 개념은 기본적으로 최근의 Cloud 개념들과 비슷하여 가까우며, 과거 방식의 VM(Virtual Machine) 개념과는 살짝 거리가 멀다. 가상화(Virtualization)이라는 개념은 같으나, 과거 VM 방식대로 운영체제 하나를 통째로 복사해서 작동시키는 방식이 아니라, 필요한 부분만 별도로 실행시키는 방식을 사용하고 있다. 이를 「경량화(Light-Weight)」 방식이라고 표현한다. 이런 경량화 기술이 나오기 전에는 Linux 등 다른 운영체제를 사용하기 위해 Windows 위에서 VM(Virtual Machinge)을 설치하여 사용하거나, Linux 전용 노트북을 구입하거나, Boot 영역을 해킹해서 2개 이상의 운영체제를 사용하곤 했다. 혹은 Macintosh를 사용하는 경우도 많았고, 한국의 유명 포털 사이트들은 (사내 보안 문제 등으로) 사내 업무 시스템이 모두 Macintosh 기준으로 되어 있는 경우도 있다. 사실 필자를 비롯한 일반적인 경력 좀 있는 개발자들에겐 이게 상관 없다. 일상 업무를 수행하다 보면 개발 환경에 따라 운영체제를 다양하게 사용할 수 밖에 없기 때문에 대부분의 소프트웨어 개발자들은 특정 운영체제에 고립되어 있지 않다. 소프트웨어 개발에 참여하는 사람들은 Windows든 MacOS든 Linux의 어떤 종류든, 다양하게 사용할 수 밖에 없기 때문에 프로젝트 사정상, 회사 사정상 운영 체제를 다시 변경할 이유가 있더라도 1~2주 정도만 사용하면 금방 익숙해진다. 필자의 경우, 실제로도 업무용은 Windows, 취미 생활을 위한 운영 체제는 MacOS를 사용하고 있기도 하다. 그렇지만 소프트웨어 개발에 익숙하지 않은 대부분의 일반 사람들은 Windows 외 다른 운영 체제를 잘 이해하지 못한다. 그러니, 「Windows에서 작동하는 Linux 시스템이라는 점」만 해도 WSL은 훌륭한 개념이라 할 수 있겠다. 그러니 Windows 사용자라면 이제 그만 Linux에 대한 거부감을 떨쳐버리고 순순히 WSL을 사용하시면 되겠다. 필자는 본 블로그를 JAM Stack - Hexo를 구성해서 사용하고 있는데, Windows에서 작업 시 Hexo의 폴더는 윈도우 내의 Directory에 존재하지만, 그 모든 환경 설정 및 구동은 WSL에서 Bash Shell에서 작업한다. 개발 작업이 끝나고 WSL을 종료하면 Hexo의 모든 개발 환경은 메모리에서 사라져버리므로 깔끔하고 마음 편하게 다음 작업으로 넘어갈 수 있다. 기존에를 서버 환경을 설정하면 지저분하게 프로세스가 남아 컴퓨터 사용에 방해되던 불편함이 싹~ 사라져 버려 개발환경 설정&#x2F;관리 시 WSL과 Docker만 고려하면 되어서 몸과 마음이 너무나도 평안하고 상쾌하다. WSL Architecture본 블로그의 WSL와 Docker 관련 내용들 대부분은 WSL2를 사용함을 가정하여 설명되어 있다. 그러니 그 이야기를 진행하기 전에 WSL1은 대체 뭘까를 한 번 짚어보려 한다. 아참, 미리 말해둬야 겠다. 누군가 “굳이 WSL1을 따로 알아야 하는가?” 라고 질문한다면, 당연히 답은 “절대 No” 이다. 정확히는 “굳이?” 정도일 듯 하다. 이후 WSL Architecture에서 설명할 내용은 필자처럼 뭔가 원초적인 내용을 이해하지 못하면 살짝 짜증이 올라오며 알아 내야면 속이 시원하고, 소화가 잘되며, 꿀잠을 자는 사람들을 위한 내용일 뿐이다. 몰라도 사용하는데 전혀 상관이 없는 내용이다. 자, WSL2, 여기에서 숫자 「2」는 두 번째 버전이라는 의미이다. 첫 번째 버전은 완전 Core한 Windows 소프트웨어 개발자들의 관심을 잠깐 받은 후 널리 알려지지 않고 휙~ 지나간 느낌이 있지만, WSL1은 WSL2와 다르게 NTFS(윈도우 파일 시스템) 호환성을 높이 지원한다. 관련한 이야기는 나중에 다른 글에서 다시 다루려 한다. 일단, 필자 같은 집착꾼이 아니라면 딱히 관심 가지지 않을 구조에 대해 한 번 짚어 본다. 위 그림을 보면 WSL1과 WSL2의 대략적인 차이를 볼 수 있다. WSL1에서는 Windows에서 Linux 시스템을 WSL이 Emulating하여 처리하는 방식이었다. 모든 사용자의 명령은 Windows NT Kernel이 WSL을 통해 Linux-compatible kernel interface와 통신 후 Linux interface는 다시 결과를 WSL을 통해 윈도우 시스템 명령으로 번역해서 돌려준 후 사용자들에게 결과를 보여주는 방식이었다. 이 때문에 WSL1에서는 모든 Linux의 명령을 처리하는 데에 한계가 존재했으며, 실행되는 명령들도 처리 속도가 느렸다. 즉, 이 경우에는 실제 Linux를 사용한다기 보다 Linux를 가상화하여 결과를 보여주는 방식이었고, 동시에 Linux Kernel에 특화된 명령들은 WSL1에서는 실행할 수 없었다. 그에 비해 WSL2에는 실제 Linux Kernel이 탑재되어 있다. 이 의미인 즉, Windows10 내에서 모든 Linux의 시스템 명령을 처리할 수 있게 되었다는 의미이다. 위 그림을 보면 Windows 사용자가 「경량화된 Linux VM 도구(Light-Weight Linux Utility Virtual Machine」에 명령 신호를 보내면, 이 Linux VM 내부에 EFL 64 Linux Binary를 구동하기 위한 아키텍처를 가지고 있어 Linux UserMode에서 Linux Kernel로 신호를 보내 작동하도록 되어 있다. 같은 Hyper-V를 이용하더라도 Windows UserMode와 Linux UserMode를 병렬로 사용할 수 있기 때문에 인터페이스의 이슈가 줄어들고 처리 속도가 향상된다. WSL2는 기본적으로 WSL1의 단점들을 개선하는 측면에서 발전이 있었다. 추가로, 실제 개발 환경을 꾸려 사용하는 프로그래머의 입장에서 WSL1과 WSL2의 가장 큰 차이 2개는 ① Linux 시스템 명령의 실행 속도, 그리고 ② Docker의 지원이다. 가상 시스템 속도의 향상은 WSL1에서의 WSL NE-Linux 가상화와 달리, WSL2에서는 Windows UserMode에서 WSL을 호출하여 직접 Linux Bash Shell에서 UserMode를 활용할 수 있게 되었고, 탑재된 Linux Kernel을 병렬로 사용할 수 있어서 가능했다. 이런 아키텍쳐 변화는 Windows에서 Hpyer-V를 활용하여 Linux 시스템을 가상화할 때 CPU와 Memory 등 리소스 사용을 적게 하는 장점도 있다. 리소스 사용량이 적어지니 속도는 당연히 개선된다. Windows Docker는 과거부터 존재했었지만 속도가 느리고 무거운 단점이 있었으며, Docker는 Windows 기반으로 설계된 애플리케이션이 아니다보니 추가로 설정해야 하는 내용들이 많아 붎현했다. WSL2에서 Docker를 정식 지원함으로 인해 속도가 개선되고 훨씬 편리하게 사용할 수 있게 되었다. WSL2와 Docker에 관련한 이야기는 이후 Docker에 대한 개요 설명 시 진행할까 한다. WSL2에도 단점은 있는데 WSL1에서는 Windows와 Linux간 Interface 역할을 직접 하기 때문에 NTFS(NT File System) 내의 파일을 Linux에서 빠르게 mount하고 사용이 가능했지만, WSL2에서는 Hyper-V를 통해 파일 시스템의 내용을 공유하게 되므로 SSD를 사용해도 Linux의 mount 및 활용 속도가 느려진다. (그래서 필자는 WSL1과 WSL2를 동시에 사용한다.) 또한, WSL2 사용 시에는 해당 컴퓨터에서 ‘VM Ware’나 ‘Virtual Box’를 함께 사용할 수 없다. 이런 가상화 프로그램들은 Hyper-V 가상화 아키텍처를 사용하기 때문에 WSL2와 동시 사용할 수 없다. 아무튼, 우리는 2021년 현재 WSL2를 사용하면 된다는 게 결론이다. 참고 자료 https://docs.microsoft.com/ko-kr/windows/wsl/compare-versions https://www.docker.com/blog/new-docker-desktop-wsl2-backend/ https://code.visualstudio.com/blogs/2020/03/02/docker-in-wsl2 https://www.youtube.com/watch?v=lwhMThePdIo https://shuod.github.io/post/setup-wsl2-windows-subsystem-linux-2-in-windows-10/ https://docs.microsoft.com/ko-kr/windows/wsl/faq https://www.infoworld.com/article/3052563/why-did-microsoft-make-windows-10-run-linux.html https://webdir.tistory.com/540 https://mulmandu17.tistory.com/53 https://github.com/tolu/markdown/blob/master/2019-11-wsl.md http://melonicedlatte.com/2020/07/05/200400.html https://evandde.github.io/wsl/ https://zdnet.co.kr/view/?no=20190520112101 https://webisfree.com/2020-09-17/윈도우-하위-리눅스-wsl-2-업데이트-이-후-차이점-및-장점 https://better-tomorrow.tistory.com/entry/WSL2-알아보기 https://zdnet.co.kr/view/?no=20190520112101 그림 출처 https://polach.me/transform-any-linux-docker-image-to-wsl2-distribution-by-powershell-easily/ https://oneearthrising.com/news/pc-vs-console-vs-mobile-games-part-1 https://ksjm0720.tistory.com/10","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"WSL2","slug":"WSL2","permalink":"https://xeppetto.github.io/tags/WSL2/"},{"name":"Installation","slug":"Installation","permalink":"https://xeppetto.github.io/tags/Installation/"},{"name":"WSL1","slug":"WSL1","permalink":"https://xeppetto.github.io/tags/WSL1/"}]},{"title":"[WSL] Docker 테스트 환경을 정리하기로 한 이야기","slug":"소프트웨어/WSL-and-Docker/02-The-Reson-of-Making-Test-Environment","date":"2021-03-09T18:10:00.000Z","updated":"2021-06-20T10:19:19.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/02-The-Reson-of-Making-Test-Environment/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/02-The-Reson-of-Making-Test-Environment/","excerpt":"","text":"WSL과 Docker 연재 및 정리를 시작하며…필자는 오랜 시간 동안 Software Test Specialist, 그리고 Quality Assurance라는 정체성으로 살아왔다. 이 정체성으로 살아가다보면 그 업을 수행하는 자체로 여러 가지 문제점들이 존재하는데, 그 중 가장 대표적인 부분이 바로 이 두 업(Testing과 QA)의 차이를 이해를 못하는 사람들이 많다는 점이다. 업의 정체성에 대해 논의하는 과정이 빠져 있던 채로 누군가 업계를 이끌어왔고, 그대로 확장되었고, 그 상태로 재논의 하려는 누군가들을… 정체를 특정할 수 없는 누군가들이 의견들을 짓밟아 온 흔적들을 자주 발견하곤 한다. 그래서 필자는 주변 동료들과 팀을 결성하여 이런 프로젝트 블로그 → 소프트웨어 테스팅 참고서를 작성하고 있기도 하다. 특정 업계 종사자들이 각자의 회사에서 정치적인 관점 혹은 조직 내부의 포지션 구축에 어려움을 겪고 있어 정체성을 논의하는 장이 이루어지기 힘들다면, 그에 대해 충분히 고민한 사람들이 이를 정의하는 새로운 프로젝트를 수행하고 있는 거다. 바로 이 지점이 이 글을 쓰고 있는 이유, 다시 블로그를 재 정비하기로 한 이유, 그리고 여러 가지 글들을 카테고리로 나누어 정리하려는 이유이기도 한다. 정체성 논의가 정상적으로 이루어지지 못했다보니 「Tester」들은 업계 진입 후 정상적인 가르침을 받거나 이끌어줄 구심점을 찾기 어려워 「Test Export」가 되기 어려운 문제점이 있다. 그래서 어떤 도구를 사용할 때 ‘테스트 업무 목적’외 응용 방법을 찾지 못하는 경우가 많고, 이런 결과로 다시 ‘수동 테스팅(Manual Testing)’으로 귀환하여 결국 사람 손을 타는 테스팅 기법들이 만연하게 되는 문제점을 해결해야 하기 때문이다. 사실 이걸 필자가 할 필요는 없었다. 더 잘 하시는 분들이 했으면 됐다. 그래서 손 놓고 몇 년 간 지켜봤는데 안되더라. 그래서 깨달았다. 이건 Programming과 Testing을 전반적으로 모두 이해하는 사람이 해야 할 수 있다는 것을. 그래서 결국 필자가 해야만 하는 일이라는 어떤 사명감 같은게 생겼다. 그래서 이제부터 필자는 가능한 많은, 다양한 테스트 환경 구축에 대한 내용들을 블로그에 남겨둘 예정이다. 뜻이 있는 자는 찾을 것이고, 간절히 찾는 자는 이를 수 있을 것이라 믿기에… 참고본 글과 블로그에서 필자는 Testing과 QA를 구분해서 설명할 것이다. QA !&#x3D; Testing 이에 대한 긴 글은 이미 기본적인 내용 정리는 마쳤으나, 전체적인 관점에서 오해 없게 하기 위해 기반 지식들을 다시 정리하여 하나의 묶음으로 공개할 예정이다. 해당 글들의 공개에는 몇 년이 걸릴 수도 있다. 언제 공개할 지 모르겠지만, QA 및 Testing 업계 종사 인원들 대부분이 ‘이 업계는 가망이 없어’라며 울분을 성토하기 전에 공개할 예정이다. 그림 출처 : https://medium.com/@nabeelravians/what-is-software-quality-assurance-and-why-it-is-important-43a54df47f21 테스트 전문가는 테스트 환경을 만들 수 있어야 한다.1. 뭘 알아야 전문가일까?어느 분야든 ‘전문가’가 되기 위해서는 해당 분야에 대해 전문적으로 알고 있어야지, 자기가 하는 일만 잘 하고, 잘 이해한다고 주변 사람들이 그를 ‘전문 지식을 갖춘 사람’으로 인정해 주지 않는다. 동일 선상에서 해석해 보면, 누구든 ‘소프트웨어 테스팅 전문가(Software Testing Expert)’가 되기 위해서는 ① 소프트웨어, 그 소프트웨어를 만드는 방법인 ② 프로그래밍, 소프트웨어가 잘 만들어졌는지 확인하는 작업인 ③ 테스팅을 이해하고 있어야 한다. 간단하게 설명해서 저 세 단어를 가로지르는 개념인 「소프트웨어 개발」에 대해 전반적으로 이해하고 있어야 한다. 그래야 ‘소프트웨어 (개발) 테스팅 전문가’라고 할 수 있을 것이다. 먼저 테스팅 전문가들이 이해해야 하는 내용이 있다. 바로 ‘프로그래밍이란 무엇인가?’에 대한 이야기이다. 대부분의 ‘수동 테스터(Manual Tester)’들은 “전 프로그래밍을 잘 못해서요~” 하는 경우가 많은데, 필자가 보기에 그들은 모두 뭔가 이상할 정도로 “학습된 무기력증”에 잠식되어 있다는 느낌을 받는다. 자, 필자가 설명해 준다. 일단 겁먹지 말자. 2. 프로그래밍이란 무엇일까?Programming이라는 단어는 Program + ing이다. 여기에서 ‘ing’는 어떤 행위(동사)에 대한 표현을 명사 형태로 변경할 때 영어에서 쓰는 어미이다. 그 중 Program의 어원은 그리스어로 「pro(사전에) + graphein(기록하다)」이라 한다. (출처) 그러므로 Program이라는 말은 ‘사전에 (무언가를) 기록한다’라는 의미를 어원으로 가진 단어이다. 즉, ‘사전에 기록함’ 정도로 이해하면 되겠다. 사실 ‘프로그래밍이란 무엇인가’에 대한 훌륭하신 분들의 여러가지 정의들이 있다. 훌륭하신 분들이 정리하시면 Programming이란 행위에 대해 간단히 정리하면 「특정한 목적을 해결하기 위해 사용자가 시간 순서에 따라 일어나타야 하는 일을 컴퓨터에 알려주는 명령 체계」라 할 수 있다. 그런 정의에서 크게 벗어나지 않아야 겠지만, 필자의 개인적인 생각에 ‘프로그램’이란, 「인간들이 컴퓨터에 명령을 주기 위해 컴퓨터가 알아 들을 수 있는 형태의 ‘규약(Protocol)’을 만들었고, 그 ‘규약에 맞추어 컴퓨터라는 기계를 조종하기 위한 규칙을 나열’하는 행위」라 본다. 즉, 프로그래밍이란 상황에 따라 뭔가 되게 유기적으로 변화하는 무언가를 다루는게 아니라, 일종의 ‘제약 사항을 가지고 있는 기계의 조종을 위한 규약’인거다. 쉽게 예를 들어, 방에 불을 켜기 위하 스위치는 On과 Off 외 다른 규약은 없다. 사용자가 할 일은 On&#x2F;Off를 선택하는 것이다. 방에 불을 켜기 위한 스위치에 Move 같은 명령은 내릴 수 없다. 프로그래밍이라는 행위도 결국은 (‘프로그래밍 언어’라 부르는) 소프트웨어의 스펙(Spec)에 따라 특정 명령들을 주르륵 나열하는 것일 뿐이다. 프로그래밍 그 자체가 ‘뭔가 되게 어려운 행위인 것이 아니다’라는 점을 테스트 전문가가 되기 전에 알아야 한다. 프로그래밍을 처음 배우는 사람들은 이를 이해하려고 들지 말고, 외워야 한다. 외우다보면 이해가 된다. 물론 프로그래밍이 작동하는 환경인 ‘컴퓨터’, 그리고 그 ‘컴퓨터의 원리’는 어느 정도 이해해야 한다. 외우기엔 내용이 너무 방대하기 때문이기도 하고, 외워봐야 의미 없는 내용들이 대부분이기 때문이다. 그림 출처 : https://hackr.io/blog/what-is-programming 3. 왜 테스트 환경을 잘 알아야 할까?1957년, Charles L. Baker는 “디버깅과 테스팅은 다른 활동이다. 이 두 활동은 서로 구분해야 한다.”라고 선언하였고, 이후 소프트웨어 테스팅 기법이 정리된 최초의 책이 출간된 1979년 이후 많은 시간이 흘렀음에도 불구하고 아직도 많은 수의 Programmer들은 Testing이라는 작업을 ‘Programing의 Pattern’ 정도로 인식하고 있다. 음… 필자가 너무 고상하게 표현했나 싶다. 다르게 이야기 하자면… 테스트 전문가들이 테스트 환경을 만드는 방법을 잘 알아야 하는 이유는 2021년인데 아직도 ‘Testing 환경’을 ‘QA 환경’이라는 명칭으로 부르며, Testing과 QA의 차이를 인지하지 못하는 사람들의 무지가 너무 많고 널리 퍼져있기 때문이다. 이렇게 서로 다른 용어를 같다고 취급해 버리면, 정작 특정 활동이 필요할 때 해당 활동에 대한 용어적 정의를 내릴 수 없는 문제가 발생한다. 현실에서는 정의할 용어가 마땅치 않으니 마치 눈 앞에 존재하는 문제인데도… 없다는듯이 문제를 직시할 수 없게 되어버리는 결과로 나타나곤한다. 그러니, 필자가 이런 글들을 정리하는 이유는 이렇다. 필자는 테스트 전문가들이 테스트 환경을 설정하고, 테스트 환경으로 인해 얻어야 하는 결과와 수행 목적을 명확히 하기를 희망한다. 그렇게 한다면… 적어도 ‘Testing’과 ‘QA’ 활동을 분리할 수 있지 않을까, 그리고 그로 인해 이 두 표현을 두루뭉실하게 사용하면서 보지 못했던 여러 소프트웨어 품질 관련 문제점들을 직시할 수 있게 될 거다. 그리고 결과적으로 대한민국 전체 소프트웨어 업계의 품질 향상으로 이루어질거라는 믿음이 있다. 관련한 또 다른 내용은 필자가 진행 중인 프로젝트 팀 블로그의 내용을 참고하시기 바란다. 테스터는 Testing만 하면 하고, 개발자는 Debugging만 하면 되는거 아닌가요? “테스팅은 디버깅과 근본적으로 구분되는 개념이다.” 라는 말은 굉장히 당연한거 같은데 굳이 언급한 이유가 있나요? 4. Testing을 Testing이라 부르지 못하고…필자와 필자 주위 지인들은 소프트웨어 관련 용어들에 꽤나 민감한 편인데, 이는 Testing과 QA라는 업무를 정상적으로 수행한 사람이라면 당연히 자연스레 체득하게 되는 버릇이다. Testing 활동을 하게 되면 당연히 결과 기반의 과정 유추의 사고를 하게 되고, 또 QA라는 행위를 하다보면 자연스럽게 Software Engineering 기반의 사고를 하기 때문이다. (이 이야기는 나중에 기회가 되면 다시 하기로 하겠다.) 이를 기반으로 간단히 이야기를 해 보면, 테스트 전문가들이 Testing을 수행하고 그 결과로 프로세스에 변경을 할 수 있어야 ‘QA환경’이라 할 수 있다. 그냥 버그 찾고 제품&#x2F;서비스를 수정할 목적으로 꾸민 환경이라면 ‘Testing 환경’ 혹은 ‘Test 서버’가 옳은 표현이다. 만약 외국 나갔는데 당신을 보고 “당신은 아시아 사람이니까 중국 사람이거나 일본 사람이군요” 라고 하면 한국인으로써 얼마나 기분 나쁘겠는가? 우리는 홍길동이 아니므로, 아버지를 아버지라 똑바로 부르자. 그래, Testing은 Testing이라고 부르자. Testing을 애매하게 QA라고 부르지 말자. QA 환경 (X) ▶ Testing 환경 (O) QA 기간 (X) ▶ Testing 기간 (O) QA 했어요? (X) ▶ Testing 했어요? (O) QA 실패했다. (X) ▶ Testing 실패했다. (O) Testing과 QA는 엄연히 다른 활동이고 구분되어야 한다. 그러니 자신의 회사에 “QA환경” 이라는 서버가 있다면 일단 이름부터 “Test 환경”으로 변경하자. 제발. 참고 자료 http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.3.6818&amp;rep=rep1&amp;type=pdf https://student-happi.tistory.com/6 https://xingfuya.tistory.com/entry/프로그래밍이란-무엇인가 https://en.wikipedia.org/wiki/Computer_programming https://www.futurelearn.com/info/courses/programming-101/0/steps/43783 https://hackr.io/blog/what-is-programming https://www.eviltester.com/blog/eviltester/rackets/202106/qa-is-a-process/ https://stackoverflow.com/questions/17675996/if-qa-is-not-testing-what-are-qa-roles https://techbeacon.com/app-dev-testing/qa-necessary-or-should-developers-do-their-own-testing","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Testing","slug":"Testing","permalink":"https://xeppetto.github.io/tags/Testing/"}]},{"title":"[WSL] 나의 OS 이야기","slug":"소프트웨어/WSL-and-Docker/01-my-OS-story","date":"2021-03-06T18:45:00.000Z","updated":"2021-04-15T12:44:00.000Z","comments":true,"path":"소프트웨어/WSL-and-Docker/01-my-OS-story/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-and-Docker/01-my-OS-story/","excerpt":"","text":"이번 포스팅은 WSL에 대한 이야기를 다루기 전에 필자의 개인적인 경험을 공유해보고 싶어 작성해 보았다. 본 포스팅에는 기술적인 이야기는 전혀 없고, 필자가 이 글을 기록하는 순간에 기억나는 것들을 중구난방으로 적어내다보니 객관성도 크게 결여되어 있을 거다. 그러니, 쓸데 없는 주저리는 빼고 기술 정보를 접하고자 하시는 분들은 바로 다음 페이지로 넘어가주시기를 바란다. 1편. WSL에 대한 이야기로 이동 : 2021년 4월 15일 기준 아직 퇴고가 안되어 링크 작동 안함 필자의 이야기 WSL과 Docker 관련 글 연재에 앞서… 생활이 좀 널널해지나 싶어 개인 프로젝트로 뭔가 하려고 들면 업무가 늘어나는 신기한 인생의 반복됨 앞에… 이번엔 당당히 맞선 후 다시 내 이야기를 하리라 다짐하며, 내 쉬는 시간을 쪼개 퇴고를 완료했다. WSL과 Docker에 관련된 글들은 스크린샷 등 퇴고 작업이 완료되는 대로 업데이트할 예정이다. 필자는 학부 시절 동안 빨간-모자를 상징으로 하는 Redhat Linux의 광팬이었다. 그도 그럴것이 당시의 Microsoft와 Apple의 가격 정책은 너무 높아 학생의 입장에서 정품을 구입하기에는 너무 비쌌고, 요즈음처럼 ‘학생 할인’이나 ‘학생은 무료’ 같은 프로모션 마케팅도 존재하지 않았다. 학생 입장에서는 Windows Server나 OSX Server는 불법 해적판이 아닌 이상 학생 입장에서는 정품으로는 도저히 공부할 수가 없는 가격이었다. 그래서 필자는 Copy-Left, Open Source 진영을 열렬히 지지했었다. 당시 Redhat은 꽤 괜찮은 사용자 문서를 제공했고, 전 세계 개발자들의 참여를 독려했다. 필자도 그렇게 그들의 일원이 되어 Linux 진영, Open Source 진영에 참여했다. 그리고 얼마 지나지 않아 Linux에서도 GUI를 지원하겠다며 등장한 Ubuntu에 열광하며 “서버 &#x3D; 리눅스가 진리”라고 굳게 믿었다. 당시에 쓰던 개인 PC에는 Multi-booting으로 게임용 OS인 Windows를 설치하고, 그와 더불어 개인용 OS인 Linux와 서버 공부용 Linux OS를 동시에 설치해 놓는 건 당시의 필자에겐 너무 당연한 선택이었다. 그리고 오랜 시간이 지나 알게된 사실이라면… 그 Windows Server나 OSX Server의 가격이 비싸다고 느끼는건 단지 필자가 학생이어서만은 아니었다는 거다. 수 많은 기업들에서 자신들의 서버를 Linux 계열의 OS로 채택하고 있었다. 무료였기 때문이다. Linux는 해킹에 취약하다는 단점들도 금새 멋진 기술들로 보완되었고, Linux 상에서 작동하는 수 많은 서버 관련 기술들이 생겨났다. Microsoft와 Apple가 고수하는 Closed Market 정책으로 그들만 수익을 창출할 수 있는 구조를 깨야겠다고 생각하는 수 많은 Open Source 선구자들은 Linux를 어마어마하게 편리한 GUI를 제공하는 OS로 만들어 놓았다. 그 위대한 Open Source 선구자들에 꼽사리끼어 배움을 이어왔던 필자는 아직까지도 개인 서버를 만들어야 하는 상황이 되면 Ubuntu와 CentOS 정도를 고려하는거 같다. 필자의 신입 시절, 회사들은 상용 서비스에는 비싼 상용 Unix 서버를 사용하거나, 혹은 보안이 잘 되어 있는 서버를 Gateway로 설정하고 그 뒤에 Linux 서버들로 Cluster를 구성하는 방식으로 사용했었다. 게임 회사들은 Windows Server를 사용했지만, 그곳들에서도 회사 외부로 공개되지 않는 내부 서버들은 거의 Linux Server를 사용하고 있었다. 그래서 회사에서 막내 시절에는 당연히도 필자에게 수 많은 서버 관리 임무가 맡겨졌고, 그 때 선배님들로부터 배운 Linux의 config를 다루는 많은 기술들은 아직까지도 유용하게 실무에서 써 먹고 있다. 꽤 시간 시간이 지나 Windows7이 등장했고 필자는 더 이상 개인 PC에 Linux를 고려하지 않았다. Windows7의 UI&#x2F;UX가 너무나도 사용자 친화적이고 훌륭하다고 생각했기 때문이다. 게다가 Windows를 쓰면서 제일 짜증이 났던 「블루스크린(Blue-Screen-of-Death)」이 줄어들기 시작했다. 또, 당시에는 Virtual Machine 기술이 훌륭히 발달하여 필요하면 Windows OS 위에서 Linux를 구동하면 되었다. 하지만 그때까지도 Windows라는 OS는 개인이 지불하기에는 만만치 않은 가격을 형성하고 있고, 그래서 엄청나게 많은 불법 Windows 7 파일이 성행했다. 사용자들에게도, 필자에게도 Windows 7은 참 잘만들어진 OS였다. Windows 10의 등장과 과거 버전의 단종(필자 역시 Windows Vista와 8은 사용했고 할 말이 많지만, 일단 논외로 하고…) Windows10은 정말 잘만들었고 좋은 OS였다. 필자는 Windows10이 나오자 마자 그 값어치를 판단하고 갈아탔지만, 대부분의 사용자들은 그렇지 않았고 예전 버전들을 존중하며 버티고 있었다. Microsoft는 더 이상의 Windows 버전은 없을 것이며, 앞으로 Windows10을 계속 업그레이드하며 갈 것이라 했지만 사용자들은 움직이지 않았다. 어느날 Microsoft는 Windows 10의 사용을 강조하기 위해 사용자들에게 “빨리 과거 버전을 버리고 Windows 10으로 갈아타라”라는 신호를 보냈다. 그 당시 Windows는 거의 전 지구의 모두가 쓰고 있었으므로, 전 지구적인 신호를 보낸거다. 하지만 Windows Vista의 엉뚱한 UI&#x2F;UX에 충격 받았던 사용자들은 Windows 7과 8에 남아있으려 했다. 그래서 Microsoft는 굉장히 초강수를 두게 되는데, 과거 버전의 Windows Update를 모두 중단할 것이며, Internet Explorer를 단종시켜 버리겠다고 선언한다. 사실 기업의 입장에선 굉장히 단순한 논리였다. 수 많은 버전의 Windows에서 지속적으로 나타나는 오류들을 패치하는 데 들어가는 비용이 너무 컸고, Windows 10 이전 버전의 Windows OS들에서 나타나는 블루스크린은 사용자들에겐 정말 고통스러운 일이었다. Windows 10에서는 하드웨어에 문제가 생기지 않은 이상은 블루스크린이 거의 나오지 않는데, 여기에는 정형기법(Formal Method)을 적용하여 하드웨어 드라이버의 문제로 블루스크린이 나올만한 범위를 거의 막았다는 기사를 본거 같다. 예전에 어느 외국 기술 잡지 기사에서 본거 같은데 지금은 검색해봐도 이런거 밖에 안나온다. 흠… https://www.microsoft.com/en-us/research/uploads/prod/2019/01/NUS2019.pdf https://www.microsoft.com/en-us/research/publication/slam-and-static-driver-verifier-technology-transfer-of-formal-methods-inside-microsoft/ (급작스런 깨달음 : 응? 뭘 말하려다 여기까지 왔지? 에고 다시 돌아가야지…) Windows 10 WSL의 등장 + WSL2의 등장2019년 Microsoft에서는 Windows 10에서 구동하는 Linux System에 대한 발표를 했다. 아마 이 즈음인 2018년 말, 2019년 초에 필자의 마음이 돌아서 Microsoft를 지지하도록 변한 시점인데도 불구하고 이렇게 생각했다. ‘윈도우에서 리눅스를 돌린다고? 그게 돌아가나?’ 당시 필자 주변 사람들과 많은 토론을 했는데, 필자만이 아니라 많은 사람들이 의아해하며 긴가민가 했던거 같다. 그리고 실체가 공개되었을 때 필자는 완전히 Microsoft의 열렬한 Fan이 되었다. Linux 서버에서 구동하는 Web Application을 코딩하기 위해 힘겹게 Virtual Machine을 설정해서 Linux 환경을 만들고, 소스 코드와 코드 관리 도구를 연동하는 작업을 할 필요가 없어졌기 때문이다. 솔직히 굉장히 긍정적으로 충격 먹었다. Microsoft 공식 문서 : Linux용 Windows 하위 시스템이란? 생각해보니 Microsoft-DOS나 Command Shell도 그냥 Unix 계열의 일부에서 나온거니 어찌보면 Architecture를 손보면 호환되는게 당연한 거였네 싶기도 했지만, 어쨌든 너무 놀라운 변화였다. WSL로 만든 이미지는 언제든 생성&#x2F;제거가 가능했기 때문에 따로 복잡한 구성을 거쳐야 하는 Virtual Machine을 설치할 필요가 없어졌다는게 가장 큰 장점인거 같다. 예를 들어, Ruby 같은 module dependency가 심한 언어의 경우, Windows에 설치하면 횐경이 너무 복잡해져서 나중엔 OS를 Format하게 되는 결과를 야기시키기 때문에 VM에 Linux를 올려 사용하곤 했는데, WSL에서 아주 가볍게 이미지를 만들고 Ruby의 Dependency 문제를 해결할 수 있었다. 또, Linux는 Windows의 File System인 NTFS를 지원하지 않았는데, WSL에서는 이를 속시원하게 mount 명령으로 지원해버렸다. 하지만, WSL에는 구조적인 한계가 있어 Docker와 같은 multi-container를 활용한 Kubernetes 운영에 한계점을 보였고, Microsoft는 이내 Architecture 구조를 개선한 WSL2를 발표하였다. 하지만 그 과정에서 NTFS의 mount 속도가 느려지는 한계점을 보이고는 있다. 그래서 필자는 WSL과 WSL2를 동시에 사용한다. Microsoft 공식 문서 : WSL 1과 WSL 2 비교 WSL이 어디까지 발전할 지 모르겠지만, 필자는 이미 팬이 되었으므로 개인적으로 다음 차기작을 기대해보고 있다. 위 그림 출처 - https://code.visualstudio.com/blogs/2020/03/02/docker-in-wsl2 사족 : 예전엔 적대적이었지만, 지금은 열렬히 지지하는 MicrosoftOpen Source 진영에서 활동하던 지난 시절에는 Microsoft는 학생과 개발자들 상대로 기계적으로 돈 버는 회사라 생각했다. 솔직히 말해 필자는 Microsoft에 극단적으로 적대적이었다. 필자는 어린 마음에 Visual Studio Enterprise의 그 끔찍할 정도로 가공할 높은 가격을 보고, ASP 같은거는 월급 주니까 쓰는거지 절대 개인적으로는 안쓰리라고 다짐하며 이를 바득바득 갈았던 기억이 있다. 지금 생각하니 Microsoft도 회사이니 영업 이익 내려는건 당연한 거였는데, 당시엔 어린 혈기에 약간 정의감 같은게 있었나 싶다. 그런데 어느 순간부터 Microsoft는 OS 같은 주요 사업을 버리고 Cloud 사업을 벌리면서, 동시에 Git에서 수 많은 오픈소스 프로젝트에 기여하고 있다. 개발자 입장에서 Google과 더불어 Microsoft에서 인증한 프로그램들을 사용하니 개발 환경은 더할 나위 없이 풍족한 느낌을 받는다. 현재는 클라우드 사업에 주력하며, 유료로 돈을 받아야 할 서비스와 무료 오픈소스로 풀어야 할 서비스의 경계를 확실히 하고, 기술 간의 인터페이스를 절묘하게 제공하고 있는 Microsoft로 변모했다. 그에 더해 업계의 생태계에 기여하는 바가 매우 크다고 보고있어 현재 정책들을 필자는 두 팔 벌려 아주 크게 환영하며 지지한다. 지금 이 글을 작성하고 있는 도구인 Visual Studio Code도 아주 잘 이용하고 있고, 그에 더 해 Microsoft Learn에도 굉장히 감사한다. 그 외의 수 많은 Google 및 Apple integration 도구들과 Open Source 프로젝트들에 감사한다. 그래서 지금은 Microsoft 제품을 아주 감사한 마음으로 거리낌 없이 정품 구입하여 사용하고 있다. 이 모든게 「사티아 나라야나 나델라(Satya Narayana Nadella)」 회장이 취임하고 갑자기 벌어진 일들인데, 정말 대단히 넓은 안목을 가지신 훌륭하신 분이신거 같다. 좋은 경영진과 일하는건 엔지니어로서 축복이라 생각한다. (Microsoft 직원분들이 부럽다.) ※ 퇴고하며 남긴 메시지 : 2021년 4월 15일 기준, 이 글을 퇴고하며 글을 남긴다. JAVA 진영의 리더 중 한 명은 Announcing Preview of Microsoft Build of openJDK라는 글을 포스팅하며 Microsoft가 JAVA 생태계를 지원(?) 혹은 진입(?) 할 것임을 지구상의 JAVA 진영에 천명했다. 사티아 회장이 취임한 후로 Microsoft의 모든 행보가 마음에 드는 필자로서는 Microsoft의 JAVA로의 진입을 진심으로 감사하며 열렬히 환영한다. 참고 사항 : IE는 v11을 끝으로 공식 브라우저가 아니다.꽤 많은 사람들이 2021년인 아직도 Windows10에서 Internet Explorer를 쓰고 있다. Windows 10의 공식 웹브라우저는 Chrominium 기반으로 만들어진 Edge로 변경되었으며, (본인의 Windows 로그인 계정이 Microsoft 계정이라면) Edge에 본인의 Microsoft 계정을 연동해두면 여러가지 Microsoft의 서비스들을 로그인 없이 자유롭게 이용할 수 있다. Windows10에서는 Internet Explorer 11이 추가로 제공되는 옵션으로 사용자가 선택하여 없애버릴 수 있다. 윈도우 시작 버튼 클릭 &gt; control 이라고 입력 &gt; 제어판이 나타나면 클릭 프로그램 제거 &gt; Windows 기능 켜기&#x2F;끄기 선택 Internet Explorer 11 체크 해제","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"OSX","slug":"OSX","permalink":"https://xeppetto.github.io/tags/OSX/"}]},{"title":"10편. Markdown - My Environment","slug":"소프트웨어/Markdown/10-How-To-Use-Markdown-Markdown-Editors","date":"2021-02-28T13:00:00.000Z","updated":"2021-03-01T03:01:00.000Z","comments":true,"path":"소프트웨어/Markdown/10-How-To-Use-Markdown-Markdown-Editors/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/10-How-To-Use-Markdown-Markdown-Editors/","excerpt":"","text":"목차 블로그의 글쓰기 환경과 본인의 성향을 확인하자 마크다운을 선택한 이유 Hexo Framework를 활용한 글쓰기 Markdown Editor는 웹 개발 환경 관리에 최적화된 Visual Studio Code 블로그의 글쓰기 환경과 본인의 성향을 확인하자본 페이지는 본 블로그를 작업하고 있는 필자의 Markdown 환경에 대한 간략한 소개이다. 블로그라는 건 누군가 개인이 글로 쓰는 표현히기도 하지만, 웹에 어떤 기록을 남기는게 근본적인 목적이다. 그리고 웹에 글을 쓴다는 건 펜을 들고 종이에 글을 써서 전달하는 방식과는 쓰는 이나 읽는 이에게 감성이나 방식이 다를 수 밖에 없다. 그러니 웹에서 블로깅을할 때 어떤 환경에서 글을 쓸 지를 결정하는 건 매우 중요하며, 자신의 성향에 따라 잘 결정해야 한다. 도저히 본인의 성향과 맞지 않다면 길게, 오래 글을 쓸 수 없기 때문이다. 필자의 경우 필자가 직접 개발한 블로그 프레임워크를 사용한 시간도 있었고, 네이버나 다음에서 제공하는 블로그 시스템을 이용한 적도 있다. 유행이 변하는 대로 이런 저런 프레임워크나 라이브러리들을 사용해 봤고, 이미 전문가들이 다 만들어 놓은 자동화된 시스템을 이용하기도 했다. 그런 경험 속에서 필자에게는 웹페이지에서 직접 작업하면서 작업 속도가 느린 서비스들을 원치 않았고, 글에 적용되는 스타일을 내가 직접 제어하고 싶었다. 범용 서비스들은 여러 사람들의 취향과 의견이 반영되다보니, 필자 입장에서는 불필요한 기능들이 너무 많았고, 정작 꼭 필요한 기능들은 부족하게 느껴졌다. 그리고 불필요한 기능들은 서비스 사용을 느리게 만드는 요인이 되었고, 결과적으로 글쓰기에 대한 동기 저하로 연결되었다. 또, 반대로 누군가에게는 지금 필자가 사용하는 Github Pages와 같은 시스템을 이용하는게 굉장히 불편할거다. 남들이 다 만들어 둔 시스템을 이용하면 되는데 왜 굳이 귀찮게 골치아픈 코딩을 해야 하느냐고 생각하는 사람도 있을 거다. (실제로 그런 분들을 많이 봤다.) 그러니 블로그로 본인의 글을 쓰시려는 분들은 본인의 글쓰기 취향에 맞는 도구를 선택하시는게 좋다. 필자의 경우는 그게 Markdown이었다. 마크다운을 선택한 이유필자가 Markdown을 선택한 이유는 의외로 굉장히 간단하다. “넌 내게 사랑 받을만 해”였다. 필자는 꽤 오랜 시간 동안 웹페이지를 개발하며 개인 블로그 삽질 운영을 해왔고, 그 과정에서 깨달은 바가 있었다. 바로 시간이 지나도 컨텐츠는 변함 없지만 블로그의 형태는 계속 웹기술의 유행에 따라 바뀐다는 점이었다. 유행에 따라 서비스를 바꾸고, 프레임워크를 바꾸고, 블로그를 만들었다 치웠다 하기를 반복하다가… 컨텐츠는 계속 남는 상태에서 유행에 따라 블로그의 모양만 바꿀 수 있다면 좋겠다고 생각했다. Markdown은 경량화된 문법을 가지고 있기 때문에 어느 프레임워크, 어느 서비스에 가져다놔도 비슷한 형태로 글이 출력된다. 현재 필자가 쓰고 있는 프레임워크 혹은 테마가 질려서 다른 모양으로 변경하고 싶을 때도 Markdown으로 작성한 컨텐츠는 거의 유사한 형태로 출력된다. 예전 웹용 Rich Editor로 작성했던 글들을 다른 서비스로 옮기려 들면 이미 글에 CSS나 JavaScript가 묻어(?) 있는 경우들이 많아 다른 프레임워크나 서비스로 이동 시 글의 구조가 전부 망가지거나, 글을 새로 작성하는 만큼의 수정 비용이 발생하곤 했다. 그러니 나중에 또 유행이 바뀌어 JAM Stack이 아닌 무언가로 필자의 취향이 이동하더라도, Markdown의 컨텐츠는 그대로 유지한채로 이동할 수 있다는 점이 가장 큰 Markdown 선택의 이유였다. 과거 블로그 개편 혹은 이동 시 글 하나, 하나 복구할때마다 DB Migration 등에 스트레스 받았던 경험을 답습하지 않을 수 있는 방법이기 때문이다. 최근 몇 년간 업무에서나 개인 취미로 Github 등 여러 Markdown을 사용하는 기술에 노출되어 익숙해져서인지 모르겠으나, 블로그의 글쓰기 프레임워크 자체를 Markdown으로 변화하는게 필자에게는 아무런 정서적 저항 없이 사용하고 있다. 하지만, 필자의 지인들 중에는 JAM Stack, JavaScript Framework들은 그 자체로 너무 복잡하고 어렵다는 의견을 가지신 분들도 많다. 그러니 그냥 ‘쿨~ 해 보인다’는 이유로 무작정 Markdown 방식의 프레임워크를 선택하지 말자. Markdown으로 작성하는 방식은 최근 Wordpress나 Tistory 같은 블로그 서비스들에서도 지원하고 있으며, Github Pages는 굳이 이 블로그처럼 복잡한 Framework를 사용하지 않고도 개인 블로그로 충분히 활용가능하기 때문이다. 필자는 예전 감성으로 음악도 좀 넣고 싶고, 필자가 원하는 스타일대로 글이 출력되었음 좋겠고 해서 선택한 프레임워크가 Hexo이다. Hexo Framework를 활용한 글쓰기필자의 Markdown 작업 환경은 Hexo라는 Github Pages에 올려 사용할 수 있는 Framework이며, Text Editor는 Visual Studio Code다. 향후 ‘Hexo를 선택한 이유’ 컨텐츠에서 다시 한 번 자세히 다룰 예정이므로, 본 페이지에서는 간략히 요약만 하겠다. Hexo는 JAM(JavaScript, API, Markup) Stack의 일종으로, Hexo의 명령 중에는 마치 프로그래밍 언어가 컴파일을 하듯이 Markdown 문서들을 HTML Static Page로 생성(Generation)해 주는 기능이 있는데, 이 때 아래 그림과 같이 확장자가 .md가 아닌 경우 새로운 페이지로 생성하지 않고 무시해 버린다. 즉, 글쓴이 입장에서는 “내가 만들고 싶은 페이지가 있는데, 아직 완성되지 않은 경우”에 대해서 간단히 파일의 확장자를 지워버리면 실제 사이트에는 배포되지 않고 내 개발 환경에만 남는다. (그리고 Static 파일을 생성하는 컴파일 비슷한 과정이 프로그래머에게 주는 ‘작업 끝났다’라는 안도감 같은 느낌이 좋다.) 필자는 버릇처럼 .md 파일이 아닌 경우 ♥ 표시를 붙여 해당 디렉토리의 상위에 위치하게 함과 동시에 알아보기 쉽게 표시하곤 한다. Github Premium을 유료 결제하고, Hexo의 기능과 Github Private Repo의 Wiki 기능, 두 가지를 이용하여 약 10여년의 모바일의 시대 동안 널리 퍼져 있던 Google Docs, EverNote, Apple Note, Microsoft OneNote, Wordpress, Trello, Confluence, 수기로 쓴 종이 노트 등등 유행에 따라 사용하며 널리 퍼져 있는 수 많은 기록들을 본 블로그의 Repository로 Markdown을 이용하여 옮기기 시작했다. Markdown Editor는 웹 개발 환경 관리에 최적화된 Visual Studio CodeMarkdown 작성기로는 VS Code를 사용하고 있다. 아주 특별하고 거창한 이유가 있지는 않고, 그냥 하다 보니 선택하게 됐다. Markdown을 작성할 수 있는 여러 작업 환경이 많지만 굳이 VS Code를 선택한 이유는 『차후에 공개할 내용(공개 시 링크)인 Hexo의 작업 환경을 Windows10 WSL에 꾸렸기 때문』이다. Docker Container를 하나 만들까 그냥 WSL에 올릴까 고민하던 차에 WSL2가 나왔고, WSL1과 WSL2의 환경을 분리할 수 있기에 Docker는 WSL2에서, Hexo는 WSL1에서 사용하기로 했다. 게다가 여기 저기의 훌륭한 프로그래머분들이 소셜미디어에 여러 도구를 써보곤 ‘엣헴~ 내가 써보니 이 툴이 좋네~ 엣헴~ 아니, 아니네 저 툴이 더 좋네~’ 할 때마다 극심한 호기심이 발동하여 이런 저런 다양한 Text Editor들을 써보곤 했는데… 때마침 Hexo를 선택하는 시점에 Windows10에서 VS Code에 맛들려서 주-도구로 열심히 활용하고 있었다보니 그대로 굳어져서 현재 블로그는 VS Code에서 작성하게 되었다. 그리고 VSCode가 특히 Markdown을 잘 지원한다. VS Code는 WSL과 연동되는 Extension(확장 프로그램)을 가지고 있으며, VS Code 자체에서 Markdown을 보여주는 기능(Shift + Ctrl + V)을 가지고 있어 쉽게 작성 중인 마크다운의 모습을 확인할 수 있다. 향후 주-사용 도구를 변경하게 되면 본 페이지의 내용을 업데이트하려 한다. 주요 참고 자료 https://jamstack.org/generators/hexo/","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"}]},{"title":"9편. Markdown Style Guides","slug":"소프트웨어/Markdown/09-How-To-Use-Markdown-Style-Guides","date":"2021-02-28T06:00:01.000Z","updated":"2021-02-28T06:00:01.000Z","comments":true,"path":"소프트웨어/Markdown/09-How-To-Use-Markdown-Style-Guides/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/09-How-To-Use-Markdown-Style-Guides/","excerpt":"","text":"목차 스타일 가이드에 관하여 마크다운 스타일 가이드 스타일 가이드에 관하여모든 프로그래밍 작업에서는 소스 코드의 전체 량이 커질 수록 복잡성이 높아지고, 그 코드를 읽고 이해하는 데에 어려움이 발생한다. 프로그래밍 하는 사람이 자기 혼자 공부하듯이 작성하는 코드라면 크게 문제가 없을 것이나, 회사 단위&#x2F;팀 단위로 함께 소스 코드를 작성하고, 공유하고, 또 협업해야 한다면 해당 작업에 참여한 많은 프로그래머들이 이해할 수 있는 형태로 소스 코드를 작성해야 여러 문제를 줄일 수 있고, 작업 속도를 증가시킬 수 있다. 이를 위해 대다수의 규모가 있는 소프트웨어 개발 회사들은 “코딩 표준”, “스타일 가이드”라는 걸 개발하곤 한다. Markdown의경우 여러 회사의 스타일들을 공부해 보았으나, 딱히 특별한 스타일 가이드를 제공하기 보다는 ‘마크다운은 대충 이렇게 사용하시면 된답니다’ 정도의 가이드를 제공하고 있었다. 그도 그럴 것이 Markup 언어는 프로그래밍 언어가 아니며, 그 자체로 Style을 표현하는 언어이기 때문에 어쩌면 당연한 듯 하다. 그래서 검색한 결과 중 대략적으로 좀 큰 회사들이 발표하였거나, 필자에게 도움이 될만한 스타일 가이드를 모아 보았다. 마크다운 스타일 가이드 README 마크다운 참고 자료 「스타일 가이드」라기 보다는 참고자료에 가깝지만, 그다지 똑똑하지 않은 필자로서는 영 외우기 싫은 어려운 내용이라 따로 자료를 링크해 두었다. https://www.makeareadme.com/ https://www.quantumdl.com/entry/Github-READMEmd-작성법 https://happybono.wordpress.com/2018/01/03/tip-markdown-을-이용한-readme-문서-작성법/ https://brownbears.tistory.com/233 깃헙 마크다운 스타일 가이드 https://guides.github.com/features/mastering-markdown/ https://docs.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax 깃랩 마크다운 스타일 가이드 https://about.gitlab.com/handbook/markdown-guide/ 구글 마크다운 스타일 가이드 https://google.github.io/styleguide/docguide/style.html 아틀라시안 비트버킷 마크다운 스타일 가이드 https://confluence.atlassian.com/bitbucketserver/markdown-syntax-guide-776639995.html 티스토리 마크다운 스타일 가이드 기본적으로 GFM을 따라가겠다는 티스토리의 마크다운 문법 설명 https://tistory.io/entry/티스토리-글쓰기-가이드-마크다운문법 알림 : 위 링크들은 2021년 2월 기준으로 작성하였으므로, 작동하지 않는 링크가 있는 경우 검색하여 찾아주시기를 바란다.","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"}]},{"title":"8편. Markdown in Practice","slug":"소프트웨어/Markdown/08-How-To-Use-Markdown-In-Practice","date":"2021-02-26T02:00:01.000Z","updated":"2021-02-26T02:00:01.000Z","comments":true,"path":"소프트웨어/Markdown/08-How-To-Use-Markdown-In-Practice/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/08-How-To-Use-Markdown-In-Practice/","excerpt":"","text":"목차 목차 만들기 접고 펴는 기능 만들기 알림 : 본 페이지는 Markdown을 사용하면서 조금 응용하면 재밋는 걸 만들 수 있을 때 작성하려 한다. 그러므로 이 페이지는 어느 날 불현듯 업데이트 될 수도, 혹은 영원히 안 될 수도 있다. 😉 목차 만들기본 페이지의 목차에서 사용하는 Markdown에서 목차를 만들 때는 내부 링크 Internal Links를 사용한다. HTML에서는 Anchored Link라고 불리던 문법이며, 페이지 내 특정 영역에 링크를 걸어두고 그 부분으로 이동하는 방식이다. Markdown에서도 비슷한 방식으로 사용할 수 있다. 제목 강조와 내부 링크를 활용한 방법이다. 먼저 제목 강조 표시를 생성한다. 1#### 목차 예제로 이동 목차 예제로 이동하는 예제를 위해 만든 제목그 후 ####으로 강조한 부분의 제목을 사용하여 링크를 생성한다. 이 때 링크 작성 시 띄어쓰기한 부분은 - 기호로 이어주어야 한다. 1[목차 예제로 이동하는 예제를 위해 만든 제목](#목차-예제로-이동하는-예제를-위해-만든-제목) 목차 예제로 이동하는 예제를 위해 만든 제목 제목 강조는 # 1개부터 6개까지 상관 없으며, 링크를 만들면 해당 제목으로 이동한다. 12345678910111213# 제목1## 제목2### 제목3#### 제목4##### 제목5###### 제목6[제목1](#제목1)[제목2](#제목2)[제목3](#제목3)[제목4](#제목4)[제목5](#제목5)[제목6](#제목6) 제목1제목2제목3제목4제목5제목6 제목1제목2제목3제목4제목5제목6 ※ 목차 선택 후 목차로 돌아오고 싶을 때는 브라우저 뒤로가기를 선택하면 된다. 접고 펴는 기능 만들기블로그에 글을 작성하다보면, 특히 기술 블로그 종류의 글을 작성하다보면, 해당 기술과 관련한 모든 기본적인 내용들을 설명하기에 페이지의 구성이나 심미적인 부분에서 컨텐츠의 위치를 배치하기에 버거울 때가 있다. 그래서 평소에는 감추어져 있다가 필요 시 클릭하면 내용이 펼쳐지는 기능을 사용하고 싶은 욕망이 발생하는데, 아쉽게도 Markdown에서는 접고 펴는 기능에 대한 문법을 제공하지 않는다. 대신 HTML을 사용하면 된다. GFM에서 HTML의 Details Element를 지원하며 사용 방식이 아주 쉬우므로, 이를 이용하여 접고 펴는 기능을 사용하면 된다. 1234567891011&lt;details&gt; &lt;summary&gt;여기를 클릭하여 펼치고, 닫기&lt;/summary&gt; HTML &lt;details&gt; 요소는 &quot;열림&quot; 상태일 때만 내부 정보를 보여주는 정보 공개 위젯을 생성합니다. 요약이나 레이블은 &lt;summary&gt; 요소를 통해 제공할 수 있습니다. 정보 공개 위젯은 보통 레이블 옆의 작은 삼각형이 돌아가면서 열림/닫힘 상태를 나타냅니다. &lt;details&gt; 요소의 첫 번째 자식이 &lt;summary&gt; 요소라면, &lt;summary&gt;의 콘텐츠를 위젯의 레이블로 사용합니다.&lt;/details&gt; ``` ※ 출처 - https://developer.mozilla.org/ko/docs/Web/HTML/Element/details ``` 여기를 클릭하여 펼치고, 닫기 HTML &lt;details&gt; 요소는 “열림” 상태일 때만 내부 정보를 보여주는 정보 공개 위젯을 생성합니다. 요약이나 레이블은 &lt;summary&gt; 요소를 통해 제공할 수 있습니다. 정보 공개 위젯은 보통 레이블 옆의 작은 삼각형이 돌아가면서 열림&#x2F;닫힘 상태를 나타냅니다. &lt;details&gt; 요소의 첫 번째 자식이 &lt;summary&gt; 요소라면, &lt;summary&gt;의 콘텐츠를 위젯의 레이블로 사용합니다. 1※ 출처 - https://developer.mozilla.org/ko/docs/Web/HTML/Element/details","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"}]},{"title":"7편. Markdown - Comment, Emoji","slug":"소프트웨어/Markdown/07-How-To-Use-Markdown-Comment-Emoji","date":"2021-02-26T02:00:00.000Z","updated":"2021-02-26T02:00:00.000Z","comments":true,"path":"소프트웨어/Markdown/07-How-To-Use-Markdown-Comment-Emoji/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/07-How-To-Use-Markdown-Comment-Emoji/","excerpt":"","text":"목차 코멘트 만들기 이모지 사용하기 코멘트 만들기Markdown에도 코멘트를 써야 하는 경우는데 아래와 같은 방식으로 코멘트를 쓸 수 있다. 123456여기서부터 코멘트 ↓[comment]: &lt;&gt; (원래 Markdown 문법에서는 이런 식으로 코멘트를 사용할 수 있다.)[comment]: &lt;&gt; (이렇게 하면 소스코드 단에서만 보이고 본문에서는 보이지 않는다.)여기까지 코멘트 ↑ 여기서부터 코멘트 ↓ 여기까지 코멘트 ↑ Markdown 코멘트는 간소화하여 아래와 같이 사용할 수 있다. 12345여기서부터 코멘트 ↓[//]: &lt;&gt; (다만 어쨌든 이렇게 해도 꽤 복잡한 문법을 외워야 한다.)여기까지 코멘트 ↑ 여기서부터 코멘트 ↓ 여기까지 코멘트 ↑ 하지만 사실 Markdown은 Markup을 기반으로 하므로, 아래와 방식으로 사용하는게 제일 간편하긴 하다. 필자는 HTML에서 쓰던 방식이 익숙해서인지 모르겠지만, 개인적으로 아래 방식을 가장 선호한다. 1234567여기서부터 코멘트 ↓&lt;!---코멘트를 작성합니다.--&gt;여기까지 코멘트 ↑ 여기서부터 코멘트 ↓ 여기까지 코멘트 ↑ 이모지 사용하기Markdown은 화려함을 많이 배제한 「경량화된 문법」을 장점으로 가지고 있다보니 문서로 만들고나면 글이 좀 심심할 수 있다. 그러니 정보만 전달하면 되는 개발 문서라면 모르겠으나, Markdown으로 사내 업무 위키를 사용하는 경우 한국말로 이모티콘(Emotion + Icon)이라고 부르는 그림 아이콘들을 추가하면 문서를 좀 더 화려하고, 재미있게 만들 수 있다. GFM에서는 여러가지 이모지(Emoji)를 사용할 수 있다. 총 정리된 목록은 아래 링크에서 목록을 볼 수 있다. Github Markdown에서 Emoji 사용하기 위 링크에서 설명하는 이모지들은 현재 필자가 사용하고 있는 HEXO에서는 작동하지 않는다. 이 경우는 아래의 링크를 이용하여 Hexo에 추가적으로 Emoji를 추가하여 사용할 수 있다. 이 추가 기능은 Github Emoji API를 사용하여 Hexo에서 Emoji를 사용할 수 있도록 해 준다. Hexo Emoji 추가 기능 MacOS와 Windows10에서는 OS 자체에서 제공하는 이모지가 있으며, 이들은 UTF-8이므로 Markdown에 입력하면 웹브라우저에서 그대로 정상작동한다. 바로 이렇게 → 😎 (GFM이나 Github Pages의 SSG Framework와 상관 없다.) 현재 이 글은 2021년 2월 기준이므로, 이후 링크가 작동하지 않는 경우 OS가 버전 업그레이드되며 내용이 변경되었을 가능성이 있으므로 신규 검색을 부탁드린다. MacOS에서 지원하는 이모지 Windows10에서 지원하는 이모지 주요 참고 자료 https://stackoverflow.com/questions/4823468/comments-in-markdown https://gist.github.com/rxaviers/7360908","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"}]},{"title":"6편. Markdown - Block Quote, Horizontal Line, Back-Slash Escape","slug":"소프트웨어/Markdown/06-How-To-Use-Markdown-BlockQuotes-HorizontalLine-Escape","date":"2021-02-25T14:00:00.000Z","updated":"2021-02-25T14:00:00.000Z","comments":true,"path":"소프트웨어/Markdown/06-How-To-Use-Markdown-BlockQuotes-HorizontalLine-Escape/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/06-How-To-Use-Markdown-BlockQuotes-HorizontalLine-Escape/","excerpt":"","text":"목차 Block Quotes 작성 수평선 그리기 특수 기호 표시하기 Block Quotes 작성Block Quote는 한국말로 “인용문”이라는 의미이며, 일반적으로 어떤 특정 문단을 강조할 때 많이 사용한다. 1&gt; 인용문을 사용하는 방법 인용문을 사용하는 방법 위의 모양은 현재 필자가 사용하고 있는 Hexo 블로그의 Hueman Theme에서 나타나는 인용문의 모양이다. 실제 Github의 GFM에서는 아래와 같이 나타난다. (2021년 1월 기준) 앞의 다른 편에서 Markdown을 소개하면서 ‘알아두면 좋은 유의 사항’에서 언급했다시피 Markdown 문법은 이를 제공하는 서비스의 CSS 상태에 따라 다르게 표시되며, 또 현재 보고 계시는 블로그와 같이 SSG(Static Site Generator)를 사용하면 해당 Framework의 CSS가 가장 먼저 작동하기 때문에 같은 Github repository를 사용하고 있지만 결과에 차이가 나타난다. Block Quote는 &gt; 기호를 추가하는 걸로 추가 depth를 사용할 수 있다. 123&gt; 브루터스는 뽀빠이를 언급하며 이렇게 말했다.&gt;&gt; 그래, 뽀빠이는 이렇게 말했지&gt;&gt;&gt; 시금치! 브루터스는 뽀빠이를 언급하며 이렇게 말했다. 그래, 뽀빠이는 이렇게 말했지 시금치! 수평선 그리기Markdown 페이지에서 수평선(Horizontal Line)을 그리는 방법은 여러가지가 있다. 본인의 취향, 코딩 버릇 등을 고려하여 아무거나 사용하면 된다. 다만, 필자는 **방법5)**는 추천하지 않는다. Markdown Text 작성 중 제목 표시의 문법과 상당히 유사한 부분이 있어 컨텐츠를 유지보수할 때 실수하기 쉽기 때문이다. 1234567891011121314151617방법1) * * *방법2) ***방법3) *****방법4) - - -방법5) ---------------------------------------방법6)&lt;hr/&gt; 방법1) 방법2) 방법3) 방법4) 방법5) 방법6) 수평선은 지금 이 문단의 아래에 그려진 선과 같이 특정 컨텐츠를 구분하는 구분선으로 사용하면 용이하다. 특수 기호 표시하기Markdown 문법은 기본적으로 웹에서 사용하는 Markup 언어이며, 이는 &lt; 기호**, 그리고 **&gt; 기호를 표시하는 걸로 태그(Tag) 문법을 사용한다. 그러나 지금 이 문서에서처럼 특수 기호를 Markdown에 직접 표시하고 싶은 경우 웹서버에 “지금 이 기호는 직접 표시하고 싶고, 태그로 사용하려는 목적이 아닙니다” 라고 알려주어야 한다. 이때 사용하는 문법을 Escape라고 하며, Markdown에서는 \\ 기호를 쓰기 때문에 Back-slash Escape라고 부른다. Markdown에서 Back-slash Escape를 사용하는 방법은 아래와 같다. 12345\\&lt;hr\\&gt; 라고 백슬래시를 기호 앞에 입력하면 글자만 표시된다.아래처럼 하면 수평선이 표시된다.&lt;hr&gt; &lt;hr&gt;라고 백슬래시를 기호 앞에 입력하면 글자만 표시된다. 아래처럼 하면 수평선이 표시된다. Markdown에서 문법으로 쓰이는 특수 기호들은 아래와 같으며, Back-slash를 보이고 싶은 경우는 \\\\ 라는 식으로 두 번 사용하면 된다. 표시&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 영문 이름 Markdown 문법 사용처 \\ backslash Markdown 내에서 특수 기호 표시할 때 사용 ` backtick Code Block 만들 때 사용 * asterisk 기울어진 글씨, 굵은 글씨, 목록 정렬 등에 사용 _ underscore 기울어진 글씨, 굵은 글씨 등에 사용 { } curly braces GFM 공식적으로는 역할 없음 어떤 Markdown에서는 문법으로 등록되어 있음 [ ] square brackets 링크, 그림 등 삽입 시 사용 ( ) parentheses 링크, 그림 등 삽입 시 사용 # hash mark 텍스트 제목 강조 표시 + plus sign 목록 정렬에 사용 - minus sign (hyphen) 목록 정렬, 수평선 등에 사용 . dot GFM 공식적으로는 역할 없음 어떤 Markdown에서는 문법이 적용된 경우가 있다고 함 ! exclamation mark 그림 삽입 시 사용 | pipe Markwodn 테이블을 그릴 때 사용 주요 참고 자료 https://guides.github.com/features/mastering-markdown/ https://github.com/github/linguist/blob/master/vendor/README.md https://github.com/github/linguist https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet https://daringfireball.net/projects/markdown/syntax https://github.github.com/gfm/ https://spec-md.com/ https://www.markdownguide.org/basic-syntax/ https://simhyejin.github.io/2016/06/30/Markdown-syntax/ http://haroopress.com/post/fenced-code-block/ https://araikuma.tistory.com/338","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"},{"name":"Grammar","slug":"Grammar","permalink":"https://xeppetto.github.io/tags/Grammar/"}]},{"title":"【斷想】 영화 「승리호」에 개봉에 즈음하여","slug":"Xeppetto/단상(斷想)/20210208-movie-space-sweepers","date":"2021-02-08T13:30:30.000Z","updated":"2021-02-08T13:30:30.000Z","comments":false,"path":"Xeppetto/단상(斷想)/20210208-movie-space-sweepers/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20210208-movie-space-sweepers/","excerpt":"","text":"누가 그랬다.축구를 사랑하면 프리이어 리그만 보고 좋아할 게 아니라,동네 조기 축구를 보고도 재밋어 해야 축구를 사랑하는 거라고.누가 그랬다.진짜 미식가는 맛있는 음식을 많이 먹어본 사람이 아니라,동네 분식집 아주머니의 특별한 레시피를 알아 볼 수 있는 사람이라고.그냥 좀 그렇다.할리우드 영화 많이 보고 눈 높아진 건 이해하겠는데,「승리호」 정도의 이야기-끌림과 완성도면 작품으로서는 충분한거 같은데…나 스스로도 영화 장르를 꽤나 편협하게 편식하는 편이라,나보다 나은 평론가들의 의견은 내가 이해 못하는 거겠으나…그래도 이 정도면 충분한거 같은데…논란의 이유를 나는 모르겠다.내가 뭘 잘 모르는 거겠지 뭐.근데 이번 건에 대해서는 내가 모르는 그 무언가를 알고 싶지 않다.암튼 좀 그렇다. 난 재밋었어.그거면 됐다. 필자의 짧은 생각에 대해 간단히 적습니다. 댓글 기능은 막아둡니다.【단상】의 글들은 행복하게 살고자 하는 필자 개인의 생각이므로 딱히 누군가의 댓글을 받고 싶어 쓰는 글은 아니니, ‘이 사람은 이런 쓸데 없는 생각을 하고 사는 구나~’ 정도로 생각해 주시면 좋겠습니다.굳이 이야기를 나누고 싶으시면 제 Social Network 계정으로 와주세요. 감사합니다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"댓글 금지","slug":"댓글-금지","permalink":"https://xeppetto.github.io/tags/%EB%8C%93%EA%B8%80-%EA%B8%88%EC%A7%80/"},{"name":"그냥 이런 놈이구나","slug":"그냥-이런-놈이구나","permalink":"https://xeppetto.github.io/tags/%EA%B7%B8%EB%83%A5-%EC%9D%B4%EB%9F%B0-%EB%86%88%EC%9D%B4%EA%B5%AC%EB%82%98/"}]},{"title":"5편. Markdown - Table, Code Block","slug":"소프트웨어/Markdown/05-How-To-Use-Markdown-Table-CodeBlock","date":"2021-02-07T13:00:00.000Z","updated":"2021-02-07T14:00:00.000Z","comments":true,"path":"소프트웨어/Markdown/05-How-To-Use-Markdown-Table-CodeBlock/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/05-How-To-Use-Markdown-Table-CodeBlock/","excerpt":"","text":"목차 Table 작성 Code 강조 작성 Table 작성 Markdown에서 Table 그리기 Markdown에서 Table은 유연하게 그리기가 어렵다. 유연하게 그리기 위해서는 HTML 태그를 사용하는 쪽이 훨씬 낫다. 게다가 Microsoft Word나 Excel을 사용하여 테이블을 그려 봤지만, 웹에서는 테이블을 처음 그려보는 사람들에게는 Markdown의 테이블 문법이 조금 낯설 수 있다. 솔직히 말해 웹에서 테이블 그리는 방법이 쉽게 이해될리가 없다. 그러니 처음 접하시는 분들에게 어려운 건 당연한 것이다. 필자에게 문의했던 많은 분들에게 수 백 번 다양한 방법으로 설명해 보았으나, 웹에서 테이블을 처음 그리시는 분들이 그 기본 개념을 어려워 하는건 어쩔 수 없었다. 자, 두려움을 떨치기 위해 그런 분들에게는 딱 한마디만 기억하라고 말씀 드리고 싶다. “외우세요. 외워 쓰다보면 익숙해집니다.” Makrdown에서 Table을 그릴 때 쓰는 문법에도 몇 가지 외워야 할 규정이 있다. ① 테이블을 그릴 때는 구분 기호 | 표시를 사용② 칼럼 수 만큼 구분 기호를 사용해야 함 (예제 참고)③ - - - 표시로 테이블의 헤더와 내용을 구분 12345| 예제 | 설명 || --- | --- || 테이블 | 구분기호 || 내용 설명 | 마크다운 || 문법 | 외우세요 | 예제 설명 테이블 구분기호 내용 설명 마크다운 문법 외우세요 Markdown Table의 항목을 정렬하기 Markdown에서 항목들을 정렬하는 방법은 두 번 째 라인, 즉, 헤더와 내용을 구분하는 라인인 - - -에 : 표시를 사용한다. 예제는 아래와 같다. 12345| 왼쪽 | 가운데 | 오른쪽 || :-------- | :--------: | --------: || 테이블 | 구분기호 | 사용 || 내용 설명 | 마크다운 | 정렬 || 문법 | 외우세요 | 사용방법 | 왼쪽 가운데 오른쪽 테이블 구분기호 오른쪽, 가운데 정렬 내용 설명 마크다운 정렬 문법 외우세요 사용방법 위의 : 표시로 구성하는 테이블의 문자 위치는 특정 셀에서만 작동하지 않고, 전체 열(column)에서 적용된다. 또한 현재 보고 있는 페이지와 같이 Github Pages에서 특정 Framework와 Theme을 이용하는 경우 해당 Framework와 Theme의 CSS에 따라 적용되지 않을 수 있다. 그럴 때는 아래와 같이 작성한다. 정렬할 때는 &lt;center&gt;와 &lt;p style&gt;의 text-align을 사용한다. 예제는 아래와 같다. 12345| 왼쪽 | &lt;center&gt;가운데&lt;/center&gt; | 오른쪽 || --- | --- | --- || 테이블 | 구분기호 | &lt;p style=&quot;text-align: center&quot;&gt;가운데 정렬&lt;/p&gt; || 내용 설명 | 마크다운 | &lt;p style=&quot;text-align: right&quot;&gt;오른쪽 정렬&lt;/p&gt; || 문법 | 외우세요 | 사용방법 | 아래와 같이 나타난다. 왼쪽 가운데 오른쪽 테이블 구분기호 가운데 정렬 내용 설명 마크다운 오른쪽 정렬 문법 외우세요 사용방법 또 하나 미리 알아 두시면 고생을 덜하게 되는 사항 중 하나는 「Markdown Table의 기능적 한계」이다. 미리 몇 번 언급했지만, Markdown은 점점 복잡해져 가는 HTML의 구조를 단순화 시키기 위한 목적으로 발전했다보니 기능상의 제약이 있다. 그래서 아래와 같이 복잡한 구조의 테이블을 그리기에 Markdown은 적합하지 않다. Markdown만으로 이런 복잡한 구조의 테이블에 많은 량의 데이터를 넣어봤던 사람은 알겠지만, 이런 경우는 Markdown 문법을 사용하는 쪽이 훨씬 복잡하고 유지보수성도 낮아진다. 그러니 이런 경우는 그냥 HTML 문법을 사용하여 Markdown에서 Table을 그리면 된다. 1234567891011121314151617181920&lt;table style=&quot;border: 2px;&quot;&gt; &lt;tr&gt; &lt;td&gt; 컨텐츠 내용1 &lt;/td&gt; &lt;td&gt; 컨텐츠 내용2 &lt;/td&gt; &lt;td&gt; 컨텐츠 내용3 &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td colspan=&quot;3&quot;&gt; 컨텐츠 내용4 &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td&gt; 컨텐츠 내용5 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; 컨텐츠 내용6 &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td rowspan=&quot;3&quot;&gt; 컨텐츠 내용7 &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td&gt; 컨텐츠 내용8-1 &lt;/td&gt; &lt;td&gt; 컨텐츠 내용9-1 &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td&gt; 컨텐츠 내용8-2 &lt;/td&gt; &lt;td&gt; 컨텐츠 내용9-2 &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 위 태그는 필자가 사용 중인 Hexo의 Hueman Theme에서는 작동하지 않는다. GFM에서 정의한 CSS보다 상위에서 Theme의 CSS가 먼저 적용되기 때문이다. Github Markdown에서 사용 시 정상 작동한다. Code 강조 작성 Markdown 코드 블록 생성 Markdown에서 프로그래밍 언어를 사용할 때는 ``` 을 사용한다. ` 3개를 붙여 사용한다. 123```programming syntax를 이렇게 기입한다.``` 위 Code Block의 결과는 아래와 같이 나타난다. 1programming syntax를 이렇게 기입한다. 코드 블록 내 강조 코드 블록 내에서 특정 구절을 강조할 때는 `를 넣어 사용한다. 1코드 블록 내 `강조`는 single grave mark를 `양쪽에 붙여` 사용한다. 코드 블록 내 강조는 single grave mark를 양쪽에 붙여 사용한다. 프로그래밍 언어별 코드 블록 프로그래밍 언어마다 다른 스타일을 적용하기 위해서는 아래와 같이 ``` 뒤에 프로그래밍 언어의 이름을 사용한다. 아래는 HTML을 위한 문법이며 Markdown에서는 html 또는 xml로 사용한다. 123456789101112131415```html&lt;!-- HTML 코드 블록 시작 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=ko&gt;&lt;head&gt; &lt;title&gt;천년나무의 블로그&lt;/title&gt;&lt;/head&gt;&lt;body&gt;내용&lt;/body&gt;&lt;/html&gt;&lt;!-- HTML 코드 블록 끝 --&gt;``` 위 Code Block의 결과는 아래와 같이 나타난다. 12345678910111213&lt;!-- HTML 코드 블록 시작 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=ko&gt;&lt;head&gt; &lt;title&gt;천년나무의 블로그&lt;/title&gt;&lt;/head&gt;&lt;body&gt;내용&lt;/body&gt;&lt;/html&gt;&lt;!-- HTML 코드 블록 끝 --&gt; HTML 외의 언어들의 경우도 아래와 같이 사용할 수 있다. (1) Python 코드 블록의 예 12345678910111213```python# Python 코드 블록 시작s = &quot;Python 입니다.&quot;print (s)a = 1b = 2c = a + bprint(c)# Python 코드 블록 끝``` 1234567891011# Python 코드 블록 시작s = &quot;Python 입니다.&quot;print (s)a = 1b = 2c = a + bprint (c)# Python 코드 블록 끝 (2) JavaScript 코드 블록의 예 1234567891011121314```javascript // JavaScript 코드 블록 시작 (function (number) &#123; var textList = [&quot;: 홀수입니다.&quot;, &quot;: 짝수입니다.&quot;]; if (number % 2 == 0) &#123; initText = textList[1]; &#125; else &#123; initText = textList[0]; &#125; &#125;)(5); console.log(initText); console.log(textList); // JavaScript 코드 블록 끝``` 123456789101112// JavaScript 코드 블록 시작(function (number) &#123; var textList = [&quot;: 홀수입니다.&quot;, &quot;: 짝수입니다.&quot;]; if (number % 2 == 0) &#123; initText = textList[1]; &#125; else &#123; initText = textList[0]; &#125; &#125;)(5); console.log(initText); console.log(textList);// JavaScript 코드 블록 끝 Markdown에서 사용할 수 있는 프로그래밍 스타일은 여러가지가 있다. 이에 대한 자세한 이야기는 일반 사용자에게 어려울 수 있으므로, 관심이 없는 사용자들은 다음 문단은 그냥 넘기고 사용방법만 숙지해도 된다. 현재 필자가 쓰고 있는 블로그인 Hexo Framework의 Syntax Hightlight는 별도로 구현된 방식으로 사용한다. 이런 구현 스펙은 Creating and highlighting code blocks과 GFM fenced code block에 정의되어 있다. 아래의 목록은 Rhio Kim님의 블로그에서 가져온 목록이다. 아마 이 목록은 현재는 더 다양하게 변경되었을 텐데, 검색으로 찾기가 어려웠다. Rhio Kim님은 highlight.js가 52개 언어, 26개 구문 강조 스타일을 제공할 때 정리하셨다고 한다. 2021년 2월 현재 hightlight.js는 191개 언어, 97개 구문 강조 스타일을 제공하고 있다. 어떤 식으로 정리하셨는지 모르겠다. 새로운 내용을 알게 되면 본 페이지의 내용을 업데이트 하겠다. Language key 1C 1c ActionScript actionscript Apache apache AVR Assembler avrasm Axapta axapta Bash bash C# cs C++ cpp Clojure clojure CMake cmake CoffeeScript coffeescript CSS css D d Delphi delphi Diff diff Django templates django DOS batch files dos Erlang erlang GLSL glsl Go go Haskell haskell HTML (with inline css and javascript) html HTTP http Ini file ini Java java JavaScript javascript JSON json Lisp lisp Lua lua Markdown markdown &#x2F; md Matlab matlab MEL mel nginx nginx Objective C objectivec Parser 3 parser3 Perl perl PHP php Python python Python’s profiler output profile R r RenderMan RIB rib RenderMan RSL rsl Ruby ruby Rust rust Scala scala SmallTalk smalltalk SQL sql TeX tex Vala vala VBScript vbscript VHDL vhdl XML xml 주요 참고 자료 https://guides.github.com/features/mastering-markdown/ https://github.com/github/linguist/blob/master/vendor/README.md https://github.com/github/linguist https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet https://daringfireball.net/projects/markdown/syntax https://github.github.com/gfm/ https://spec-md.com/ https://simhyejin.github.io/2016/06/30/Markdown-syntax/ http://haroopress.com/post/fenced-code-block/ https://heropy.blog/2017/09/30/markdown/","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"},{"name":"Grammar","slug":"Grammar","permalink":"https://xeppetto.github.io/tags/Grammar/"}]},{"title":"4편. Markdown - Link, Image","slug":"소프트웨어/Markdown/04-How-To-Use-Markdown-Link-Image","date":"2021-02-07T12:30:00.000Z","updated":"2021-02-07T13:38:00.000Z","comments":true,"path":"소프트웨어/Markdown/04-How-To-Use-Markdown-Link-Image/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/04-How-To-Use-Markdown-Link-Image/","excerpt":"","text":"목차 Link 작성 Image 작성 Link 작성 Markdown에서 Link 사용하기 - 기본 GFM에서는 그냥 http:&#x2F;&#x2F; 혹은 https:&#x2F;&#x2F; 가 포함된 링크를 걸면 알아서 링크가 생성된다. 12http://xeppetto.github.io/https://xeppetto.github.io/ http://xeppetto.github.io/https://xeppetto.github.io/ Markdown Link 사용하기 - 예제 Markdown에서 링크를 거는 문법은 사실 2+1으로 외우면 된다. 기본 사항 2가지와 잘 사용하지 않는 추가 기능 1가지이다. ① 대괄호 : [ 사이트 설명 ]② 괄호 : ( 사이트의 주소 ) Markdown 스타일로 링크를 추가하고 싶은 경우 아래와 같은 방식으로 작성한다. 1[링크 설명](링크 주소) 위 방식을 이용하여 링크를 거는 예제는 아래와 같다. 12[GitHub](http://github.com)[천년나무의 블로그](https://xeppetto.github.io/) GitHub천년나무의 블로그 Link에 설명 추가하기 그 외 잘 사용하지는 않지만 링크 위에 마우스 커서를 올려 놓으면 잠시 뒤 설명이 나타나도록 하는 기능이 있다. ③ 링크에 마우스를 올리면 나타나는 링크의 설명 12[GitHub](http://github.com &quot;깃허브로 이동하는 링크&quot;)[천년나무의 블로그](https://xeppetto.github.io/ &quot;천년나무의 블로그&quot;) GitHub천년나무의 블로그 위의 링크에 마우스 커서를 올리면 아래와 같이 입력한 링크의 설명이 나타난다. Email Link 사용하기 HTML에서 mailto로 사용하던 이메일 링크는 Github에서도 작동하지만, 그냥 이메일 주소만 적어놔도 작동한다. 12example@github.com&lt;a href=&quot;mailto:example@github.com&quot;&gt;이메일 보내기 링크&lt;/a&gt; &#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;이메일 보내기 링크 그냥 이메일 주소만 걸어놔도 작동하지만 굳이 a href로 HTML 태그를 이용하는 이유는 mailto와 함께 사용할 수 있는 HTML 여러 규약때문이다. a href + mailto를 활용하면, 이메일 받을 사람, 주제, 본문 등을 미리 설정할 수 있다. 본 페이지는 Markdown에 대한 페이지이므로 관련 내용은 검색 엔진에서 “HTML mailto”를 검색해서 확인하시기 바란다. Image 작성 Markdown에서 Image 사용하기 - 기본 Markdown에서 이미지에 링크를 추가하고 싶은 경우 아래와 같은 방식으로 작성하면 된다. 1![이미지 설명](이미지 주소) 이미지를 삽입할 때 사용하는 문법은 링크 시 사용하는 문법과 비슷하지만, 이미지를 삽입한다는 문법으로 느낌표(!)를 사용한다. ① 느낌표 : !② 대괄호 : [ 이미지 설명 ]③ 괄호 : ( 이미지 주소 ) Markdown에 Image 표시하기 - 예제 아래 이미지의 원본인 Freepik에서 가져온 것임을 고지하므로, 혹시 라이선스 내용이 변경되면 수정할 예정이다. 1![freepik license](/images/TheMarkdown/markdown-image-tag-sample1.png) 아래 이미지 원본 역시 Freepic에서 가져온 것이며, 라이선스 내용 변경 시 수정할 예정이다. Image에 Link를 추가하기 이미지 자체에 링크를 걸어, 이미지를 클릭 시 특정 주소로 이동하도록 보내고 싶은 경우 Link의 문법과 Image의 문법을 섞어서 사용한다. 123링크 문법 + 이미지 문법링크 문법 = [① 링크 설명](② 링크 주소)이미지 문법 = [③ 이미지 설명](④ 이미지 주소) 위와 같은 문법에서 ①에 이미지 문법을 끼워 넣는 식이다. 이미지를 표시하는 방법 자체를 ① 링크 설명으로 사용하는 것이다. 대략의 모습은 아래와 같다. 1[[③ 이미지 설명](④ 이미지 주소)](② 링크 주소) 설명은 길지만 사실 직접 예제를 보면 이해가 더 쉽다. 1[![freepik - 클릭 시 원본으로 이동](/images/TheMarkdown/markdown-image-tag-sample2.png)](https://kr.freepik.com/free-vector/colorful-illustration-of-female-programmer-working_5483075.htm) 이미지를 클릭하면 해당 이미지의 원본 페이지로 이동한다. Image size 변경하기 Markdown 자체에 Image Size를 변경하는 문법이 있지만, 대부분의 경우 문법이 잘 듣지 않다보니 그냥 HTML을 사용한다. 12&lt;img src=&quot;/images/TheMarkdown/markdown-image-tag-sample1.png&quot; width=&quot;100px&quot; alt=&quot;이미지 크기 변경&quot;&gt;&lt;img src=&quot;/images/TheMarkdown/markdown-image-tag-sample2.png&quot; width=&quot;200px&quot; alt=&quot;이미지 크기 변경&quot;&gt; 이런 방식으로 사용할 경우 Markdown에서도 HTML의 Image Style을 사용할 수 있다. 다만, 이 경우 문법이 복잡해지므로 너무 많은 부분에 사용하기를 추천하지는 않는다. 꼭 필요한 부분에만 사용하자. 주요 참고 자료 https://guides.github.com/features/mastering-markdown/ https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet https://daringfireball.net/projects/markdown/syntax https://github.github.com/gfm/ https://spec-md.com/ https://simhyejin.github.io/2016/06/30/Markdown-syntax/ http://haroopress.com/post/fenced-code-block/","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"},{"name":"Grammar","slug":"Grammar","permalink":"https://xeppetto.github.io/tags/Grammar/"}]},{"title":"3편. Markdown - Text, List","slug":"소프트웨어/Markdown/03-How-To-Use-Markdown-Text-List","date":"2021-02-03T15:00:00.000Z","updated":"2021-02-07T12:00:00.000Z","comments":true,"path":"소프트웨어/Markdown/03-How-To-Use-Markdown-Text-List/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/03-How-To-Use-Markdown-Text-List/","excerpt":"","text":"목차 Markdown 공부하는 방법 Text 작성 List 작성 알림 : 본 문서는 Markdown을 공부하러 들어오시는 분들에게 가이드를 제공하지만, 그와 별개로 필자가 외우기 싫어서 머리가 나빠 자기 보기 편할려고 정리한 목적이 크다보니 상단에 목차를 만들어 두었다. 목차를 클릭하여 세부 메뉴로 이동 후 다시 목차로 돌아오고 싶으면 ‘브라우저 뒤로가기’를 하면 된다. Markdown 공부하는 방법본 포스팅에서는 Markdown과 GFM을 구분하지 않고 그냥 Markdown이라고 칭하겠다. Markdown은 프로그래밍 언어가 아니다. Markdown은 Markup 언어이다. 그러니 Markup 언어는 ‘이게 어떻게 작동하는 거지?’를 너무 고민하지 않고, 사용 방법을 그냥 외우시면 된다. 그러나 어쨌든 외워야 하는 양이 꽤나 많기 때문에 학습하는 과정에서는 이를 외우는 데에 우선순위가 필요한데, 아래 항목 중 「(1) 기본」에 집중하면 금방 익숙해질 수 있으니 이 순서대로 해 배워보시라고 추천드린다. (1) 기본 : Text &gt; List &gt; Link &gt; Image &gt; Table &gt; Code Block &gt; Escape(2) 응용 : 위 기본 사항 외 Markdown 문법을 사용하여 세련된 문서 만들기 본 블로그에서 정리하려고 하는 내용은 Github Guide - Mastering Markdown에 있는 내용들이다. Text 작성 일반 텍스트와 단락 나누기, Generic Text &amp; Paragraph 아래 그림은 Github의 웹사이트에서 제공하는 Markdown Editor이다. 일반 텍스트 에디터에 작성하듯이 텍스트를 작성하면 된다. Markdown의 일반 텍스트 입력한 모양은 대략 아래와 같고, 결과는 본 블로그와 같다. Github의 Markdown에서는 위 그림에서 보는 바와 같이 Enter Key로 줄을 띄어쓰기 하면 그 기준대로 문단(paragraph)으로 구성된다. 엔터의 빈 줄 처리를 지원하지 않는 Markdown도 있으므로, Github에서 Markdown을 다른 사이트로 옮길 때는 필요 시 &lt;br&gt; 태그를 사용해야 함 정도를 알아두시면 된다. 제목 표시, Headers Markdown에서는 HTML의 &lt;h1&gt;부터 &lt;h6&gt;까지 사용할 수 있으며, 텍스트 앞의 #의 개수에 따라 구분한다. 123456# # 1개는 &lt;h1&gt;## # 2개는 &lt;h2&gt;### # 3개는 &lt;h3&gt;#### # 4개는 &lt;h4&gt;##### # 5개는 &lt;h5&gt;###### # 6개는 &lt;h6&gt; Markdown과 GFM을 구분 페이지의 ‘알아두면 좋은 유의 사항’에 언급한 바와 같이 Github에 작성하는 Markdown과 Github Pages에서 Framework 및 Theme을 사용하는 경우는 모양이 다르게 나타날 수 있다. 제목을 표시하는 Header의 경우가 대표적이며, 현재 필자가 본 블로그에서 사용하고 있는 테마(Theme)에서는 아래와 같이 표시된다. h1 태그h2 태그h3 태그h4 태그h5 태그h6 태그그 외에도 제목 강조 표시 는 아래와 같은 방식으로 H1과 H2를 사용할 수 있다. 하지만, 필자 입장에서는 실제 작성할 때 해당 문법이 잘 생각이 나지 않아 사용 빈도가 낮은 편이다. (그냥 Sharp # 표시가 외우기도 쉽고 편하기에…) 12345Heading 1 태그로 작동=====================Heading 2 태그로 작동--------------------- Heading 1 태그로 작동Heading 2 태그로 작동 글자 강조, Emphasis 본 블로그의 Markdown 소개 페이지에서 언급한 바와 같이 Markdown은 발표되던 당시 다양하게 존재하던 여러 Text-to-HTML 문법들을 차용하였기 때문에 텍스트를 강조하는 방법이 한 개 이상 존재하곤 한다. 특별히 다른 점 없이 같은 기능이니 아무거나 본인 손에 맞는 대로 사용하면 된다. 12*기울어진 글씨를 쓰기 첫 번째 방법*_기울어진 글씨를 쓰기 두 번째 방법_ 기울어진 글씨를 쓰기 첫 번째 방법 기울어진 글씨를 쓰기 두 번째 방법 12**두꺼운 글씨를 사용하는 첫 번째 방법**__두꺼운 글씨를 사용하는 두 번째 방법__ 두꺼운 글씨를 사용하는 첫 번째 방법 두꺼운 글씨를 사용하는 두 번째 방법 1_글씨 강조 규칙은 **여러 개를 섞어서** 사용할 수 있다._ 글씨 강조 규칙은 여러 개를 섞어서 사용할 수 있다. 1취소선을 ~~적용~~ 사용할 때는 **이런 식으로** _쓸 수 있습니다._ 취소선을 적용 사용할 때는 이런 식으로 쓸 수 있습니다. 줄 바꿈, Line Break 1234567줄 바꿈 시에는 끝에 공백을 2개 이상 두면 줄 바꿈이 된다. 이 예제를 드래그해 보면 알 수 있다. 이 예제를 드래그해 보면 알 수 있다. 이 예제를 드래그해 보면 알 수 있다. 이 예제를 드래그해 보면 알 수 있다.&lt;br&gt;이 예제를 드래그해 보면 알 수 있다. 줄 바꿈 시에는 끝에 공백을 2개 이상 두면 줄 바꿈이 된다. 이 예제를 드래그해 보면 알 수 있다.이 예제를 드래그해 보면 알 수 있다.이 예제를 드래그해 보면 알 수 있다. 이 예제를 드래그해 보면 알 수 있다.이 예제를 드래그해 보면 알 수 있다. 위와 같이 공백 1칸일 때는 그냥 띄어쓰기라 생각해 줄바꿈이 되지 않는다. 2칸 이상의 공색은 바로 아랫줄로 줄바꿈이 된다. (문단 형식으로 2칸 띄어 쓰기는 &lt;br&gt; 태그를 사용해야 한다.) List 작성 글머리 기호, Unordered List Markdown에서 글머리 기호는 • 표시만 가능하다. Microsoft Office에서 사용하는 여러 모양(네모, 마름모 등)을 사용할 수는 없다. Markdown의 글머리 기호를 표시할 때는 *, +, - 총 세 가지 기호를 사용할 수 있다. 어떤 기호를 넣어도 • 표시로만 나타난다. 그러니 그냥 본인이 알아 보기 쉬운 기호를 사용하면 된다. 123456789* 글머리 1a* 글머리 1b* 글머리 1c + 글머리 2a + 글머리 2b + 글머리 2c - 글머리 3a - 글머리 3b - 글머리 3c 글머리 1a 글머리 1b 글머리 1c 글머리 2a 글머리 2b 글머리 2c 글머리 3a 글머리 3b 글머리 3c 번호 순서 정렬, Ordered List Markdown의 번호 순서 정렬에는 몇 가지 규칙을 가지고 있어 이를 이해해야 외워야 한다. (1) Markdown에서 번호 순서 대로 정렬할 때는 아래와 같이 숫자를 넣어 사용하면 된다.(2) 같은 Depth 내에서는 어떤 번호를 넣어도 무조건 순서대로 표시된다.(3) 해당 Depth의 시작 번호는 제일 처음 사용된 번호에서부터 시작된다. 1234567891. 번호 정렬 1a3. 번호 정렬 1b0. 번호 정렬 1c 2. 번호 정렬 2a 9. 번호 정렬 2b 5. 번호 정렬 2c 4. 번호 정렬 3a 7. 번호 정렬 3b 1. 번호 정렬 3c 번호 정렬 1a 번호 정렬 1b 번호 정렬 1c2. 번호 정렬 3a9. 번호 정렬 3b5. 번호 정렬 3c 번호 정렬 3a 번호 정렬 3b 번호 정렬 3c 번호 순서 정렬 관련 팁 Markdown의 번호 순서 정렬 규칙을 이해해야 하는 이유는 Markdown을 사용하는 개발자들이 흔히 올려 놓는 팁에 잘 나타난다. 실제 일반적으로는 아래와 같이 사용한다. 실제 서비스를 배포하여 운영하다보면 컨텐츠의 순서를 뒤바꾸거나, 추가&#x2F;삭제해야 하는 일이 빈번하게 발생하기 때문에 그냥 알아 보기 쉽게 특정 숫자만으로 정렬한다. 어떤 숫자를 쓰느냐는 본인 취향이지만, 위에 기재된 규칙 중 (3)번을 고려해야 하기 때문에 일반적으로는 숫자 1을 사용한다. 123451. 예 1번1. 예 2번1. 예 3번1. 예 4번1. 예 5번 예 1번 예 2번 예 3번 예 4번 예 5번 정렬 방식 혼합 Markdown에서 글머리 기호화 번호 순서 정렬은 혼합해서 사용할 수 있다. 단, 같은 Depth 내에서는 숫자와 글머리 기호 중 하나만 선택하여 사용할 수 있다. 12341. 번호 정렬 1a1. 번호 정렬 1b * 글머리 기호 2a * 글머리 기호 2b 번호 정렬 1a 번호 정렬 1b* 글머리 기호 2a* 글머리 기호 2b 체크 박스 목록 체크 박스 목록을 표시할 때에는 - 기호와 [ ] 기호를 이용하여 표시할 수 있다. 체크박스 역시 일반 목록과 마찬가지로 들여쓰기 할 수 있다. 123456- [x] 체크 표시된 체크 박스 - [x] 체크 표시된 체크 박스- [ ] 표시 없는 체크 박스 - [ ] 표시 없는 체크 박스 - [ ] 표시 없는 체크 박스- [ ] 표시 없는 체크 박스 체크 표시된 체크 박스 체크 표시된 체크 박스 표시 없는 체크 박스 표시 없는 체크 박스 표시 없는 체크 박스 표시 없는 체크 박스 필자가 사용 중인 Hexo에서는 체크 박스 앞쪽에 List Bullet이 표시되지만, Github에서 지원하는 GFM에서는 나타나지 않는다. (※참고 :이유는 알 수 없으나 Markdown에서 Radio button은 공식적으로 지원하지 않는다.) 주요 참고 자료 https://guides.github.com/features/mastering-markdown/ https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet https://daringfireball.net/projects/markdown/syntax https://github.github.com/gfm/ https://spec-md.com/ https://simhyejin.github.io/2016/06/30/Markdown-syntax/ http://haroopress.com/post/fenced-code-block/ https://gist.github.com/ihoneymon/652be052a0727ad59601","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"},{"name":"Grammar","slug":"Grammar","permalink":"https://xeppetto.github.io/tags/Grammar/"}]},{"title":"2편. Github Pages Markdown","slug":"소프트웨어/Markdown/02-Markdown-On-GithubPages","date":"2021-01-29T09:00:00.000Z","updated":"2021-01-29T09:00:00.000Z","comments":true,"path":"소프트웨어/Markdown/02-Markdown-On-GithubPages/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/02-Markdown-On-GithubPages/","excerpt":"","text":"Github의 Markdown은 GFMGithub는 파일, 이슈, 코멘트에 Markdown을 허용하는데, 이때 사용하는 Markdown을 GFM이라 부른다. GFM은 Github Flavored Markdown의 약자이며, 굳이 한글로 번역하자면 ‘깃허브-맛 마크다운’ 정도가 되겠다. (‘딸기맛 초콜렛’을 Strawberry flavored chocolate라고 하니…) GFM은 그 나름의 기술 스펙(Specification)을 가지고 있으며, 이 GFM 스펙은 Github와 관련한 Markdown 전체에 적용된다. 재밋는 점은 GFM이 CommonMark를 차용하여 변형시킨 스펙을 사용한다는 점이다. GFM은 CommonMark의 Subset으로 정의되어 있으며, 원래 CommonMark에서 지원하던 기능들 외에도 테이블, 취소선, 자동 링크 등의 기능들을 추가 지원한다. 관련한 내용을 검색해보니 Nolboo님의 블로그에 번역된 내용이 있었으니 세부 내용이 궁금하신 분들은 참고하시기 바란다. 알아두면 좋은 유의 사항Github와 Github Pages에 적용되는 GFM은 기본적으로 같으나, 본 블로그처럼 Github Pages에 특정 Framework 혹은 Theme을 사용하는 경우 적용되는 Github Pages에서 적용되는 Markdown 문법은 달라질 수 있다. Github에 올라가는 Static Page Generator들에 정의된 CSS 내의 정의가 GFM 문법과 다른 경우, HTML Generator 쪽의 스타일을 따르기 때문이다. 일반적인 경우 각 Framework나 Theme도 Markdown의 기본 스펙은 같지만, Image나 Table 등의 사용이 미세하게 다를 수 있다. 그런 경우 그냥 HTML의 문법을 사용하면 된다. 예를 들면, 아래와 같다. GFM에서는 HTML image 태그의 기능들이나 스타일들을 허용하지 않는데, 이럴 때는 그냥 Markdown 내에 HTML 문법을 끼워 넣으면 된다. 12&lt;image src=&quot;&#123;파일 경로와 이름&#125;&quot; width=&quot;&#123;가로 크기&#125;&quot; height=&quot;&#123;세로 크기/생략 가능&#125;&quot; alt=&quot;&#123;캡션/이미지 미노출 시 텍스트&#125;&quot; style=&quot;&#123;필요한 스타일&#125;&quot;&gt; 이는 Markdown 소개 페이지에서도 ‘단점’으로 지목했었던 내용이다. 다시 한 번 짚고 넘어가보면… Markdown은 사용하기 편리한 경량의 문법을 가지고 있지만, 그래서 웹 문서를 만들 때 기능상 제약이 있고, 그래서 결국 이것저것 많이 공부하고 알아야 세련되게 쓸 수 있다. (“Markdown만 알면 돼!”가 안된다.) GFM 가이드와 CheetSheet필자는 꽤 오랜 시간 동안 개인 블로그의 형태와 운영방식 등을 고려하였고 결론적으로 Static Site Generator로 가야겠다고 결심했다. 그리고 이를 가장 잘 서비스할 수 있는 Cloud 서비스 제공자를 검토했고, Github에서 블로그를 작성하기로 결정했다. 그리고, 여기저기 퍼져 있던 이전 블로그들의 내용들을 이동하기 전에 제일 처음 다시 한 번 공부하고, 정리해야 하는 내용이 Github의 Markdown이라 생각했다. 본 블로그에서 정리하려고 하는 내용은 Github Guide - Mastering Markdown에 있는 내용들이다. 이미 꽤 많은 분들이 한글 자료들을 만들어 두었지만, 나 역시 내 나름대로 공부하면서 정리하는 데에 의미를 두려한다. 참고로, 우리가 흔히 시험 볼 때 흘깃 훔쳐본다는 의미로 이야기하는 ‘컨닝페이퍼’는 영어로 CheetSheet라고 한다. GFM CheetSheet - https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf GFM CheetSheet는 Github Guide - Mastering Markdown에 들어가면 “Download PDF”를 클릭하면 나오는 파일이고, PDF 파일로 제공되고 있어 저장해서 사용하기에 편리하다. 이 링크는 언제 경로가 변경되어도 이상하지 않으므로, 나중에라도 필자가 변경하기 쉽도록 날것의 링크 그대로 두려한다. 주요 참고 자료 https://daringfireball.net/projects/markdown/ https://github.blog/2017-03-14-a-formal-spec-for-github-markdown/ https://github.github.com/gfm/ https://help.apiary.io/faq/commonmark/ https://github.com/github/markup","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"},{"name":"CommonMark","slug":"CommonMark","permalink":"https://xeppetto.github.io/tags/CommonMark/"}]},{"title":"1편. 마크다운 알아보기","slug":"소프트웨어/Markdown/01-What-Is-Markdown","date":"2021-01-28T09:05:00.000Z","updated":"2021-01-28T09:05:00.000Z","comments":true,"path":"소프트웨어/Markdown/01-What-Is-Markdown/","link":"","permalink":"https://xeppetto.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/01-What-Is-Markdown/","excerpt":"","text":"들어가기에 앞서현재 보고 계시는 페이지는 글쓴이가 Markdown으로 글을 작성한 후 Hexo라는 HTML Generator로 자동 생성하여 만들어진 페이지이다. 웹브라우저의 개발자 도구를 이용하여 소스코드를 볼 수 있으신 분은 아시겠지만, 페이지의 코드 자체는 상당히 복잡하다. 하지만 작성은 Markdown으로 매우 쉽게 작성하였다. HTML Generator는 Single Site Generator, Static Site Generator라고 불리며 이에 관련된 이야기는 다른 주제에서 언급하려 한다. Markdown과 Markup 이야기Markdown 이야기를 하기에 앞서… 소프트웨어를 공부하다보면 ‘Mark-up은 Script에 가까운데 대체 왜 언어(Language)라고 부르는 거지?’하는 생각이 드는데 그에 대한 이야기를 먼저 해 볼까 한다. Markdown은 Markup 언어의 한 종류이다. Mark-up이란건 흔히 ‘화장한다’는 의미로 쓰이는 말인 Make-up과 유사하게 이해하면 되는데, 문서에 특정 부분을 ‘표시(Mark)한다’ 정도의 의미로 이해하면 대충 옳다. 이는 본래 인류가 컴퓨터를 사용한 후 문서를 전자화하는 과정에서 오랜 시간 동안 동일한 구조의 문서를 보기 위해 만들어진 표준에서 유래했다. 그렇게 개발한 Markup 언어의 표준은 SGML(Standard Generalized Markup Language, ISO 8879:1986)이라 부른다. SGML이 등장해야 했던 이유는 이렇다. 인간들이 전쟁을 위한 무기 체계를 만들거나, 혹은 인공위성이나 의료기기, 아니면 어떤 국가의 법률을 정리하기 위한 전자 문서를 작성하는 큰 프로젝트는 한 번 시작하면 종료까지 10년이 걸릴 지, 20년이 걸릴 지 알 수 없다. 그리고 그 기간 동안 발전할 컴퓨터의 하드웨어 기술과 소프트웨어 기술을 생각하면 “10년에 거쳐 읽을 수 있는 전자 문서 규격”이 필요했던 것이고, 그것이 바로 일반 텍스트(Text) 문서에 특정 표시(Mark)로 문서를 표현하는 Markup 규격이었던 것이다. 그리고 그것이 발생하는 시점에는 충분히 ‘프로그래밍 언어’로서 불릴만한 규격이었다. 이 Markup 규격은 1990년 팀 버너스 리(Sir. Timothy John Tim Burners-Lee)가 서버와 클라이언트 기반의 월드와이드웹(World Wide Web) 구조를 만들 때 차용된다. 이에 대한 자세한 이야기는 한글 위키디아 - HTML을 참고하시기 바란다. 해당 위키피디아 페이지의 한 구절은 아래와 같다. 1980년, 유럽 입자 물리 연구소(CERN)의 계약자였었던 물리학자 팀 버너스리가 HTML의 원형인 인콰이어를 제안하였다. 인콰이어는 CERN의 연구원들이 문서를 이용하고 공유하기 위한 체계였다. 1989년에 팀 버너스리는 인터넷 기반 하이퍼텍스트 체계를 제안하는 메모를 작성했다. 팀 버너스리가 ‘하이퍼텍스트 체계’로 만든 최초의 규격 이름은 「HTML」이 되었고, 이는 2021년 기준 인류가 인터넷이라 부르는 가상의 네트워크 공간에 문서를 공유하는 방식의 표준이 되었다. 그러나, HTML이 가진 태생적 문제가 있었다. Markup 언어는 본디 정적인 문서(Static Document)를 처리하는 데 적합한 문서였다. 그런데 인터넷이라는 네트워크 공간은 점점 동적인(Dymanic) 방식으로 발전하였다. HTML 3.5는 JavaScript 및 CSS를 조합하여 동적인 언어를 표현할 수 있도록 발전했다. 그래서 3.5 버전은 D-HTML이라고도 불리며, 여기에서의 D는 Dynamic(동적인)을 의미한다. 이후 HTML 4.0이 되면서 본격적으로 HTML은 JavaScript 및 여러 웹 기술들과 함께 동적인 구조의 문서를 표현하기 시작한다. 그리고, 그래서 결국 HTML은 Markup의 원래 목적인 “Text 기반의 - 아주 오랜 기간 동안 호환되는 - 간단하고 가벼운”이라는 특성을 잃게 되고, 복잡하고 배우기 어려운 규격이 되어 버렸다. 대부분의 사이트에서 HTML 코드는 보기 쉽게 작성해 놔도 토나올 정도로 복잡해 보이곤 한다. 이를 해결하기 위해 서기 2000년을 전후로 Text-to-HTML &#x2F; HTML-to-Text 변환 기술들이 나타나기 시작하였다. 여기에서부터 Markdown의 역사가 시작된다. 복잡함을 제거하고 원래 Markup의 취지인 단순함으로 돌아가는 규격이 바로 Markdown이다. 그래서 Markdown은 Makrup 언어의 한 종류라고 하는 것이다. ※ 참고 - 팀 버너스리는 인터넷을 사유화하지 않고 대중에 기술을 모두 공개한 공로를 인정 받아 영국 왕실로부터 ‘기사작위’를 받았고, 그래서 이름 앞에 Sir.가 붙게 된다. 한국 말로 하면 ‘팁 버너스리 경(卿)’이 되겠다. Markdown 개요Markdown은 2004년에 John Gruber (Blog)와 Aaron Swartz (Blog, Github)에 의해 발표되었다. Markdown의 기획 의도는 「쓰기 쉽고(easy-to-write), 읽기 편한(easy-to-read) 웹문서를 만들기」였다고 한다. Markdown은 일반 텍스트를 웹(Web)상에서 예쁘게 변환해 주는 text-to-HTML 변환 도구이다. 조금 더 쉽게 설명하자면, 일반 텍스트 작성 후 텍스트에 몇 가지 표시를 해 주면, HTML로 변환된 형태로 표현해준다는 의미이다. Text를 HTML로 변환해주는 Markdown은 Perl-언어로 작성되었다고 한다. Markdown이 등장하기 전에도 이미 text-to-HTML 관련 기법&#x2F;도구 등이 많이 나와 시도되고 있었다. 왜냐하면 웹 환경이 변화하고, 더 많은 사용자들이 웹을 사용하다보니, 웹문서로 사용하는 대표적인 마크업 언어인 HTML이 너무 복잡해 짐에 따라 쉽게 읽거나 작성할 수가 없게 되기 때문이다. 또한 모바일 환경의 등장으로 여러 크기의 디스플레이 사이즈에 맞도록 너무 복잡한 스타일(Style)들이 선언되는 등 Markup 언어 본연의 목적인 이식성, 편의성 등이 약해지게 되었다. 그렇기 때문에 Markdown의 경량화된 문법은 당시 유형하던, 그리고 개발자들 사이에서 인정 받던 여러 text-to-HTML 도구들에서 사용하던 Formatted Text 방식의 문법을 차용하게 되었다. Markdown은 제작자의 블로그에 공지된 바와 같이「BSD 라이언스 (Ref1, Ref2, Ref3)」의 무료 소프트웨어이다. Markdown 로고 이미지인터넷을 검색하면 Markdown의 로고는 여러 종류가 나오는데, 가장 대표적인 로고는 Dustin Curtis (Github)가 만든 아래의 버전이다. Markdown의 장점이런 장점 덕분에 Markdown은 Github, GitLab, Jupyter-Notebook, Discord, Wordpress, Tistory 등 최근 Markdown을 지원하는 서비스들이 많아졌다. 문법이 간결하다. 간결한 문법으로 누구나 쉽게 웹문서를 작성할 수 있다. 텍스트 기반으로 작성하므로 특정 기술에 종속적이지 않다. 그래서 용량이 작다. 별도의 도구 없이 테스트 에디터 만으로 작성이 가능하다. 그래서 특정 도구나 OS에 종속적이지 않고 범용으로 사용 가능하다. 이식성이 높다. Markdown은 Markup 언어(language)의 한 종류이기 때문에 Markup 언어의 주요 장점인 높은 이식성을 보인다. 이게 무슨 의미냐면, Github에서 작성한 Markdown 페이지의 내용을 그대로 GitLab, Tistory 등으로 이동시켜도 거의 동일한 방식으로 페이지의 내용이 표현된다는 의미이다. Markdown의 단점단점이라고는 하지만 쓰는 사람이 잘 쓰면 되는 정도의 수준이다. 통용되는 표준이 없다. 대표적으로 사용되는 de facto 표준도 존재하지 않는다. 2021년 기준으로 “딱~ 이거다” 라고 중심점을 잡아주는 라이브러리가 존재하지 않음은 아직 가야할 길이 멀다는 의미이다. 그래서 중심이 되는 문법이 없다. (물론 Github Markdown인 GFM이 de facto가 되어가고 있는 느낌이다.) 경량화된 문법이라곤 하지만, 사용하기 위해서는 여전히 여러가지 공부하고 외워야 한다. HTML의 복잡성을 대신하기 위해 개발되었다보니, HTML에서처럼 복잡한 구조의 문서를 만들 수 없다. 페이지 내 컨텐츠가 많아지면 결국 복잡해진다. 그래서 그냥 Markdown으로 쓰면 더 복잡해지는 경우 Markdown 문서 내에 HTML 문법을 섞어 사용하기도 한다. 대표적으로 table의 규모가 커지면 Markdown 문법보다 HTML 문법이 훨씬 읽기 쉽다. Markdown의 확장자Markdown 파일의 확장자는 .md 혹은 .markdown을 사용한다. 아이러니한 지점, 그리고 저의 계획아이러니하게도 Markdown의 지향점이 읽기 쉬운 문서 작성이었어서 아주 경량화된 기능을 가지고 있다보니, 웹에서 사용하기에 기능 제약이 있고 이에 대한 불편함이 있어 Markdown Extra, Multi-Markdown, CommonMark, RMarkdown 등이 등장했다. 일단 본 블로그의 서비스 창구인 Github와 Github Pages에서 지원되는 Markdown들을 위주로 정리하며 공부할 계획이라 확장판까지 다루지는 않을 거 같다. (현재로서는 그렇다.) 본 글은 “뭔가를 남에게 쉽게 알려줄 수 있을 만큼 정리해야 진짜 아는 것.” 이라 생각하는 개인적인 철학 때문에 정리하는 문서이므로, 딱 그만큼만 하려 한다. 😉 주요 참고 자료 https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language https://ko.wikipedia.org/wiki/HTML https://daringfireball.net/projects/markdown/ http://www.aaronsw.com/weblog/001189 https://en.wikipedia.org/wiki/Markdown https://ko.wikipedia.org/wiki/마크다운","categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"}]},{"title":"천년나무 블로그 이동합니다.","slug":"Xeppetto/ThisBlog/20201011-ThisBlog-New-Greetings-With-Github-Pages","date":"2020-10-11T12:17:00.000Z","updated":"2020-10-30T04:00:00.000Z","comments":false,"path":"Xeppetto/ThisBlog/20201011-ThisBlog-New-Greetings-With-Github-Pages/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/ThisBlog/20201011-ThisBlog-New-Greetings-With-Github-Pages/","excerpt":"","text":"2020년 10월, 천년나무 블로그를 github pages로 이동하였습니다. 1996년에 HTML 3.0을 배워 시작한 웹 개발이 재미있어, 1997년 2월 개인 홈페이지를 오픈했었네요. HTML과 JavaScript, CSS, 그 다음은 CGI와 PHP, ASP, JSP 등등 여러 플랫폼을 거치며 개발도 하고 블로그도 쓰고 했네요. 티스토리, 워드프레스, 블로거 등 여러 무료 블로그 업체들을 오가기도 했고, 직접 개발해서 쓰기도 했었습니다. 그러다 2015년 12월, 문득 ‘모든 걸 멈추어 볼까?’ 싶어 쉬기 시작했습니다. 3년쯤 쉬었을 때 2018년 쯤부터 ‘다시 시작해보자, 블로그도 바꿔야지, 새로 만들어야지…’ 하고 필요사항들을 고려하고, 서버를 조사하고, 프레임워크를 들여다보고, “직접 개발하지 않으면 개발자가 아니다.” 라는 누군가에게 격하게 도발 당해 멘땅에 헤딩하는 식으로 하나 하나 만들려 코딩도 해보고… 했으나… 사람일이라는 것이 참 재밋게도 뭘 좀 하려고 들면 업무가 바빠지고, 개인적인 일이 생기는 등등 여러가지 핑곗거리가 생기더군요. 그렇게 2년을 더 이런저런 핑계를 대며 시간을 보내고… COVID-19 바이러스 덕분일까요? 2020년 추석이 저에겐 워낙 평안했던 덕에 블로그를 드디어 정리했습니다. 이번 추석에 블로그를 정리하고 곰곰히 이런 저런 생각을 해 보았습니다. 진짜 중요한 것은 이런 ‘블로그를 할 시간’이 남아야 하는게 아니라, 제 스스로 ‘하겠다는 의지’로 동기부여가 되는 일이더군요. 가장 기본적인 걸 잊어버릴 때가 가장 어리석은 듯합니다. 가진 게 없어 절실한 마음으로만 살던 젊은 시절에는 비교적 손쉽게 나쁜 버릇들을 떨칠 수 있었으나, 지금은 손에 조금 쥔게 있어서 인지 쉽게 어리석음을 떨칠 수 없는 나이가 된게 아닌가 싶습니다. 이제 매일은 아니더라도, 매주 조금씩 작업해서 올려보려 합니다. 예전 글들도 하나씩 다 옮기려구요. 조금 느리지만 천천히, 그리고 침착히 한 발 자국을 옮겨 나아갑니다. 오래 사용해서인지 무거워져버린 몸과 마음을 가볍게 하기 위함입니다. 그리고 제가 얻은 모잘 것 없는 지식들을 블로그에 하나씩 올려놓으려 합니다. 지금까지 제 인생에 좋은 마음으로 함께 해 주신 모든 분들께 항상 진심으로 감사드립니다. 저와 제 인생의 모든 분들이 세상의 끝을 마주할 때 미련 없기를 기도합니다. 이 글에는 댓글을 남기실 수 없습니다. 이 글의 내용으로 이야기를 하고 싶으시면 제 개인 Social Media로 와주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"}],"tags":[{"name":"감사인사","slug":"감사인사","permalink":"https://xeppetto.github.io/tags/%EA%B0%90%EC%82%AC%EC%9D%B8%EC%82%AC/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"}]},{"title":"블로그 필자 : 『 Lv8+の 꽃怪獸 』 천년나무 아이디 이야기","slug":"Xeppetto/About-Me-and-My-thought/20200701-about-me_Writer-Xeppetto","date":"2020-07-01T13:06:30.000Z","updated":"2021-05-16T16:04:00.000Z","comments":false,"path":"Xeppetto/About-Me-and-My-thought/20200701-about-me_Writer-Xeppetto/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/About-Me-and-My-thought/20200701-about-me_Writer-Xeppetto/","excerpt":"","text":"알림 : 본 글은 2020년 7월 1일 작성하기 시작하여, 2021년 5월 17일에 마무리하였습니다. 긴 시간 동안 바쁜 업무와 많은 생각들을 정리하고, 또 다른 개인 프로젝트를 진행하느라 공개가 늦었습니다. 그래서 2020년의 생각과 2021년의 생각이 마구 엉켜들어가 있습니다. 나무 넝쿨이라 생각해주세요. 미리 드리는 말씀이 페이지는 굳이 필자의 이런 저런 사소한 TMI(Too Much Information)를 알고 싶은 분들을 위해 필자의 이야기들을 늘어 놓았다. 필자는 원체 생각을 많이 하고 사는 인간인데 그 모든 생각을 정리할 수 없으니, 읽으시는 입장에서는 이번 페이지에서 필자가 뭔소리를 하는지 모르실 수 있다. 그런 부분을 미리 말씀드리고 시작해야 겠다 싶었다. 아이디에 대한 TMI 이야기 1편필자의 아이디는 「천년나무」이다. 2008년 말, 2009년 초 즈음부터 사용해 왔다. 아마 이 페이지를 검색으로 들어오신 분들은 아마 쿠키를 검색하고 들어오지 않으셨을까 싶다. 필자는 이 녀석(&#x3D;천년나무 쿠키)이 아니다. 필자가 따라한게 아니라, 이 녀석이 필자 뒤에 나왔다. (심지어 주택공사의 아파트 브랜드 중 하나인 ‘천년나무’ 브랜드도 필자보다 늦게 나왔다.) 아마 조만간 「쿠키런킹덤」이라는 작품 덕분에 팔자의 아이디는 검색되지 않고 온통 이 녀석만 검색이 되겠지. 어쨌거나, 디자인 예쁘게 나왔네. ‘정령의 왕’이라는 컨셉도 마음에 든다. (하지만 필자는 「쿠키런킹덤」은 그만 두었다. 모바일 게임은 패턴이 비슷해서 필자가 두 달 이상 플레이하게 만든 게임이 없다.) 필자도 아이디를 만들 때 하늘에 둥둥 떠다니는 정령 가득한 「세계수(World Tree)」 컨셉을 잡고 아이디를 만들었는데, 아마 저 쿠키 기획하신 분도 필자랑 취향이 비슷한 분인가 싶다. 동지일까 싶고… 다만, 필자는 아이디에도 Full Name이 따로 있는데, 모두 풀어쓰면 바로 「Lv8+の꽃怪獸」이다. ‘레벨8의 꽃괴수’다. Monster인데 레벨도 겨우 8 정도라 누구나 만만히 보고 때려 잡을 수 있지만, 그 뿌리는 결코 죽지 않고 살아남아 결국 「세계수」가 되어가는 그런 스토리를 상정하며 아이디를 만들었더랬다. 그림 출처 : Cholong Lim님의 작품 - https://tinct.artstation.com/ 아이디에 대한 TMI 이야기 2편필자는 나무들을 좋아한다. 물론 나무들이 필자를 좋아하는지는 모르겠다. 그랬으면 좋겠다. 필자는 특히 커다란 나무들을 좋아한다. 사실 거의 모든 동식물들을 좋아하긴 한다. 아마 아버지의 영향을 받은 것도 있겠으나, 잘 모르겠는데 그냥 어릴 때부터 나무가 좋았다. 그래서인지 게임에 나무가 등장하면 필자의 마음이 더 동(動)하는게 있다. 아마 그 첫 시작은 (중1때인가 처음 플레이했었던) 게임 ‘이스1’이었던거 같다. 시크한 사춘기 소년의 마음이라면 원래 “뭐라고? 나무가 말을 한다고? 푸헤헤”가 되어야 하는데, “와~ 스토리 설정 짱 멋지다.”라고 생각하며 굉장히 감동하면서 당연하게 받아들인거 같다. 그 이후로도, 워크래프트 게임 시리즈에 나온 「놀드랏실이라는 이름의 세계의 근원」, 그리고 아바타라는 영화에 나온 「영혼의 나무」 같이 게임이나 영화에 뭔가 나무가 중요한 역할로 출연하게되면 필자는 이상하게 열광하며 더 집중하고 반복적으로 플레이&#x2F;시청하게 되곤 한다. 그래, 그참, 나무를 좋아라 하는 필자 되시겠다. (제발 나무들도 필자를 좋아해야 할텐데…) 큰 나무는 뭔가 막연히 좋다. 등산을 가거나, 트래킹을 하면서 숲에 가서 가끔 큰 나무를 만나면, 조용히 손을 얹고 혼자 인사하곤 한다. “안녕?” 아이디에 대한 TMI 이야기 3편「천년나무」라는 아이디를 정할 때 마지막으로 영향을 준 건 친구들 때문에 끌려가 억지로 본 사주풀이 때문이다. 필자는 미신을 좋아하지 않는다. 점도 보지 않는다. 그런 것들이 비과학적이라고 생각해서도 있지만, 또 한편으로는 ‘그게 맞을 가능성’에 대해 두뇌 속에서 완전히 배제해 놓지 못하고 있다보니 누군가 필자의 삶을 들여다보고 정해진 규칙대로 정의내리면 기분이 나쁠거 같아서 최선을 다해 그런 자리를 피해다닌다. 그런데, 2005년 즈음부터 길거리에 사주봐주시고 타로점 봐주시는 분들이 생기기 시작했다. 당시에 술에 거나하게 취한 친구놈들이 2차를 옮기는 중에 자기 결혼 사주 보겠다며 주정을 부려 필자를 억지로 끌고가 같이 사주를 보게 됐다. 아무리 싫다고 발버둥 쳐도 자기 주위에 이런거 같이 봐줄 사람이 필자 밖에 없다며 떼를 써서 늘 끌려가다 싶이 본거 같다. 그러고보면 필자는 참 ‘인상 좋게’ 생긴… ‘호구롭게’ 생긴… 그런 ‘막굴려먹는’ 친구가 아닐까 싶다. 아무튼, 당시엔 그런게 유행이었다. 그렇다보니 유행에 민감한 한국 사람들은 남들 해보는건 다 해봐야 하지 않겠는가. 이놈이고, 저놈이고, 남자 녀석들이고, 여자 녀석들이고… 만날 때마다 징징대길래 끌려가서 총 네 번이나 보기 싫은 사주를 봤는데 필자가 우려하던 상황이 됐다. 서로 다른 네 분이 같은 이야기를 해서 그렇다. 필자는 누군가 필자 삶의 흐름을 들여다보고, 정해진 규격대로 판단하고, 평가하고, 정의 내려 버리는게 당시에는 너무 너무 싫었다. 그래서 사주를 보기 싫어했다. (지금은 워딩이 정확히 기억나지 않지만 대충 이런 식이었다.) 『자네는 삼만년 묵은 나무일세. 여기서 삼만년이란 진짜 숫자 30000이 아니라, 옛 조상님들이 ‘아주 오래됐다’는 말씀을 하실 때 ‘삼만년 묵은’이라고 하셨다네. 자네는 삼만년 묵은 나무인데 너무 커서 숲을 다 뒤덮고도 남아. 자네한테서 떨어지는 나뭇잎, 열매로 숲이 다 먹고 살 수 있지만, 그 숲에서 사는 동식물들은 그걸 당연하게 여기고 자네에게 고마워하지 않을걸세. 자네는 어느 회사를 가나 인정은 받겠지만, 늘 맞아들의 역할을 해서 고단할 거고, 자네가 만들어 놓은 성과를 받아 먹고서 고마워하는 이들도 있겠지만 대부분 당연히 생각하게 될테니, 그런 부분에 스트레스 받고 살지 않으면 건강히 오래 살 것이네.』 꼭 무슨 게임의 NPC가 하는 말 같지만, 실제로 저런 식의 말을 들었다. 무려 네 번이나. 그림 출처 - https://wallpaperaccess.com/world-tree 사실 그 말을 들은 당시에도 그렇게 살고 있었어서 처음 들었을 때는 너무나도 께름직 했었다. 회사에서 업무 개선해야 할 부분들은 왜 필자의 눈에만 보이는지 모르겠고, 다들 어떻게 저렇게 맘편히 살까 궁금했다. 다들 조금만 더 노력하면 다 같이 편하게 할 수 있는 업무 자동화, 테스트 자동화는 손도 안대고 있어서 6개월을 혼자 야근해가며 해낸 적도 있다. 근데 열매만 쏙 빼먹고, 자기가 + 자기도 했다고 보고 하는 인간 군상들을 보며 회사와 업무에 질려하고 있을 때였다. 그런 상황에서 몇 달, 몇 년에 걸쳐 서로 다른 네 분이 모두 필자에게 동일하게 말을 하니 처음에는 신경이 곤두서다가, 두 번 째는 처음 분이랑 동일한 말을 하시니 신기해 하다가, 세 번 째 들을 때 쯤엔 그런가보다 했다. 네 번 째는 또 똑같이 말하나 확인차 간거고. 아마 저 명리학인지 뭔지, 사주 책이란거에 그렇게 쓰여 있나보다 생각하고 말았다. 어쨌든, 그 사주라는 분야에 필자의 인생을 ‘아주 오래 돼고 거대한 나무’로 정의 했다면 그 또한 받아들이고 살면 좋지 않나 생각하게 됐고, 그래서 필자는 결국 아이디를 「천년나무」로 개정했다. 그리고, 그 즈음 알게된 공자님의 말씀을 가슴에 새겨 넣고, 필자가 이루어낸 성과 빼먹는 인간군상들도 너무 미워하지 않기로 했다. (사실 아직도 밉긴하다. 예전보단 관대해졌지만…) 子曰 不患人之不己知 患不知人也.공자께서 말씀하길 “남이 나를 알아주지 않음을 걱정하지 말고, 내가 남을 알지 못함을 걱정하라.” 아이디에 대한 TMI 이야기 4편필자는 인터넷이 나오기 전, PC 통신의 초창기 때부터 네트워크에서 활동했다보니 꽤 오랫동안 아이디가 있었다. 그 이전에 오락실에서 신기록 수립 시에 쓰던 아이디도 있었고. 아이디 Too Much Information PJH 필자의 본명 이니셜을 따서 어린 시절 오락실에 새기고 다녔던 아이디이다. demonic PC 통신이란게 등장한 초기에 ‘하이텔’을 제일 먼저 사용했고, 당시엔 사춘기 소년이라 demonic이라는게 쿨해보여 지은 아이디이다. angelic 대략 1995년까지 사용한듯 하다. PC 통신 3사(천리안, 하이텔, 나우누리)를 모두 사용하면서 아이디를 변경했다. angelic 이 아이디는 인터넷 초창기인 1995년부터 1997년 즈음 ‘네티앙, 신비로, 한메일’ 등에 사용했다. xelion 1996년, 처음 인터넷 계정을 만들면서 변경했다. 당시 미쳐있던 스타크래프트1편에 나오는 Xel’naga라는 외계인들의 이름에서 Xel을 따와 만든 아이디였다. 최근까지 사용하다가 폴란드의 은행이 생겨 유럽 해커들이 필자의 아이디가 은행 아이디인지 알고 자꾸 해킹을 시도해서 2 way authetication을 모두 설정했지만, 그래도 이러저러한 사정으로 녀석들이 귀찮아서 변경하는 중이다. teveloper&amp;nbsp;&amp;nbsp;&amp;nbsp; 2017년부터 2019년까지 약 3년간 사용했다. Testing 잘하는 Developer라는 의미로 Teveloper라 하였으나, 필자 주위의 많은 사람들이 읽어 보면 느낌이 이상하다고 반대해서 버리기로 했다. xeppetto teveloper를 버리고 2020년부터 사용하는 아이디이다. Xel의 X를 그대로 살려 다시 사용해야 겠다고 생각했다. 현재 블로그도 이 아이디로 생성했다. 아이디에 대한 TMI 이야기 5편인터넷이 발달하던 네트워크 통신의 초창기에 아이디라는 건 그냥 필자의 정보를 담아두는 증명 같은 걸로 생각했는데, 어느 순간 대폭발이 일나며 갓난 아이도, 노령층도 모두 사용하는 공간이 되었다. 그러면서 어느 정도는 사용자 아이디가 자신의 정체성을 대변하는, 혹은 정체성을 숨기기 위한 수단으로 변했다. 현재 사용 중인 Xeppetto는 피노키오를 만든 할아버지 목수인 제페토(Geppetto)를 토대로 만든 아이디이다. 잘난 개발자는 되지 못하더라도, 즐기면서 뭔가를 계속 만들어가는 개발자는 될 수 있겠다 싶어, 문득 제페토를 선택했다. 그림 출처 - https://www.rjohnwright.com/products/geppetto-pinocchio-marionette-chronology 피노키오를 만든 사람은 왜 젊은이가 아니라 할아버지인지 모르겠다. 어쩌면 필자도 이런 글들을 할아버지가 될때까지 기록해봐야지 싶다. 멈추지 말고 뭔가를 계속 만들어가자고 스스로 다짐해 본다. 이 블로그의 목적은 필자의 인생 이야기들을 담을 그릇으로서의 역할을 할 것이기에. 이 페이지는 누군가에게 답변을 받고 싶어 쓴 글이 아니므로 댓글을 남기실 수 없도록 조정했습니다. 함께 이야기를 나누고 싶으시면 제 Social Media로 오셔서 친구 추가 해 주세요.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"}],"tags":[{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"소개","slug":"소개","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%EA%B0%9C/"},{"name":"쿠키 아님","slug":"쿠키-아님","permalink":"https://xeppetto.github.io/tags/%EC%BF%A0%ED%82%A4-%EC%95%84%EB%8B%98/"},{"name":"사람임","slug":"사람임","permalink":"https://xeppetto.github.io/tags/%EC%82%AC%EB%9E%8C%EC%9E%84/"}]},{"title":"[명언] 간디 - 스스로 변화하라","slug":"배움/명언/20200323_간디-스스로변화하라","date":"2020-03-22T18:23:00.000Z","updated":"2020-03-22T18:23:00.000Z","comments":true,"path":"배움/명언/20200323_간디-스스로변화하라/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/20200323_%EA%B0%84%EB%94%94-%EC%8A%A4%EC%8A%A4%EB%A1%9C%EB%B3%80%ED%99%94%ED%95%98%EB%9D%BC/","excerpt":"","text":"세상의 변화를 바란다면, 스스로 그 변화가 되어야 한다. - 마하트마 간디 You must be the change you want to see in the world. - Mahatma Gandhi 이 글은 2020년 3월 23일이라고 기록된 필자의 메모 속에서 발견된 자료이므로, 해당 날짜로 블로그를 포스팅합니다. 천년나무의 생각 - 2021년 10월 17일의 회고필자는 2021년 현재 PM으로 일하고 있다. Product Manager가 공식 직함이지만, 사실 Project Manager 역할도 하고 있고, Developer 역할과 Technical Writer도 겸하고 있다. 그 모든 역량이 한 번에 모이는 지점의 업무가 현재 재직중인 회사의 업무이다보니, 그냥 그렇게 자연스럽게 되어왔고 현재 진행 중인 이 신-사업이 풀려가는 어느 시점까지 한 동안 계속 그렇게 살게될 듯 하다. 현재 업을 하기 전 어느 날 Tester로 살다가 ‘아, 이제 내가 진짜 QA가 됐구나’ 싶은 순간이 있었는데 간디가 남기신 이 명언을 보고 예전에 진행했던 업무와 관통하는게 있다고 느껴졌다. 필자가 프로세스 개선을 할 때 버릇 중 하나는 그냥 옳다고 믿는 방법론을 밀어붙이기 보다는 최소한 일주일이라도 필자가 스스로에게 직접 적용해본 뒤 하자고 제안한다. 「내가 하기 싫은 일은 남도 하기 싫다」가 필자가 가진 철학 중 하나이다보니, 절대 다른 사람에게 옳다고 믿는 신앙을 전파하지 않고, 실제로 어느 정도 경험해 보고 말을 한다. 스스로에게. 그렇게 변화를 말로 하지 않고 먼저 스스로에게 적용해보는 짓거리(?)를 많이 해 본 덕분에 요새는 어떤 상황에서 어떤 방법론적 개선을 도입하면 결과가 어떻게 나오겠구나 싶은 순간들이 있다. 많은 경험에서 나오는 결과다보니 예상이 의외로 맞아떨어지는 확률이 높다. 그런 예상들은 어느 정도의 데이터를 기반으로 예측하는 건데, 오해도 많이 받았다. 사람들은 자신들이 그런 조직의 변화나 사람의 인지심리에 대한 데이터를 다루지 못하다보니 필자를 이상하게 오해하곤 한다. 2014년엔 ‘예언자, 박수무당’ 소리도 들었는데 뭐랄까, 그 어감이나 호칭이 썩 좋지 않아서 최근 몇 년간은 estimation하는 결과를 속으로만 생각하지 사람들에게 잘 내비치지 않는다. 필자 기분이 나쁜 이유도 있지만, 또 대부분의 경우 경고성 예측을 경시하다가 실제로 그런 일이 일어나기 시작하면 그런 말을 했던 사람에게 책임을 전가하려 들기 때문에 더 이상 말을 하지 않는 이유도 있긴하다. 프로세스 개선을 하다보면 항상 어느 조직에서나 ‘박힌돌’들이 문제가 되는데, 사실 그 ‘돌’들이 그때까지 그 회사에서 최선을 다해, 충성하며, 열심히 해 왔기 때문에 그 회사가 거기까지 사업이 확장되었음을 인정하면서 더 나은 방향을 찾아야 하기 때문에 어려움을 야기시킨다. 실무에서의 문제는 그들의 방식이 낡아서 더 이상 시장에서 통하지 않거나, 더 좋은 방식이 등장했는데도 예전 모습 그대로 일을 진행하려는 고집스러움을 쉽게 꺾거나 설득시키기 어렵다는 점이다. 정보를 공유하지 않고, 조직을 고착화 시킨다. 신입 사원들도 보고 배운게 그런거라, 그와 동화되어 석화(石化)되어 간다. 그래서 그런지 요새는 나이든 꼰대 만큼이나 젊은 20대, 30대 꼰대들이 참 많이 보인다. 세상의 변화를 바란다면 본인 먼저 변화가 되어야 한다. 스스로를 돌아보고 나부터 변하지 않으면 세상은 영원히 변하지 않는다. References 이미지 출처 : 마하트마 간디","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"명언","slug":"배움/명언","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/"}],"tags":[{"name":"세상","slug":"세상","permalink":"https://xeppetto.github.io/tags/%EC%84%B8%EC%83%81/"},{"name":"명언","slug":"명언","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%96%B8/"},{"name":"간디","slug":"간디","permalink":"https://xeppetto.github.io/tags/%EA%B0%84%EB%94%94/"},{"name":"변화","slug":"변화","permalink":"https://xeppetto.github.io/tags/%EB%B3%80%ED%99%94/"}]},{"title":"【斷想】 애자일의 명사화","slug":"Xeppetto/단상(斷想)/20200108-애자일의-명사화","date":"2020-01-08T11:01:08.000Z","updated":"2020-01-08T11:01:08.000Z","comments":true,"path":"Xeppetto/단상(斷想)/20200108-애자일의-명사화/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20200108-%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%98-%EB%AA%85%EC%82%AC%ED%99%94/","excerpt":"","text":"필자의 블로그 중 다른 글인 「2021년-나의-품질-인생에-대해-다시-생각하다」에서 언급한 바와 같이 필자는 애자일 개발이 한국에 퍼져 유행하기 전에 이미 굉장히 애자일한 방식으로 개발하는 분들을 경험한 적이 있다. 그렇게 2000년대 초반, 한국의 애자일 1세대들은 자신들이 애자일 하게 개발하고 있는지도 몰랐는데 어느 날 자신들의 행동이 애자일한 개발이라는 걸 깨달은 세대라고 필자는 개인적으로 생각하고 있다. 이후에 필자처럼 대유행이 불기 전 애자일 개발을 받아들인 세대들은 그 정체와 근본을 파악하려 했고, 필자처럼 어느 정도 파악하고 나서 ‘별거 없네’ 하고 떠난 사람들, ‘이 좋은 걸로 증명하겠어’라며 실천하는 사람들, 그리고 다른 이들에게 ‘이 좋은 것’ 알리려 긴 여정을 시작한 사람들로 나뉜 듯 보인다. 그런데 다른 사람들에게 전달하는 그 과정에서 뭐가 잘 못 되었는지, 최근의 애자일은 “애자일을 한다”라고 ‘명사화(noun-化)’ 되어 있고, 이제 “우리는 애자일 해요”라는 표현은 “우리는 뭔가 Cool한 새로운 짓거리를 하고 있어” 정도의 마케팅 용어가 되어 버렸다. “애자일 개발(Agile Development)”이라는 문구에서 사용하는 ‘기민한(Agile)’으로서 사용되던 형용사 표현은 어디론가 사라져 버렸다. 그 기민한 형용사, Agile은 어디로 갔을까? 형용사가 사라진 자리에 자리매김한 뒤 자체적인 의미를 가진 대명사가 된 애자일은 어쩌면 그 자체로 기복 신앙이 되어 버렸을지도 모르겠다. “우리는 애자일을 하고 있으니 우리에겐 복이 올 거야, 다 잘 될 거야….”라는 심정으로 매일 아침 필요도 없는 스크럼 회의를 하는 경우, 어느 종교의 매주 주일을 지키는 심정으로 일정 기간이 되면 회고를 하는 경우 등이 그 기복 신앙의 증거라 할 수 있겠다. 너무 비꼬듯이 표현했지만, 사실 이유가 있다. “애자일을 하면 개발이 잘 돼요, 모든 건 폭포수 잘못이에요”라는 얼토당토않은 말들을 하는 애자일 전파자들이 참 많아서 그렇다. 그럴리가 있나? (한국에서 폭포수를 제대로 한 곳이 없는데…) 필자는 그렇게 생각한다. 방법론이란 걸 잘 몰랐을 때 개발을 좀 못하고, 무능하다 소리 듣는 건 괜찮다고 본다. 그런데, 과거 자신의 무능력함을 ‘폭포수’라는 멀쩡한 방법론에 책임을 전가하는 건 진짜 나쁜 행위다. 최근 몇 달간 애자일의 ‘애’ 혹은 ‘A’ 자도 꺼내지 않은 채, 그냥 필자 스스로 굉장히 애자일 하게 ‘형용사처럼…!’ 일을 하고 있다. 팀의 특성상 주니어들이 많아 보여주고 싶은 것도 좀 있는데, 거창하게 애자일 개발이 뭐니, 어쩌니 하고 싶지 않았다. 그런 필자의 행위에 가장 큰 영향을 받는 쪽은 확실히 주니어들로 보인다. 자기들이 어떻게 일하고 있는지 명확히 모르는 상태에서 필자 행동 양식 몇 가지를 따라 하는 모습을 보인다. 신기하다. 과연 이론적인 소양을 전혀 제공하지 않고, 행위로만 교육하는 게 가능할지 궁금한다. 실험을 하기에 적합한 구조의 조직이다. 지금 조직은 이걸 실험해 보기에 괜찮다. 실험은 계속된다. 쭈욱. ※ 현 시점에서 필자 결론 : 일은 그냥 잘 하는게 맞는거다. 애자일이니, 어른자일이니, 이런 방법론이니 뭐니 하는 괜한 수식어는 불필요하다. 거추장 스럽다. 이 포스팅은 2020년 1월 8일이라고 기록된 필자의 페이스북 담벼락에서 발견된 자료이므로, 해당 날짜로 포스팅했습니다. 천년나무의 생각 - 2022년 1월 8일의 회고페이스북에서 가끔 ‘과거의 오늘’ 메뉴를 켜고, 이전의 나는 무슨 생각을 하며 살았는가를 들여다보곤 한다. 과거 1월 8일에는 생각이 많았나 보다. 글들이 잔뜩 있다. 아무래도 해가 바뀌고 했다 보니 이런저런 잡생각들이 많았겠지 싶다. 사실 필자의 이 생각은 Dave Thomas라는 전문가가 어떤 강연에서 했던 말을 필자의 경험과 더불어 정리한 걸로 보인다. Dave Thomas는 실용주의 프로그래머 (The Pragmatic Programmer)의 저자이다. 혹시 이 글을 보는 사람 중 Dave Thomas에 대해 더 알고 싶은 분들은 위 사진을 클릭하거나, 아래 링크를 클릭하시면 되겠다. Dave Thomas의 블로그 : https://www.thoughtworks.com/profiles/d/dave-thomas 필자는 사실 그의 많은 블로그 글들과 강연들을 좋아한다. 어릴 적 필자가 재미있게 읽었던 책들을 쓰셨던 살아 있는 전설적 전문가 중 한 분이시기 때문이다. 그중 필자가 좋아라 하는 강연을 하나 공유한다. 그는 이 강연에게 “애자일의 4대 원칙”은 자신이 만들었으며, 자신은 “테스트 전문가가 반드시 필요하다고 생각한다”라고 말한다. 필자는 이 강연을 보면서 키득 키득대며 봤다. 그동안 쌓인 게 꽤 많으셨구나 싶었어서…","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"개인 의견","slug":"개인-의견","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%9D%98%EA%B2%AC/"},{"name":"애자일","slug":"애자일","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC/"},{"name":"명사화","slug":"명사화","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%82%AC%ED%99%94/"},{"name":"애자일은 없다","slug":"애자일은-없다","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%80-%EC%97%86%EB%8B%A4/"},{"name":"애자일 개발이다","slug":"애자일-개발이다","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC-%EA%B0%9C%EB%B0%9C%EC%9D%B4%EB%8B%A4/"},{"name":"애자일 개발","slug":"애자일-개발","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC-%EA%B0%9C%EB%B0%9C/"}]},{"title":"[斷想] 세상은 수 많은 나로 이루어져 있다.","slug":"Xeppetto/단상(斷想)/20181007-세상은-수많은-나로-이루어져있다","date":"2018-10-07T11:07:08.000Z","updated":"2018-10-07T11:07:08.000Z","comments":false,"path":"Xeppetto/단상(斷想)/20181007-세상은-수많은-나로-이루어져있다/","link":"","permalink":"https://xeppetto.github.io/Xeppetto/%EB%8B%A8%EC%83%81(%E6%96%B7%E6%83%B3)/20181007-%EC%84%B8%EC%83%81%EC%9D%80-%EC%88%98%EB%A7%8E%EC%9D%80-%EB%82%98%EB%A1%9C-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A0%B8%EC%9E%88%EB%8B%A4/","excerpt":"","text":"세상은 수 많은 나로 이루어져 있다. 저 높은 하늘을 바라보는 자도 나요,드넓은 바다를 바라보는 자도 나다.바람도, 나무도, 꽃도, 새도, 나비도…세상이 아름다운 것은 아름다운 나로부터 출발한다. 항상 “나는 무엇인가?”에서 모든 질문이 시작해야 한다.그리고 같은 선상에서 ‘모든 세상은 당신으로 이루어져 있음’도 존중해야 한다. 어떤 이의 자세가 틀려보인다고 해도,그 이의 자아를 파괴하고 억압하려 드는 건 근본적으로 인간이 글러먹은거다. - 어떤 이가 회의 시간에 직장 내 갑질하는 소리를 듣고 있다가 써놓은 메모에서… 참고자료 https://writer7.medium.com/self-identity-goals-c6b16de8ea1 필자의 짧은 생각에 대해 간단히 적습니다. 댓글 기능은 막아둡니다.【단상】의 글들은 행복하게 살고자 하는 필자 개인의 생각이므로 딱히 누군가의 댓글을 받고 싶어 쓰는 글은 아니니, ‘이 사람은 이런 쓸데 없는 생각을 하고 사는 구나~’ 정도로 생각해 주시면 좋겠습니다.굳이 이야기를 나누고 싶으시면 제 Social Network 계정으로 와주세요. 감사합니다.","categories":[{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"}],"tags":[{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"개인 의견","slug":"개인-의견","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%9D%98%EA%B2%AC/"},{"name":"자아","slug":"자아","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EC%95%84/"},{"name":"나","slug":"나","permalink":"https://xeppetto.github.io/tags/%EB%82%98/"},{"name":"세상","slug":"세상","permalink":"https://xeppetto.github.io/tags/%EC%84%B8%EC%83%81/"},{"name":"자세","slug":"자세","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EC%84%B8/"}]},{"title":"[명언] 랄프 에머슨 - 무엇이 성공인가","slug":"배움/명언/20120501_무엇이-성공인가","date":"2012-04-30T16:27:00.000Z","updated":"2021-09-08T15:00:00.000Z","comments":true,"path":"배움/명언/20120501_무엇이-성공인가/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/20120501_%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%84%B1%EA%B3%B5%EC%9D%B8%EA%B0%80/","excerpt":"","text":"무엇이 성공인가 자주 그리고 많이 웃는 것 현명한 이에게서 존경받고 어린아이에게서 사랑받는 것 정직한 비평가에게서 찬사를 받고 친구의 배반을 참아내는 것 아름다운 것을 식별할 줄 알고 다른 사람에게서 장점을 발견해 내는 것 건강한 아이를 하나 낳든 한뙤기의 밭을 가꾸든 사회환경을 개선하든 자기가 태어나기 전보다 조금이라도 살기 좋은 곳으로 만들어놓고 떠나는 것 이 땅에 잠시 머물다감으로써 단 한 사람의 인생이라도 행복해지는 것 이것이 진정한 성공이다. - 랄프 왈도 에머슨 Success To laugh often and muchl to win the respect of intelligent people and the affection of children; to earn the appreciation of honest critics and endure the betrayal of false friends; to appreciate the beauty; to find the best in others; to leave the world a bit better, whether by a healthy child, a garden patch Or a redeemed social condition; to know even one life has breathed easier becuase you have lived. This is to have succeeded! - Ralph Waldo Emerson 이 글은 2012년 5월 1일이라고 기록된 필자의 메모 속에서 발견된 자료이므로, 해당 날짜로 블로그를 포스팅합니다. 천년나무의 생각 - 2021년 9월 9일의 회고2021년 어느날의 회사 주간 회의 시간, 코로나 바이러스로 일상이 되어 버린 온라인 회의 중 대표님이 보여주신 이 글을 보고 참 멋지다고 생각해 블로그에 포스팅해야겠다 마음먹고, 내 메모장인 OneNote를 켰더니… 이미 같은 제목으로 2012년에 메모된 내용이 있었다. 아마 그때도 이 시를 보며 참 멋지다고 생각했겠지 싶다. 랄프 에머슨은 인생을 살면서 인생에서의 성공이란 무엇인가에 대한 자신의 통찰을 가슴에 와닿는 시로 잘 표현해 두었다. 필자도 만 40세가 넘으면서 짧지 않았던 자신의 인생에 대해 계속 회고해온 거 같다. 그 고민은 잠깐하고 말아버린게 아니라, 몇 년간 지속되었다. 그리고 랄프 에머슨 같은 대가의 철학에 감히 미치지 못하겠지만, 필자 나름대로의 개인적 결론을 내렸다. 인생은 행복하기 위해 사는 것이고, 하루하루, 매일매일이 행복하면 성공이다. 그리고 그 행복이라는 건 자기 자신을 잘 아는데에서 시작된다. 내가 무엇을 하고 싶은지, 내가 무엇을 먹고 싶은 지, 내가 누구를 좋아하는지, 내가 어떤 때 즐겁고, 어떤 때 슬픈지, 내가 어떤 때 두려움을 느끼고, 어떤 때 화가나며, 어떤 때 여유로움을 느끼는지 같은 것들. 자신의 감정에 솔직해지고, 자신을 타인의 시선에서 분리하는 것이 바로 행복의 시작임을 깨달았다. 그리고 그 오랜 시간 동안 종교를 가진 신자였음에도 예수와 부처가 했던 말들이 결국 이 지점을 이야기하는 거였구나 하는 것도 깨닫게 됐다. 그냥 이 세상이, 이 대자연이 자연스럽게 자연히 있는 대로 그대로 인정하고 나도 자연의 일부임을 알고, 세상과 함께 동화되는 것. 그러면 큰 감정의 울림이나 뒤틀림 없이 ‘생긴대로 살 수 있음’을 깨달았다. 모든 일은 이유 없이 그냥 일어나는 일이고, 나는 그 사건을 스쳐지나가는 인생의 여행자일 뿐임을. 인생의 여행길에서 만난 사건들에 일일히 대응할 필요도 없고, 스쳐지나가는 사람들에게 일일히 내 에너지를 모두 쏟을 이유도 없다. 그런 건 내 기준이 아니라 남의 기준이었던거다. 그래야 한다고 교육 받았고, 그래야 멋있는 사람인 듯한 착각 속에 살았던 거다. 어린 시절, 그리고 젊은 날의 수많은 나의 고민들은 결국 나의 것이 아니라 남의 기준이었음을 깨달았고, 한 방에 되지 않지만 계속 노력하며 그런 굴레에서 벗어나려 애쓰고 있다. 그 깨달음을 얻고 스스로의 생활 속에 녹여 넣으려 노력한지 몇 년. 지금의 마음 상태는 몹시 평온하다. 남들보다 조금은 더 민감하고, 고생한 탓에 일찍 무언가를 얻었다는 생각이 든다. 이젠 행복해야지. 랄프 왈도 에머슨의 말처럼, 세상에 티끌만큼의 변화라도 줄 수 있다면 그것이 성공이고, 행복임을 이제 이해할 수 있는 나이가 되었기에. 조금은 세상살이에 여유로워진 나 자신을 돌아보며. 오늘도 맛있는 거 먹고, 웃으면서 살아야겠다. References 이미지 출처 : Britannica - Ralph Waldo Emerson","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"명언","slug":"배움/명언","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/"}],"tags":[{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"명언","slug":"명언","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%96%B8/"},{"name":"랄프 에머슨","slug":"랄프-에머슨","permalink":"https://xeppetto.github.io/tags/%EB%9E%84%ED%94%84-%EC%97%90%EB%A8%B8%EC%8A%A8/"},{"name":"시","slug":"시","permalink":"https://xeppetto.github.io/tags/%EC%8B%9C/"},{"name":"성공","slug":"성공","permalink":"https://xeppetto.github.io/tags/%EC%84%B1%EA%B3%B5/"}]},{"title":"[명언] 플립사이드 - 문제, 기회, 창조","slug":"배움/명언/20100127_플립사이드","date":"2010-01-26T16:27:00.000Z","updated":"2010-01-26T16:27:00.000Z","comments":true,"path":"배움/명언/20100127_플립사이드/","link":"","permalink":"https://xeppetto.github.io/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/20100127_%ED%94%8C%EB%A6%BD%EC%82%AC%EC%9D%B4%EB%93%9C/","excerpt":"","text":"모든 문제 속에는 그 문제를 완전히 뒤집는 크고 작은 소중한 기회가 숨겨져 있다. 이 세상의 거의 모든 성공 스토리는 문제나 장애를 똑바로 인식하고 그 문제를 기회로 바꾼 사람들에 의해 창조되었다. -아담 J 잭슨, ‘플립사이드’에서 이 글은 2010년 1월 27일이라고 기록된 필자의 메모 속에서 발견된 자료이므로, 해당 날짜로 블로그를 포스팅합니다. 천년나무의 생각 - 2021년 11월 25일의 회고이 책에 대한 메모를 쓴 건 2010년, 그리고 지금은 2021년이다. 그 긴 시간, 꽤 오랜 시간의 공부 끝에 한 마디로 정의할 수 있게 되었다. Software에서 「Testing은 개발 관점의 활동」이고, 「QA(Quality Assurance)는 경영 관점의 활동」이다. 그 QA라는 걸 잘하기 위해서는 반드시 어떤 정황, 데이터의 흐름과 결과를 보고 판단할 수 있어야 한다. 그 정황이나 결과 데이터는 항상 딱 떨어지는 형태로 발생하지 않기에 현재 일어난 상황을 왜곡 없이 있는 그대로 분석하고 판단할 수 있도록 필요한 데이터를 만들어내는 게 참 어려웠다. QA라는 명함을 달고 더 높은 곳으로 발돋움해 보려는 이에게는 바로 그곳이 넘을 수 없는 벽이었다. 할 수 있다는 긍정적인 마음만으로는 넘을 수 없었던. 필자는 이 명언 속의 내용을 「현실을 직시할 수 있는 용기」라 칭한다. 필자는 이것을 ‘능력’이나 ‘역량’이라 하지 않고 ‘용기’라 칭한다. 이 세상엔 어떤 상황을 낫게 만들 수 있다고 여겨지는 수많은 방법론들이 존재하지만, 필자는 바로 이런 용기가 프로세스 개선의 핵심 중 하나라 생각한다. 필자의 시선이 삐딱한 걸까? 꽤나 많은 사람들은 현실의 벽에 부딪혀 현실을 직시하지 못하고 자신의 시선이 아닌, 자기 상사의 시선으로 사안을 바라보거나, 또 누군가는 자신의 욕망을 채우려 이기적 관점에서 사안을 해석하는 듯했다. 그렇게 얻어진 데이터들은 정상적인 방향을 가지지 못하고 조직을 망가뜨리는 방향키가 되는 모습을 꽤 여러 번 목격했다. 그래서 그 데이터들을 올바르게 도출하고, 올바르게 해석할 수 있는 것은 역량이라기보다, 그 현실에 맞서 올바름을 언급할 수 있는 용기에 가까워 보였다. 그런 종류의 고민을 하던 즈음이 아마 2007년~2008년이었던 듯하고 당시 커뮤니티에서 만나 말이 잘 통했던 질풍노도의 테스터 - 잔다르쿠와 함께 이런 이야기들을 하기 시작했다. 우린 이런 종류의 이야기를 할 땐 참 죽이 잘 맞았다. 그래서 함께 “현실 직시 방법론”을 만들어보자며 의기양양하게 토론과 스터디를 했지만… 몇 달 이야기를 하다가 문득 닥쳐온 막막함에 우리의 논의는 자연스럽게 사그라들었고, 그렇게 소멸되었고, 논의는 해체되었다. 왜냐하면 그건 우리의 역량으로 될 일은 아니었다. 그즈음 읽었던 ‘플립사이드’라는 책의 저 한 마디는 우리가 그렇게 주장하고 싶어 하던 바를 한 방에 꿰뚫는 거장의 경험 공유였다. 지금 다시 읽어도 우리가 주장하려던 “현실 직시”는 이렇게 오랜 경험을 쌓은 거장들이 주장할 일이었던 거 같다. 거장은 될 수 없더라도, 거장의 발자취는 뒤늦게나마 쫓아 따라갈 수 있어 참 다행이라 생각하는 하루의 회고, 끝. References 이미지 출처 : 교보문고 - 플립사이드","categories":[{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"명언","slug":"배움/명언","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/"}],"tags":[{"name":"명언","slug":"명언","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%96%B8/"},{"name":"도서","slug":"도서","permalink":"https://xeppetto.github.io/tags/%EB%8F%84%EC%84%9C/"},{"name":"플립사이드","slug":"플립사이드","permalink":"https://xeppetto.github.io/tags/%ED%94%8C%EB%A6%BD%EC%82%AC%EC%9D%B4%EB%93%9C/"},{"name":"문제","slug":"문제","permalink":"https://xeppetto.github.io/tags/%EB%AC%B8%EC%A0%9C/"},{"name":"기회","slug":"기회","permalink":"https://xeppetto.github.io/tags/%EA%B8%B0%ED%9A%8C/"},{"name":"창조","slug":"창조","permalink":"https://xeppetto.github.io/tags/%EC%B0%BD%EC%A1%B0/"}]}],"categories":[{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"WSL & Docker","slug":"소프트웨어/WSL-Docker","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/WSL-Docker/"},{"name":"X의話","slug":"X의話","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/"},{"name":"X의 斷想","slug":"X의話/X의-斷想","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/X%EC%9D%98-%E6%96%B7%E6%83%B3/"},{"name":"Lv8+の꽃怪獸","slug":"X의話/Lv8-の꽃怪獸","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/Lv8-%E3%81%AE%EA%BD%83%E6%80%AA%E7%8D%B8/"},{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"배움/독서","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%8F%85%EC%84%9C/"},{"name":"테스팅","slug":"소프트웨어/테스팅","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"버그 보고","slug":"소프트웨어/테스팅/버그-보고","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%ED%85%8C%EC%8A%A4%ED%8C%85/%EB%B2%84%EA%B7%B8-%EB%B3%B4%EA%B3%A0/"},{"name":"블로그 이야기","slug":"X의話/블로그-이야기","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0/"},{"name":"도구개발","slug":"소프트웨어/도구개발","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EB%8F%84%EA%B5%AC%EA%B0%9C%EB%B0%9C/"},{"name":"Tools","slug":"소프트웨어/Tools","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Tools/"},{"name":"게임","slug":"소프트웨어/게임","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/%EA%B2%8C%EC%9E%84/"},{"name":"Operating Systems","slug":"소프트웨어/Operating-Systems","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/"},{"name":"Windows","slug":"소프트웨어/Operating-Systems/Windows","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Operating-Systems/Windows/"},{"name":"명언","slug":"배움/명언","permalink":"https://xeppetto.github.io/categories/%EB%B0%B0%EC%9B%80/%EB%AA%85%EC%96%B8/"},{"name":"日新又日新","slug":"X의話/日新又日新","permalink":"https://xeppetto.github.io/categories/X%EC%9D%98%E8%A9%B1/%E6%97%A5%E6%96%B0%E5%8F%88%E6%97%A5%E6%96%B0/"},{"name":"Markdown","slug":"소프트웨어/Markdown","permalink":"https://xeppetto.github.io/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/Markdown/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"https://xeppetto.github.io/tags/Operating-System/"},{"name":"Development","slug":"Development","permalink":"https://xeppetto.github.io/tags/Development/"},{"name":"Environment","slug":"Environment","permalink":"https://xeppetto.github.io/tags/Environment/"},{"name":"WSL","slug":"WSL","permalink":"https://xeppetto.github.io/tags/WSL/"},{"name":"Docker","slug":"Docker","permalink":"https://xeppetto.github.io/tags/Docker/"},{"name":"Windows","slug":"Windows","permalink":"https://xeppetto.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://xeppetto.github.io/tags/Linux/"},{"name":"React","slug":"React","permalink":"https://xeppetto.github.io/tags/React/"},{"name":"단상","slug":"단상","permalink":"https://xeppetto.github.io/tags/%EB%8B%A8%EC%83%81/"},{"name":"개인 생각","slug":"개인-생각","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%83%9D%EA%B0%81/"},{"name":"개인 의견","slug":"개인-의견","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%9D%98%EA%B2%AC/"},{"name":"문제 해결","slug":"문제-해결","permalink":"https://xeppetto.github.io/tags/%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/"},{"name":"Problem Solving","slug":"Problem-Solving","permalink":"https://xeppetto.github.io/tags/Problem-Solving/"},{"name":"해결의 행위","slug":"해결의-행위","permalink":"https://xeppetto.github.io/tags/%ED%95%B4%EA%B2%B0%EC%9D%98-%ED%96%89%EC%9C%84/"},{"name":"프로세스의 구조를 파악하기","slug":"프로세스의-구조를-파악하기","permalink":"https://xeppetto.github.io/tags/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0/"},{"name":"About","slug":"About","permalink":"https://xeppetto.github.io/tags/About/"},{"name":"Blog","slug":"Blog","permalink":"https://xeppetto.github.io/tags/Blog/"},{"name":"Writer","slug":"Writer","permalink":"https://xeppetto.github.io/tags/Writer/"},{"name":"Xeppetto","slug":"Xeppetto","permalink":"https://xeppetto.github.io/tags/Xeppetto/"},{"name":"천년나무","slug":"천년나무","permalink":"https://xeppetto.github.io/tags/%EC%B2%9C%EB%85%84%EB%82%98%EB%AC%B4/"},{"name":"Product Manager","slug":"Product-Manager","permalink":"https://xeppetto.github.io/tags/Product-Manager/"},{"name":"제품 관리자","slug":"제품-관리자","permalink":"https://xeppetto.github.io/tags/%EC%A0%9C%ED%92%88-%EA%B4%80%EB%A6%AC%EC%9E%90/"},{"name":"개발자","slug":"개발자","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"QA","slug":"QA","permalink":"https://xeppetto.github.io/tags/QA/"},{"name":"Tester","slug":"Tester","permalink":"https://xeppetto.github.io/tags/Tester/"},{"name":"내 경험","slug":"내-경험","permalink":"https://xeppetto.github.io/tags/%EB%82%B4-%EA%B2%BD%ED%97%98/"},{"name":"경력","slug":"경력","permalink":"https://xeppetto.github.io/tags/%EA%B2%BD%EB%A0%A5/"},{"name":"No Code","slug":"No-Code","permalink":"https://xeppetto.github.io/tags/No-Code/"},{"name":"어려움","slug":"어려움","permalink":"https://xeppetto.github.io/tags/%EC%96%B4%EB%A0%A4%EC%9B%80/"},{"name":"극복","slug":"극복","permalink":"https://xeppetto.github.io/tags/%EA%B7%B9%EB%B3%B5/"},{"name":"배움","slug":"배움","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EC%9B%80/"},{"name":"독서","slug":"독서","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%EC%84%9C/"},{"name":"독후감","slug":"독후감","permalink":"https://xeppetto.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"},{"name":"책과 내 생각","slug":"책과-내-생각","permalink":"https://xeppetto.github.io/tags/%EC%B1%85%EA%B3%BC-%EB%82%B4-%EC%83%9D%EA%B0%81/"},{"name":"국내도서","slug":"국내도서","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EB%82%B4%EB%8F%84%EC%84%9C/"},{"name":"무엇이 옳은가","slug":"무엇이-옳은가","permalink":"https://xeppetto.github.io/tags/%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%98%B3%EC%9D%80%EA%B0%80/"},{"name":"워드프레스","slug":"워드프레스","permalink":"https://xeppetto.github.io/tags/%EC%9B%8C%EB%93%9C%ED%94%84%EB%A0%88%EC%8A%A4/"},{"name":"국어를 즐겁게","slug":"국어를-즐겁게","permalink":"https://xeppetto.github.io/tags/%EA%B5%AD%EC%96%B4%EB%A5%BC-%EC%A6%90%EA%B2%81%EA%B2%8C/"},{"name":"개인 취향","slug":"개인-취향","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%B7%A8%ED%96%A5/"},{"name":"내가 좋아하는 것","slug":"내가-좋아하는-것","permalink":"https://xeppetto.github.io/tags/%EB%82%B4%EA%B0%80-%EC%A2%8B%EC%95%84%ED%95%98%EB%8A%94-%EA%B2%83/"},{"name":"좋은 회사","slug":"좋은-회사","permalink":"https://xeppetto.github.io/tags/%EC%A2%8B%EC%9D%80-%ED%9A%8C%EC%82%AC/"},{"name":"만들기","slug":"만들기","permalink":"https://xeppetto.github.io/tags/%EB%A7%8C%EB%93%A4%EA%B8%B0/"},{"name":"글쓰기","slug":"글쓰기","permalink":"https://xeppetto.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"소프트웨어","slug":"소프트웨어","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4/"},{"name":"테스팅","slug":"테스팅","permalink":"https://xeppetto.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8C%85/"},{"name":"실무","slug":"실무","permalink":"https://xeppetto.github.io/tags/%EC%8B%A4%EB%AC%B4/"},{"name":"버그보고","slug":"버그보고","permalink":"https://xeppetto.github.io/tags/%EB%B2%84%EA%B7%B8%EB%B3%B4%EA%B3%A0/"},{"name":"한글","slug":"한글","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B8%80/"},{"name":"한국어","slug":"한국어","permalink":"https://xeppetto.github.io/tags/%ED%95%9C%EA%B5%AD%EC%96%B4/"},{"name":"맞춤법","slug":"맞춤법","permalink":"https://xeppetto.github.io/tags/%EB%A7%9E%EC%B6%A4%EB%B2%95/"},{"name":"글 잘 쓰는 방법","slug":"글-잘-쓰는-방법","permalink":"https://xeppetto.github.io/tags/%EA%B8%80-%EC%9E%98-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95/"},{"name":"혼잣말","slug":"혼잣말","permalink":"https://xeppetto.github.io/tags/%ED%98%BC%EC%9E%A3%EB%A7%90/"},{"name":"블로그","slug":"블로그","permalink":"https://xeppetto.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"나혼자 놀기","slug":"나혼자-놀기","permalink":"https://xeppetto.github.io/tags/%EB%82%98%ED%98%BC%EC%9E%90-%EB%86%80%EA%B8%B0/"},{"name":"재밋으면 그만","slug":"재밋으면-그만","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EC%9C%BC%EB%A9%B4-%EA%B7%B8%EB%A7%8C/"},{"name":"Tool","slug":"Tool","permalink":"https://xeppetto.github.io/tags/Tool/"},{"name":"Web","slug":"Web","permalink":"https://xeppetto.github.io/tags/Web/"},{"name":"Browser","slug":"Browser","permalink":"https://xeppetto.github.io/tags/Browser/"},{"name":"Encoding","slug":"Encoding","permalink":"https://xeppetto.github.io/tags/Encoding/"},{"name":"Decoding","slug":"Decoding","permalink":"https://xeppetto.github.io/tags/Decoding/"},{"name":"Address","slug":"Address","permalink":"https://xeppetto.github.io/tags/Address/"},{"name":"Web Standard","slug":"Web-Standard","permalink":"https://xeppetto.github.io/tags/Web-Standard/"},{"name":"게임","slug":"게임","permalink":"https://xeppetto.github.io/tags/%EA%B2%8C%EC%9E%84/"},{"name":"놀자","slug":"놀자","permalink":"https://xeppetto.github.io/tags/%EB%86%80%EC%9E%90/"},{"name":"즐기자","slug":"즐기자","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B8%B0%EC%9E%90/"},{"name":"재밋다","slug":"재밋다","permalink":"https://xeppetto.github.io/tags/%EC%9E%AC%EB%B0%8B%EB%8B%A4/"},{"name":"매뉴얼","slug":"매뉴얼","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EB%89%B4%EC%96%BC/"},{"name":"안내서","slug":"안내서","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EB%82%B4%EC%84%9C/"},{"name":"뉴스","slug":"뉴스","permalink":"https://xeppetto.github.io/tags/%EB%89%B4%EC%8A%A4/"},{"name":"내가 싫어하는 것","slug":"내가-싫어하는-것","permalink":"https://xeppetto.github.io/tags/%EB%82%B4%EA%B0%80-%EC%8B%AB%EC%96%B4%ED%95%98%EB%8A%94-%EA%B2%83/"},{"name":"신뢰","slug":"신뢰","permalink":"https://xeppetto.github.io/tags/%EC%8B%A0%EB%A2%B0/"},{"name":"거짓","slug":"거짓","permalink":"https://xeppetto.github.io/tags/%EA%B1%B0%EC%A7%93/"},{"name":"즐겁게 살기","slug":"즐겁게-살기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"후원","slug":"후원","permalink":"https://xeppetto.github.io/tags/%ED%9B%84%EC%9B%90/"},{"name":"도네리카노","slug":"도네리카노","permalink":"https://xeppetto.github.io/tags/%EB%8F%84%EB%84%A4%EB%A6%AC%EC%B9%B4%EB%85%B8/"},{"name":"커피","slug":"커피","permalink":"https://xeppetto.github.io/tags/%EC%BB%A4%ED%94%BC/"},{"name":"즐겁게 글쓰기","slug":"즐겁게-글쓰기","permalink":"https://xeppetto.github.io/tags/%EC%A6%90%EA%B2%81%EA%B2%8C-%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"Computer","slug":"Computer","permalink":"https://xeppetto.github.io/tags/Computer/"},{"name":"Notepad++","slug":"Notepad","permalink":"https://xeppetto.github.io/tags/Notepad/"},{"name":"Notepad","slug":"Notepad","permalink":"https://xeppetto.github.io/tags/Notepad/"},{"name":"자동완성","slug":"자동완성","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EB%8F%99%EC%99%84%EC%84%B1/"},{"name":"인생","slug":"인생","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D/"},{"name":"건강하게 살기","slug":"건강하게-살기","permalink":"https://xeppetto.github.io/tags/%EA%B1%B4%EA%B0%95%ED%95%98%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"새 해 계획","slug":"새-해-계획","permalink":"https://xeppetto.github.io/tags/%EC%83%88-%ED%95%B4-%EA%B3%84%ED%9A%8D/"},{"name":"나이 들어감","slug":"나이-들어감","permalink":"https://xeppetto.github.io/tags/%EB%82%98%EC%9D%B4-%EB%93%A4%EC%96%B4%EA%B0%90/"},{"name":"Windows10","slug":"Windows10","permalink":"https://xeppetto.github.io/tags/Windows10/"},{"name":"Context Menu","slug":"Context-Menu","permalink":"https://xeppetto.github.io/tags/Context-Menu/"},{"name":"마우스 우클릭 메뉴","slug":"마우스-우클릭-메뉴","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9A%B0%ED%81%B4%EB%A6%AD-%EB%A9%94%EB%89%B4/"},{"name":"Windows11","slug":"Windows11","permalink":"https://xeppetto.github.io/tags/Windows11/"},{"name":"Microsoft Office","slug":"Microsoft-Office","permalink":"https://xeppetto.github.io/tags/Microsoft-Office/"},{"name":"SCM Music Player","slug":"SCM-Music-Player","permalink":"https://xeppetto.github.io/tags/SCM-Music-Player/"},{"name":"배경음악","slug":"배경음악","permalink":"https://xeppetto.github.io/tags/%EB%B0%B0%EA%B2%BD%EC%9D%8C%EC%95%85/"},{"name":"음악","slug":"음악","permalink":"https://xeppetto.github.io/tags/%EC%9D%8C%EC%95%85/"},{"name":"인생 노래","slug":"인생-노래","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%83%9D-%EB%85%B8%EB%9E%98/"},{"name":"Music","slug":"Music","permalink":"https://xeppetto.github.io/tags/Music/"},{"name":"Youtube","slug":"Youtube","permalink":"https://xeppetto.github.io/tags/Youtube/"},{"name":"인스타그램","slug":"인스타그램","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/"},{"name":"개인 사진","slug":"개인-사진","permalink":"https://xeppetto.github.io/tags/%EA%B0%9C%EC%9D%B8-%EC%82%AC%EC%A7%84/"},{"name":"명언","slug":"명언","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%96%B8/"},{"name":"안중근","slug":"안중근","permalink":"https://xeppetto.github.io/tags/%EC%95%88%EC%A4%91%EA%B7%BC/"},{"name":"의사","slug":"의사","permalink":"https://xeppetto.github.io/tags/%EC%9D%98%EC%82%AC/"},{"name":"대한의군 참모중장","slug":"대한의군-참모중장","permalink":"https://xeppetto.github.io/tags/%EB%8C%80%ED%95%9C%EC%9D%98%EA%B5%B0-%EC%B0%B8%EB%AA%A8%EC%A4%91%EC%9E%A5/"},{"name":"약한 것","slug":"약한-것","permalink":"https://xeppetto.github.io/tags/%EC%95%BD%ED%95%9C-%EA%B2%83/"},{"name":"강한 것","slug":"강한-것","permalink":"https://xeppetto.github.io/tags/%EA%B0%95%ED%95%9C-%EA%B2%83/"},{"name":"인","slug":"인","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8/"},{"name":"악","slug":"악","permalink":"https://xeppetto.github.io/tags/%EC%95%85/"},{"name":"인으로 악에 대적한다","slug":"인으로-악에-대적한다","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EC%9C%BC%EB%A1%9C-%EC%95%85%EC%97%90-%EB%8C%80%EC%A0%81%ED%95%9C%EB%8B%A4/"},{"name":"인간답게 살기","slug":"인간답게-살기","permalink":"https://xeppetto.github.io/tags/%EC%9D%B8%EA%B0%84%EB%8B%B5%EA%B2%8C-%EC%82%B4%EA%B8%B0/"},{"name":"모으기","slug":"모으기","permalink":"https://xeppetto.github.io/tags/%EB%AA%A8%EC%9C%BC%EA%B8%B0/"},{"name":"시작","slug":"시작","permalink":"https://xeppetto.github.io/tags/%EC%8B%9C%EC%9E%91/"},{"name":"함께 사는 세상","slug":"함께-사는-세상","permalink":"https://xeppetto.github.io/tags/%ED%95%A8%EA%BB%98-%EC%82%AC%EB%8A%94-%EC%84%B8%EC%83%81/"},{"name":"AMD","slug":"AMD","permalink":"https://xeppetto.github.io/tags/AMD/"},{"name":"Secure Boot","slug":"Secure-Boot","permalink":"https://xeppetto.github.io/tags/Secure-Boot/"},{"name":"Storage","slug":"Storage","permalink":"https://xeppetto.github.io/tags/Storage/"},{"name":"MBR","slug":"MBR","permalink":"https://xeppetto.github.io/tags/MBR/"},{"name":"GPT","slug":"GPT","permalink":"https://xeppetto.github.io/tags/GPT/"},{"name":"convert","slug":"convert","permalink":"https://xeppetto.github.io/tags/convert/"},{"name":"TPM","slug":"TPM","permalink":"https://xeppetto.github.io/tags/TPM/"},{"name":"fTPM","slug":"fTPM","permalink":"https://xeppetto.github.io/tags/fTPM/"},{"name":"Compatibility","slug":"Compatibility","permalink":"https://xeppetto.github.io/tags/Compatibility/"},{"name":"과거","slug":"과거","permalink":"https://xeppetto.github.io/tags/%EA%B3%BC%EA%B1%B0/"},{"name":"현재","slug":"현재","permalink":"https://xeppetto.github.io/tags/%ED%98%84%EC%9E%AC/"},{"name":"미래","slug":"미래","permalink":"https://xeppetto.github.io/tags/%EB%AF%B8%EB%9E%98/"},{"name":"Package Manager","slug":"Package-Manager","permalink":"https://xeppetto.github.io/tags/Package-Manager/"},{"name":"댓글 금지","slug":"댓글-금지","permalink":"https://xeppetto.github.io/tags/%EB%8C%93%EA%B8%80-%EA%B8%88%EC%A7%80/"},{"name":"그냥 이런 놈이구나","slug":"그냥-이런-놈이구나","permalink":"https://xeppetto.github.io/tags/%EA%B7%B8%EB%83%A5-%EC%9D%B4%EB%9F%B0-%EB%86%88%EC%9D%B4%EA%B5%AC%EB%82%98/"},{"name":"Database","slug":"Database","permalink":"https://xeppetto.github.io/tags/Database/"},{"name":"Tibero","slug":"Tibero","permalink":"https://xeppetto.github.io/tags/Tibero/"},{"name":"매일 글쓰기","slug":"매일-글쓰기","permalink":"https://xeppetto.github.io/tags/%EB%A7%A4%EC%9D%BC-%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"열정","slug":"열정","permalink":"https://xeppetto.github.io/tags/%EC%97%B4%EC%A0%95/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://xeppetto.github.io/tags/PostgreSQL/"},{"name":"Update","slug":"Update","permalink":"https://xeppetto.github.io/tags/Update/"},{"name":"Apt","slug":"Apt","permalink":"https://xeppetto.github.io/tags/Apt/"},{"name":"Install","slug":"Install","permalink":"https://xeppetto.github.io/tags/Install/"},{"name":"Upgrade","slug":"Upgrade","permalink":"https://xeppetto.github.io/tags/Upgrade/"},{"name":"Learning","slug":"Learning","permalink":"https://xeppetto.github.io/tags/Learning/"},{"name":"학습","slug":"학습","permalink":"https://xeppetto.github.io/tags/%ED%95%99%EC%8A%B5/"},{"name":"취미","slug":"취미","permalink":"https://xeppetto.github.io/tags/%EC%B7%A8%EB%AF%B8/"},{"name":"SQLServer","slug":"SQLServer","permalink":"https://xeppetto.github.io/tags/SQLServer/"},{"name":"모르는 것","slug":"모르는-것","permalink":"https://xeppetto.github.io/tags/%EB%AA%A8%EB%A5%B4%EB%8A%94-%EA%B2%83/"},{"name":"아는 것","slug":"아는-것","permalink":"https://xeppetto.github.io/tags/%EC%95%84%EB%8A%94-%EA%B2%83/"},{"name":"깨닫는 것","slug":"깨닫는-것","permalink":"https://xeppetto.github.io/tags/%EA%B9%A8%EB%8B%AB%EB%8A%94-%EA%B2%83/"},{"name":"MariaDB","slug":"MariaDB","permalink":"https://xeppetto.github.io/tags/MariaDB/"},{"name":"mySQL","slug":"mySQL","permalink":"https://xeppetto.github.io/tags/mySQL/"},{"name":"고민","slug":"고민","permalink":"https://xeppetto.github.io/tags/%EA%B3%A0%EB%AF%BC/"},{"name":"생각","slug":"생각","permalink":"https://xeppetto.github.io/tags/%EC%83%9D%EA%B0%81/"},{"name":"정체성","slug":"정체성","permalink":"https://xeppetto.github.io/tags/%EC%A0%95%EC%B2%B4%EC%84%B1/"},{"name":"WSL2","slug":"WSL2","permalink":"https://xeppetto.github.io/tags/WSL2/"},{"name":"WSL1","slug":"WSL1","permalink":"https://xeppetto.github.io/tags/WSL1/"},{"name":"자기계발","slug":"자기계발","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C/"},{"name":"프로젝트","slug":"프로젝트","permalink":"https://xeppetto.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/"},{"name":"사업","slug":"사업","permalink":"https://xeppetto.github.io/tags/%EC%82%AC%EC%97%85/"},{"name":"Installation","slug":"Installation","permalink":"https://xeppetto.github.io/tags/Installation/"},{"name":"Testing","slug":"Testing","permalink":"https://xeppetto.github.io/tags/Testing/"},{"name":"OSX","slug":"OSX","permalink":"https://xeppetto.github.io/tags/OSX/"},{"name":"Github","slug":"Github","permalink":"https://xeppetto.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"https://xeppetto.github.io/tags/Markdown/"},{"name":"깃헙","slug":"깃헙","permalink":"https://xeppetto.github.io/tags/%EA%B9%83%ED%97%99/"},{"name":"마크다운","slug":"마크다운","permalink":"https://xeppetto.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"Markup","slug":"Markup","permalink":"https://xeppetto.github.io/tags/Markup/"},{"name":"HTML","slug":"HTML","permalink":"https://xeppetto.github.io/tags/HTML/"},{"name":"GFM","slug":"GFM","permalink":"https://xeppetto.github.io/tags/GFM/"},{"name":"Grammar","slug":"Grammar","permalink":"https://xeppetto.github.io/tags/Grammar/"},{"name":"CommonMark","slug":"CommonMark","permalink":"https://xeppetto.github.io/tags/CommonMark/"},{"name":"감사인사","slug":"감사인사","permalink":"https://xeppetto.github.io/tags/%EA%B0%90%EC%82%AC%EC%9D%B8%EC%82%AC/"},{"name":"소개","slug":"소개","permalink":"https://xeppetto.github.io/tags/%EC%86%8C%EA%B0%9C/"},{"name":"쿠키 아님","slug":"쿠키-아님","permalink":"https://xeppetto.github.io/tags/%EC%BF%A0%ED%82%A4-%EC%95%84%EB%8B%98/"},{"name":"사람임","slug":"사람임","permalink":"https://xeppetto.github.io/tags/%EC%82%AC%EB%9E%8C%EC%9E%84/"},{"name":"세상","slug":"세상","permalink":"https://xeppetto.github.io/tags/%EC%84%B8%EC%83%81/"},{"name":"간디","slug":"간디","permalink":"https://xeppetto.github.io/tags/%EA%B0%84%EB%94%94/"},{"name":"변화","slug":"변화","permalink":"https://xeppetto.github.io/tags/%EB%B3%80%ED%99%94/"},{"name":"애자일","slug":"애자일","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC/"},{"name":"명사화","slug":"명사화","permalink":"https://xeppetto.github.io/tags/%EB%AA%85%EC%82%AC%ED%99%94/"},{"name":"애자일은 없다","slug":"애자일은-없다","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%80-%EC%97%86%EB%8B%A4/"},{"name":"애자일 개발이다","slug":"애자일-개발이다","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC-%EA%B0%9C%EB%B0%9C%EC%9D%B4%EB%8B%A4/"},{"name":"애자일 개발","slug":"애자일-개발","permalink":"https://xeppetto.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC-%EA%B0%9C%EB%B0%9C/"},{"name":"자아","slug":"자아","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EC%95%84/"},{"name":"나","slug":"나","permalink":"https://xeppetto.github.io/tags/%EB%82%98/"},{"name":"자세","slug":"자세","permalink":"https://xeppetto.github.io/tags/%EC%9E%90%EC%84%B8/"},{"name":"랄프 에머슨","slug":"랄프-에머슨","permalink":"https://xeppetto.github.io/tags/%EB%9E%84%ED%94%84-%EC%97%90%EB%A8%B8%EC%8A%A8/"},{"name":"시","slug":"시","permalink":"https://xeppetto.github.io/tags/%EC%8B%9C/"},{"name":"성공","slug":"성공","permalink":"https://xeppetto.github.io/tags/%EC%84%B1%EA%B3%B5/"},{"name":"도서","slug":"도서","permalink":"https://xeppetto.github.io/tags/%EB%8F%84%EC%84%9C/"},{"name":"플립사이드","slug":"플립사이드","permalink":"https://xeppetto.github.io/tags/%ED%94%8C%EB%A6%BD%EC%82%AC%EC%9D%B4%EB%93%9C/"},{"name":"문제","slug":"문제","permalink":"https://xeppetto.github.io/tags/%EB%AC%B8%EC%A0%9C/"},{"name":"기회","slug":"기회","permalink":"https://xeppetto.github.io/tags/%EA%B8%B0%ED%9A%8C/"},{"name":"창조","slug":"창조","permalink":"https://xeppetto.github.io/tags/%EC%B0%BD%EC%A1%B0/"}]}